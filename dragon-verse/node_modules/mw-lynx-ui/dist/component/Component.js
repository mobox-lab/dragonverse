import Gtk, { Delegate } from 'gtoolkit';

class Component {
    constructor() {
        //#region Anim
        this.renderAnim = (dt) => {
            if (this._root && this._root.visible) {
                this.renderAnimHandler(dt);
            }
        };
        //#endregion
        //#region Event
        this.onAttach = new Delegate.SimpleDelegate().setProtected();
        this.onDetach = new Delegate.SimpleDelegate().setProtected();
        //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
    }
    static create() {
        throw new Error("not implemented.");
    }
    static defaultOption() {
        throw new Error("not implemented.");
    }
    initRoot(_root) {
        this._root = _root ?
            _root :
            mw.Canvas.newObject(undefined, "root");
        this._root.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        if (this._root.destroyObject === this._root.constructor.prototype.destroyObject) {
            this._root.destroyObject = () => {
                if (this.renderAnimHandler) {
                    mw.TimeUtil.onEnterFrame.remove(this.renderAnim);
                }
                this.destroy();
                this._root.constructor.prototype.destroyObject.call(this._root);
            };
        }
        if (this.renderAnimHandler) {
            mw.TimeUtil.onEnterFrame.add(this.renderAnim);
        }
    }
    get root() {
        if (!this._root)
            this.initRoot();
        return this._root;
    }
    setLayout(option) {
        if (this._root) {
            if (option.zOrder !== undefined)
                this._root.zOrder = option.zOrder;
            Gtk.setUiSize(this._root, option.size.x, option.size.y);
        }
        return this;
    }
    destroy() {
    }
    attach(canvas) {
        if (canvas instanceof mw.Canvas) {
            canvas.addChild(this.root);
        }
        else {
            canvas.root.addChild(this.root);
        }
        this.onAttach.invoke();
        return this;
    }
    detach() {
        this.onDetach.invoke();
        this._root?.removeObject();
    }
}
/**
 * Extract layout from option.
 * @param {ComponentOption} option
 * @returns {[
 * [number, number],
 * [number, number, number, number],
 * [number, number]
 * ]}
 *      [x,y]
 *      [pt, pr, pb, pl]
 *      [x - pl - pr, y - pt - pb]
 */
function extractLayoutFromOption(option) {
    const [x, y] = [option.size.x, option.size.y];
    const [pt, pr, pb, pl] = [option.padding.top ?? 0,
        option.padding.right ?? 0,
        option.padding.bottom ?? 0,
        option.padding.left ?? 0,
    ];
    return [
        [x, y],
        [pt, pr, pb, pl],
        [x - pl - pr, y - pt - pb]
    ];
}
/**
 * Override layout option.
 * @param {ComponentOption} self
 * @param {ComponentOption} from
 * @returns {ComponentOption}
 */
function overrideOption(self, from) {
    if (self === from)
        return;
    if (from?.zOrder !== undefined)
        self.zOrder = from.zOrder;
    if (from?.size !== undefined) {
        if (from.size.x !== undefined)
            self.size.x = from.size.x;
        if (from.size.y !== undefined)
            self.size.y = from.size.y;
    }
    if (from?.padding) {
        if (from.padding.top !== undefined)
            self.padding.top = from.padding.top;
        if (from.padding.right !== undefined)
            self.padding.right = from.padding.right;
        if (from.padding.bottom !== undefined)
            self.padding.bottom = from.padding.bottom;
        if (from.padding.left !== undefined)
            self.padding.left = from.padding.left;
    }
    return self;
}

export { Component, extractLayoutFromOption, overrideOption };
//# sourceMappingURL=Component.js.map
