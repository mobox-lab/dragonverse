import { ParamInputSizeY } from '../param-base/IGodModParamInput.js';
import Gtk, { Delegate } from 'gtoolkit';
import { Lui, TextField, Property } from 'mw-lynx-ui';
import { GodModPanelSizeX } from '../base/GodModPanelConst.js';
import { GodModParamInputBase } from '../param-base/GodModParamInputBase.js';

var Color = Lui.Asset.Color;
/**
 * GodModIntegerParamInput.
 *
 * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
 * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
 * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
 * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
 * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
 * @author LviatYi
 * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
 * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
 * @internal
 */
class GodModIntegerParamInput extends GodModParamInputBase {
    //#region Lui Component
    static create() {
        let input = new GodModIntegerParamInput();
        input._input = TextField.create({
            label: "integer",
            size: { x: GodModPanelSizeX, y: ParamInputSizeY },
            color: {
                primary: Color.Blue,
                secondary: Color.Blue200,
            },
            fontSize: 16,
            fontStyle: mw.UIFontGlyph.Light,
            corner: Property.Corner.Top,
            type: mw.InputTextLimit.LimitToInt,
        }).attach(input);
        Gtk.setUiSize(input.root, GodModPanelSizeX, ParamInputSizeY);
        return input;
    }
    ;
    //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
    //#region IGodModParamInputParametric
    getParam() {
        return Number(this._input.text);
    }
    setParam(p) {
        this._input.setContent(p?.toString() ?? "");
    }
    setValidator(validator) {
        this._input.setValidator(validator);
    }
    setCustomLabel(label) {
        this._input.setLabel(label ?? "integer");
    }
    get validated() {
        return this._input.validated;
    }
    get onCommit() {
        if (!this._onCommit) {
            this._onCommit = new Delegate.SimpleDelegate();
            this._input.onCommit.add(() => this._onCommit.invoke());
        }
        return this._onCommit;
    }
}

export { GodModIntegerParamInput as default };
//# sourceMappingURL=GodModIntegerParamInput.js.map
