{"version":3,"file":"GodModEnumParamInput.js","sources":["../../../ui/param-input/GodModEnumParamInput.ts"],"sourcesContent":["import { IGodModParamInputParametric, ParamInputSizeY } from \"../param-base/IGodModParamInput\";\r\nimport { GodModParamInputOption } from \"../param-base/IGodModParamValidatorOption\";\r\nimport Gtk, { Delegate } from \"gtoolkit\";\r\nimport { AutoComplete, AutoCompleteItem, InputChangeEvent, KeyEvent, Lui, Property } from \"mw-lynx-ui\";\r\nimport Log4Ts from \"mw-log4ts\";\r\nimport { InferParamType } from \"../../GodModParam\";\r\nimport { GodModPanelSizeX } from \"../base/GodModPanelConst\";\r\nimport { GodModParamInputBase } from \"../param-base/GodModParamInputBase\";\r\nimport Color = Lui.Asset.Color;\r\n\r\nclass EnumVal implements AutoCompleteItem {\r\n    public label: string;\r\n\r\n    public value: unknown;\r\n}\r\n\r\nlet shareInput: AutoComplete<EnumVal>;\r\n\r\nconst enumValConcreteMap: Map<object, EnumVal[]> = new Map();\r\n\r\nconst enumValConcreteIndexer: Map<object, Map<string, unknown>> = new Map();\r\n\r\nfunction getEnumValConcrete(enumObj: object) {\r\n    return Gtk.tryGet(enumValConcreteMap, enumObj, () => {\r\n        const indexer = new Map<string, unknown>();\r\n        const enumValList: EnumVal[] = [];\r\n        Gtk.enumVals(enumObj)\r\n            .forEach((item) => {\r\n                let key = enumObj[item];\r\n                indexer.set(key, item);\r\n                enumValList.push({\r\n                    label: key,\r\n                    value: item,\r\n                });\r\n            });\r\n\r\n        enumValConcreteIndexer.set(enumObj, indexer);\r\n        return enumValList;\r\n    });\r\n}\r\n\r\n/**\r\n * GodModEnumParamInput.\r\n *\r\n * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟\r\n * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄\r\n * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄\r\n * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄\r\n * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n * @author LviatYi\r\n * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip\r\n * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z\r\n * @internal\r\n */\r\nexport default class GodModEnumParamInput<Enum extends object>\r\n    extends GodModParamInputBase\r\n    // @ts-ignore\r\n    implements IGodModParamInputParametric<InferParamType<Enum>> {\r\n    private _currentHoldObject: object;\r\n\r\n//#region Lui Component\r\n    public static create<Enum extends object>(option?: GodModEnumParamInputOption): GodModEnumParamInput<Enum> {\r\n        const input = new GodModEnumParamInput<Enum>();\r\n        input._currentHoldObject = option.enumObj;\r\n        const enumVals = getEnumValConcrete(option.enumObj);\r\n\r\n        if (!shareInput) {\r\n            shareInput = AutoComplete.create({\r\n                label: \"enum\",\r\n                items: enumVals,\r\n                size: {x: GodModPanelSizeX, y: ParamInputSizeY},\r\n                color: {\r\n                    primary: Color.Blue,\r\n                    secondary: Color.Blue200,\r\n                },\r\n                itemHeight: 40,\r\n                maxCount: 6,\r\n                fontSize: 16,\r\n                fontStyle: mw.UIFontGlyph.Light,\r\n                corner: Property.Corner.Top,\r\n            })\r\n                .attach(input);\r\n        } else {\r\n            shareInput.reloadItems(enumVals);\r\n            shareInput.attach(input);\r\n        }\r\n\r\n        Gtk.setUiSize(input.root, GodModPanelSizeX, ParamInputSizeY);\r\n\r\n        return input;\r\n    };\r\n\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n\r\n    public getParam(): InferParamType<Enum> {\r\n        return shareInput?.choose?.value as InferParamType<Enum>;\r\n    }\r\n\r\n    public setParam(p: InferParamType<Enum>) {\r\n        const enumObj = this._currentHoldObject;\r\n        const item = enumValConcreteMap.get(enumObj).find(item => item.value === p);\r\n        if (item !== undefined) {\r\n            shareInput.choose = item;\r\n        }\r\n    }\r\n\r\n    public setEnumObj(enumObj: Enum) {\r\n        this._currentHoldObject = enumObj;\r\n        shareInput?.reloadItems(getEnumValConcrete(enumObj));\r\n    }\r\n\r\n    public setValidator(validator: Property.DataValidators<object>): void {\r\n        Log4Ts.log(GodModEnumParamInput, `Enum don't need any validator.`);\r\n    }\r\n\r\n    public get validated(): Property.DataValidateResult {\r\n        return {result: true};\r\n    }\r\n\r\n//#region Init\r\n    public onCommit: Delegate.SimpleDelegate<InputChangeEvent> = new Delegate.SimpleDelegate<InputChangeEvent>();\r\n\r\n    public onKeyUp: Delegate.SimpleDelegate<KeyEvent> = new Delegate.SimpleDelegate<KeyEvent>();\r\n\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n\r\n//#region CallBack\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n}\r\n\r\ninterface GodModEnumParamInputOption extends GodModParamInputOption {\r\n    validator?: Property.DataValidators<string>;\r\n\r\n    enumObj?: object;\r\n}"],"names":[],"mappings":"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"}