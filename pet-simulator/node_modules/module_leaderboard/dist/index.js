'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

//一条信息
class LeaderboardBaseItem extends BasePanel {
    mFieldTxtList = [];
    _playerId;
    onAwake() {
        super.onAwake();
        this.mFieldTxtList = this.getCanvasChildren(this.view.mContent, UI.TextBlock);
        this.mFieldTxtList.forEach((text) => {
            text.visibility = UI.SlateVisibility.Collapsed;
        });
    }
    /**
     * @internal
     * 设置内容
     * @param rankIndex 名次索引(0开始)
     * @param textIndex 字段索引
     * @param fieldValue 字段值
     * @param fieldText 控件显示内容
     */
    setContent(rankIndex, textIndex, fieldId, fieldValue, fieldText) {
        if (textIndex >= this.mFieldTxtList.length)
            return;
        this.mFieldTxtList[textIndex].text = fieldText;
        this.mFieldTxtList[textIndex].visibility = UI.SlateVisibility.Visible;
        this.onFieldSet(this._playerId, rankIndex, fieldId, fieldValue, textIndex, this.mFieldTxtList[textIndex]);
    }
    /**
     * @internal
     * 将自己显示在画布上
     * @param canvas 目标画布
     * @param playerId 玩家id
     * @param rankIndex 名次索引(0开始)
     * @param spacing 每一行的间距
     * @param layoutTxtField 对文本控件进行布局的方法
     */
    addToCanvas(canvas, playerId, rankIndex, spacing, layoutTxtField) {
        const position = new Type.Vector2(0, rankIndex * (this.size.y + spacing));
        if (this.uiObject.parent != canvas) {
            canvas.addChild(this.uiObject);
            layoutTxtField(this.mFieldTxtList);
        }
        this.uiObject.visibility = UI.SlateVisibility.SelfHitTestInvisible;
        this.uiObject.position = position;
        this._playerId = playerId;
        this.onAddToCanvas(playerId, rankIndex);
    }
    // @internal
    removeFromCanvas() {
        this.view.uiObject.visibility = UI.SlateVisibility.Collapsed;
    }
    /**
     * 显示在画布上调用，需要请复写
     * @param playerId 玩家id
     * @param rankIndex 排名(0开始)
     */
    onAddToCanvas(playerId, rankIndex) {
    }
    /**
     * 设置字段内容后调用，需要请复写
     * @param playerId 玩家id
     * @param rankIndex 名次索引(0开始)
     * @param fieldIndex 字段索引 (如果是排行字段，此参数为mull)
     * @param fieldValue 字段显示内容
     * @param textBlockIndex 文本控件索引
     * @param textBlock 文本控件
     */
    onFieldSet(playerId, rankIndex, fieldId, fieldValue, textBlockIndex, textBlock) {
    }
    //当前显示对象的playerId
    get playerId() {
        return this._playerId;
    }
}
//主面板
class LeaderboardBasePanel extends BasePanel {
    onClose = new Type.Action();
    //界面元素
    mFieldNameTxtList = []; //标题名
    mSelfFieldTxtList = []; //自己的数据
    //语言元素
    lan_notInList = null; //未上榜 如果不设置将会显示当前排名
    //变量
    fieldIdList = []; //字段id的数组(不包括派排名字段)
    fieldNameMap = new Map(); //字段名的字典(不包括派排名字段)  格式: <字段id, 字段Name>
    fieldValueFormatMap = new Map(); //排行榜value的格式     <字段id, 格式表达式>
    itemPool; //对象池
    itemList = []; //当前显示的玩家条目，索引就是名次
    //显示风格
    isShowRank = false; //是否显示排名
    rankFieldName = "排名"; //排名的字段名
    rankValueStyle; //处理排名值的显示样式
    showPlayerNum = 99999; //最多显示的玩家条数
    itemSpacing = 5; //每个元素的间距
    autoLayout = true; //是否自动布局
    fieldNum; //字段数量(算排名字段)
    sortFields = null; //排序的字段
    isInit = false;
    init() {
        if (this.isInit)
            return;
        this.isInit = true;
        this.mFieldNameTxtList = this.getCanvasChildren(this.view.mFieldName, UI.TextBlock);
        this.mSelfFieldTxtList = this.getCanvasChildren(this.view.mSelfList, UI.TextBlock);
        if (this.sortFields == null)
            this.sortFields = this.fieldIdList; //排序的字段为从前往后排序
        this.fieldNum = this.fieldIdList.length + (this.isShowRank ? 1 : 0); //字段的数量
        this.initFieldNameTxtList();
        this.layoutFieldTxt(this.mSelfFieldTxtList);
        this.view.mClose_btn.onClicked.add(() => {
            this.hide();
        });
        this.itemPool = new Extension.ObjPool(this.creatItem);
        this.holdBackTouch = true;
    }
    //初始化字段标题
    initFieldNameTxtList() {
        if (this.isShowRank) {
            this.setFieldName(0, this.rankFieldName);
        }
        for (let i = 0; i < this.fieldIdList.length; i++) {
            let fieldId = this.fieldIdList[i];
            let textIndex = i + (this.fieldNum - this.fieldIdList.length);
            this.setFieldName(textIndex, this.fieldNameMap.get(fieldId));
        }
        this.layoutFieldTxt(this.mFieldNameTxtList);
    }
    //自动布局一个文本控件数组
    layoutFieldTxt(textList) {
        const fieldNum = this.fieldNum; //要显示的个数
        if (this.autoLayout) {
            let space = textList[0].parent.size.x / fieldNum;
            for (let i = 0; i < fieldNum; i++) {
                if (textList[i] == null)
                    continue;
                let pos = textList[i].position.clone();
                pos.x = (i + 0.5) * space - textList[i].size.x * 0.5;
                textList[i].position = pos;
            }
        }
        for (let i = fieldNum; i < textList.length; i++) {
            if (textList[i] == null)
                continue;
            textList[i].visibility = UI.SlateVisibility.Collapsed;
        }
    }
    /**
     * 设置排行榜样式
     * @param title UI标题
     * @param fieldsAutoLayout 字段是否自动布局(true-均匀分布, false-所摆即所得）
     * @param showPlayerNum 最多显示的玩家数量
     * @param itemSpacing 每条数据的间距
     */
    setStyle(title, fieldsAutoLayout, showPlayerNum, itemSpacing) {
        if (this.view.mTitle_txt != null) {
            this.view.mTitle_txt.text = title;
        }
        this.autoLayout = fieldsAutoLayout;
        this.showPlayerNum = showPlayerNum;
        this.itemSpacing = itemSpacing;
        return this;
    }
    /**
     * 显示"名次"字段，默认不显示，调用这个方法后才会显示
     * @param fieldName 字段标题
     * @param valueStyle 字段值样式
     * @param notListed 未上榜(如果未上榜也显示"名次"请填写null)
     */
    showRankField(fieldName, valueStyle, notListed) {
        this.isShowRank = true;
        this.rankFieldName = fieldName;
        if (valueStyle == null) {
            this.rankValueStyle = (rankIndex) => {
                return (rankIndex + 1).toString();
            };
        }
        else {
            this.rankValueStyle = (rankIndex) => {
                return Util.StringUtil.format(valueStyle, rankIndex + 1);
            };
        }
        this.lan_notInList = notListed;
        return this;
    }
    /**
     * 添加一个字段
     * @param fieldId 字段ID
     * @param fieldName 字段的标题
     * @param valueStyle 字段值的展示样式 (例：{0}分)
     */
    addField(fieldId, fieldName, valueStyle) {
        if (this.fieldIdList.includes(fieldId))
            return; //重复的字段id
        this.fieldIdList.push(fieldId);
        this.fieldNameMap.set(fieldId, fieldName);
        if (valueStyle != null)
            this.fieldValueFormatMap.set(fieldId, valueStyle);
        return this;
    }
    /**
     * 设置排序字段ID，可以设置多字段排序，只支持从大到小排序
     * @param fields 排序字段
     */
    setSortFields(...fieldIds) {
        this.sortFields = fieldIds;
        return this;
    }
    /**
     * 设置排序的方法
     * @param fn 方法
     */
    setSortMethod(fn) {
        this.sortFun = fn;
        return this;
    }
    /**
     * 显示调用
     * @param playerDataList 玩家数据列表
     */
    onShow(playerDataList) {
        this.init();
        this.creatContentList(this.sortFun(playerDataList));
    }
    /**隐藏调用 */
    onHide() {
        this.onClose.call();
    }
    //排序方法
    sortFun(dataList) {
        if (this.sortFields == null)
            return dataList;
        for (let i = this.sortFields.length - 1; i >= 0; i--) {
            let sortField = this.sortFields[i];
            dataList.sort((a, b) => {
                return b.data[sortField] - a.data[sortField];
            });
        }
        return dataList;
    }
    //创建内容列表
    creatContentList(cellDataList) {
        //设置玩家数据
        for (let i = 0; i < cellDataList.length; i++) {
            if (cellDataList[i].playerId == Gameplay.getCurrentPlayer().getPlayerID()) {
                this.showSelfData(i, cellDataList[i]);
            }
            if (i < this.showPlayerNum) { //小于最大显示数量
                if (i >= this.itemList.length) {
                    let item = this.itemPool.spawn();
                    this.itemList.push(item);
                    item.addToCanvas(this.view.mContent, cellDataList[i].playerId, i, this.itemSpacing, (textList) => {
                        this.layoutFieldTxt(textList);
                    });
                }
                this.showPlayerData(i, cellDataList[i]);
            }
        }
        //删除多余的条目
        while (this.itemList.length > cellDataList.length) {
            let item = this.itemList.pop();
            item.removeFromCanvas();
            this.itemPool.despawn(item);
        }
    }
    /**
     * 显示一条玩家数据
     * @param rankIndex 名次索引(0开始)
     * @param playerData 玩家数据
     */
    showPlayerData(rankIndex, playerData) {
        let item = this.itemList[rankIndex];
        if (this.isShowRank) {
            item.setContent(rankIndex, 0, null, rankIndex, this.rankValueStyle(rankIndex));
        }
        for (let i = 0; i < this.fieldIdList.length; i++) {
            let fieldId = this.fieldIdList[i];
            let fieldValue = playerData.data[fieldId];
            let valueCon = this.getValueContent(fieldId, fieldValue);
            item.setContent(rankIndex, i + (this.isShowRank ? 1 : 0), fieldId, fieldValue, valueCon);
        }
    }
    /**
     * 显示自己的数据
     * @param rankIndex 名次索引(0开始)
     * @param playerData 玩家数据
     */
    showSelfData(rankIndex, playerData) {
        if (this.mSelfFieldTxtList == null || this.mSelfFieldTxtList.length == 0)
            return;
        //let selfName: string = this.lan_self != null ? this.lan_self : playerData.playerName;
        if (this.isShowRank) {
            let filedText = null;
            if (rankIndex < this.showPlayerNum) { //上榜了
                filedText = this.rankValueStyle(rankIndex);
            }
            else { //未上榜
                filedText = this.lan_notInList != null ? this.lan_notInList : this.rankValueStyle(rankIndex);
            }
            this.setSelfFieldContent(rankIndex, 0, null, rankIndex, filedText);
        }
        for (let i = 0; i < this.fieldIdList.length; i++) {
            let fieldId = this.fieldIdList[i];
            let fieldValue = playerData.data[fieldId];
            let filedText = this.getValueContent(fieldId, fieldValue);
            this.setSelfFieldContent(rankIndex, i + (this.isShowRank ? 1 : 0), fieldId, fieldValue, filedText);
        }
    }
    //设置一个字段名
    setFieldName(textIndex, fieldName) {
        if (this.mFieldNameTxtList.length <= textIndex)
            return;
        this.mFieldNameTxtList[textIndex].text = fieldName;
    }
    //设置自己的一个字段内容
    setSelfFieldContent(rankIndex, textIndex, fieldId, fieldValue, fieldText) {
        if (this.mSelfFieldTxtList.length <= textIndex)
            return;
        this.mSelfFieldTxtList[textIndex].text = fieldText;
        this.onSelfFieldSet(rankIndex, fieldId, fieldValue, textIndex, this.mSelfFieldTxtList[textIndex]);
    }
    /**
     * 获取一个字段的显示内容，如:30分
     * @param fieldId 字段id
     * @param fieldValue 字段的值
     * @returns 处理后的内容
     */
    getValueContent(fieldId, fieldValue) {
        if (fieldValue == null)
            fieldValue = 0;
        if (this.fieldValueFormatMap == null || !this.fieldValueFormatMap.has(fieldId)) {
            return fieldValue.toString();
        }
        return Util.StringUtil.format(this.fieldValueFormatMap.get(fieldId), fieldValue);
    }
    /**
     * 设置自己的字段内容后调用，需要请复写
     * @param rankIndex 名次索引(0开始)
     * @param fieldId 字段索引 (如果是排行字段，此参数为mull)
     * @param fieldValue 字段显示内容
     * @param textBlockIndex 文本控件索引
     * @param textBlock 文本控件
     */
    onSelfFieldSet(rankIndex, fieldId, fieldValue, textBlockIndex, textBlock) {
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

//排行榜-客户端
class LeaderboardModuleBaseC extends ModuleC {
    playerDataMap = new Map();
    playerDataList = [];
    dataIsChange = false; //数据是否有更新
    refreshPanelTime = 0; //上一次刷新UI的时间
    refreshPanelTimeInterval = 1; //刷新的间隔时间(秒)
    refreshPanelCallback; //刷新的方法
    refreshId = null;
    /**
     * 开始刷新界面
     * @param refreshCallback 刷新的回调方法，可以在这个方法里刷新UI
     * @param timeInterval 刷新的间隔时间(单位:秒)，这个时间越小，S端有变化时前端刷新越及时，但更消耗性能，建议使用默认值1秒
     */
    startRefreshPanel(refreshCallback, timeInterval = 1) {
        this.refreshPanelCallback = refreshCallback;
        this.refreshPanelTimeInterval = timeInterval;
        this.immediatelyRefresh(); //先空刷一次界面，刷掉所有多余的东西
        if (this.refreshId == null) {
            this.refreshId = setInterval(() => {
                this.refresh();
            }, 100);
        }
        this.initDataList();
    }
    /**
     * 停止刷新界面
     */
    stopRefreshPanel() {
        if (this.refreshId == null)
            return;
        clearInterval(this.refreshId);
        this.refreshId = null;
        this.refreshPanelCallback = null;
        this.server.net_stopRefresh();
    }
    //初始化排行榜数据序列（向服务器要所有排行榜的数据，然后保存在本地）
    async initDataList() {
        let playerDataMap = await this.server.net_startRefresh();
        if (playerDataMap == null)
            return;
        this.playerDataMap = playerDataMap;
        this.playerDataList.length = 0;
        this.playerDataMap.forEach((itemData) => {
            this.playerDataList.push(itemData);
        });
        this.immediatelyRefresh(); //拿到初始化数据立刻刷新
    }
    //刷新UI
    refresh() {
        if (!this.dataIsChange || Util.TimeUtil.elapsedTime() <= this.refreshPanelTime + this.refreshPanelTimeInterval) {
            return;
        }
        this.dataIsChange = false;
        this.refreshPanelTime = Util.TimeUtil.elapsedTime();
        this.refreshPanelCallback(this.playerDataList);
    }
    //立即刷新UI
    immediatelyRefresh() {
        this.dataIsChange = true;
        this.refreshPanelTime = 0;
        this.refresh();
    }
    /**
     * @internal
     * net-增加一个玩家
     * @param playerData 玩家的数据
     */
    net_addPlayer(playerData) {
        this.playerDataMap.set(playerData.playerId, playerData);
        this.playerDataList.push(playerData);
        this.dataIsChange = true;
    }
    /**
     * @internal
     * net-移除一个玩家
     * @param playerId 玩家id
     */
    net_removePlayer(playerId) {
        this.dataIsChange = this.playerDataMap.delete(playerId);
        for (let i = 0; i < this.playerDataList.length; i++) {
            if (this.playerDataList[i].playerId == playerId) {
                this.playerDataList.splice(i, 1);
                break;
            }
        }
    }
    /**
     * @internal
     * net-清除排行榜
     */
    net_clear() {
        if (this.playerDataMap != null && this.playerDataMap.size > 0) {
            this.playerDataMap.clear();
            this.playerDataList.length = 0;
            this.dataIsChange = true;
        }
    }
    /**
     * @internal
     * net-玩家数据发生变化
     * @param playerId 玩家id
     * @param fieldId 字段id
     * @param fieldValue 字段value
     */
    net_setPlayerValue(playerId, fieldId, fieldValue) {
        if (this.playerDataMap.has(playerId)) {
            this.playerDataMap.get(playerId).data[fieldId] = fieldValue;
            this.dataIsChange = true;
        }
    }
}
//排行榜-服务端
class LeaderboardModuleBaseS extends ModuleS {
    refreshClientArr = null;
    playerDataMap = new Map(); //<playerId, playerData>
    /**
     * 向排行榜添加一个玩家
     * @param player 玩家对象|玩家id
     * @param data 玩家数据
     * @returns 是否成功
     */
    addPlayer(player, data) {
        let playerId = (player instanceof Gameplay.Player) ? player.getPlayerID() : player;
        if (this.playerDataMap.has(playerId))
            return false;
        let leaderboardData = { playerId: playerId, data: data };
        this.playerDataMap.set(playerId, leaderboardData);
        this.refreshClientArr?.forEach((clientPlayerId) => {
            this.getClient(clientPlayerId).net_addPlayer(leaderboardData);
        });
        return true;
    }
    /**
     * 从排行榜移除一个玩家
     * @param player 玩家对象|玩家id
     * @returns 是否成功
     */
    removePlayer(player) {
        let playerId = (player instanceof Gameplay.Player) ? player.getPlayerID() : player;
        if (!this.playerDataMap.has(playerId))
            return false;
        this.playerDataMap.delete(playerId);
        this.refreshClientArr?.forEach((clientPlayerId) => {
            this.getClient(clientPlayerId).net_removePlayer(playerId);
        });
        return true;
    }
    /**
     * 设置玩家的一个字段值
     * @param player 玩家对象|玩家id
     * @param fieldId 字段ID
     * @param value 字段的值
     */
    setPlayerValue(player, fieldId, value) {
        let playerId = (player instanceof Gameplay.Player) ? player.getPlayerID() : player;
        if (!this.playerDataMap.has(playerId))
            return;
        let data = this.playerDataMap.get(playerId).data;
        if (data[fieldId] == value)
            return;
        data[fieldId] = value;
        this.refreshClientArr?.forEach((clientPlayerId) => {
            this.getClient(clientPlayerId).net_setPlayerValue(playerId, fieldId, value);
        });
    }
    /**
     * 清除排行榜
     */
    clear() {
        if (this.playerDataMap.size == 0)
            return;
        this.playerDataMap.clear();
        this.refreshClientArr?.forEach((clientPlayerId) => {
            this.getClient(clientPlayerId).net_clear();
        });
    }
    /**
     * @internal
     * net_客户端开始刷新-获取排行榜列表，只有服务器收到客户端这个消息，服务器才会给这个客户端进行实时刷新
     * @returns 当前榜上玩家的数据字典
     */
    net_startRefresh() {
        if (this.refreshClientArr == null) {
            this.refreshClientArr = [];
            DataCenterS.getInstance().onPlayerLeft.add((player) => {
                this.removeRefreshPlayer(player.getPlayerID());
            });
        }
        if (!this.refreshClientArr.includes(this.currentPlayerId)) {
            this.refreshClientArr.push(this.currentPlayerId);
        }
        return this.playerDataMap;
    }
    /**
     * @internal
     * net_客户端停止刷新
     */
    net_stopRefresh() {
        this.removeRefreshPlayer(this.currentPlayerId);
    }
    //停止某个玩家的实时刷新行为
    removeRefreshPlayer(playerId) {
        if (this.refreshClientArr == null)
            return;
        let index = this.refreshClientArr.indexOf(playerId);
        if (index != -1) {
            this.refreshClientArr.splice(index, 1);
        }
    }
}

var Leaderboard_1;
//================从UI自动生成的地方复制过来的===================
let LeaderboardItem_Generate = class LeaderboardItem_Generate extends UI.UIBehavior {
    mContent = undefined;
};
__decorate([
    UI.UIMarkPath('Canvas/mCon')
], LeaderboardItem_Generate.prototype, "mContent", void 0);
LeaderboardItem_Generate = __decorate([
    UI.UICallOnly('UI/leaderboardModule/LeaderboardItem.ui')
], LeaderboardItem_Generate);
let LeaderboardPanel_Generate = class LeaderboardPanel_Generate extends UI.UIBehavior {
    mTitle_txt = undefined;
    mFieldName = undefined;
    mContent = undefined;
    mSelfList = undefined;
    mClose_btn = undefined;
};
__decorate([
    UI.UIMarkPath('Canvas/MainView/mTitle_txt')
], LeaderboardPanel_Generate.prototype, "mTitle_txt", void 0);
__decorate([
    UI.UIMarkPath('Canvas/MainView/mFieldName')
], LeaderboardPanel_Generate.prototype, "mFieldName", void 0);
__decorate([
    UI.UIMarkPath('Canvas/MainView/ScrollView/mContent')
], LeaderboardPanel_Generate.prototype, "mContent", void 0);
__decorate([
    UI.UIMarkPath('Canvas/MainView/mSelfList')
], LeaderboardPanel_Generate.prototype, "mSelfList", void 0);
__decorate([
    UI.UIMarkPath('Canvas/MainView/mClose_btn')
], LeaderboardPanel_Generate.prototype, "mClose_btn", void 0);
LeaderboardPanel_Generate = __decorate([
    UI.UICallOnly('UI/leaderboardModule/LeaderboardPanel.ui')
], LeaderboardPanel_Generate);
//=============================UI==============================
//一条数据UI
class LeaderboardDefItem extends LeaderboardBaseItem {
    constructor() {
        super(LeaderboardItem_Generate);
    }
}
//主面板UI
class LeaderboardDefPanel extends LeaderboardBasePanel {
    constructor() {
        super(LeaderboardPanel_Generate);
    }
    creatItem() {
        return LeaderboardDefItem.create();
    }
}
//============================Module==========================
//UI显示风格，这个是数据类，可以用rpc传
class PanelStyle {
    fieldIdList; //字段id数组
    fieldNameMap; //<fieldId, fidldName>
    fieldValueStyleMap; //<fieldId, fieldValueStyle>
    showRankParams;
    styleParams;
    sortFieldsParams;
}
//默认模块-客户端
class LeaderboardDefaultModuleC extends LeaderboardModuleBaseC {
    onPanelHide;
    _panelStyle;
    _panel;
    panelIsShow = false;
    panelIsInit = false; //panel是否初始化过
    //获取UI
    get panel() {
        if (this._panel == null) {
            this._panel = LeaderboardDefPanel.create();
            this._panel.onClose.add(() => {
                this.stopRefreshPanel();
                if (this.onPanelHide != null) {
                    this.onPanelHide();
                    this.onPanelHide = null;
                }
            });
        }
        return this._panel;
    }
    /**
     * 设置界面的显示风格
     * @param serverStyle 服务器传下来的的界面风格数据
     */
    async showPanel(onPanelHide) {
        this.onPanelHide = onPanelHide;
        this.panelIsShow = true;
        if (!this.panelIsInit) {
            let serverPanelStyle = await this.server.net_getPanelStyle();
            if (this.setPanelStyle(serverPanelStyle)) {
                this.panelIsInit = true;
            }
        }
        if (!this.panelIsInit || !this.panelIsShow)
            return;
        this.startRefreshPanel((dataList) => {
            this.panel.show(dataList);
        });
    }
    hidePanel() {
        this.panelIsShow = false;
        this._panel?.hide();
    }
    get server() {
        return super.server;
    }
    getPanelStyle() {
        if (this._panelStyle == null)
            this._panelStyle = new PanelStyle();
        return this._panelStyle;
    }
    setPanelStyle(serverStyle) {
        let clientStyle = this._panelStyle;
        if (clientStyle == null && serverStyle == null)
            return false;
        //合并前后端的Style
        let style = new PanelStyle(); //创建一个新的Style,前后端的style都合并到这个上面
        style.fieldIdList = [];
        style.fieldNameMap = new Map();
        style.fieldValueStyleMap = new Map();
        if (serverStyle != null) {
            style.fieldIdList.push(...serverStyle.fieldIdList);
            serverStyle.fieldNameMap?.forEach((fieldName, fieldId) => {
                style.fieldNameMap.set(fieldId, fieldName);
            });
            serverStyle.fieldValueStyleMap?.forEach((valueStyle, fieldId) => {
                style.fieldValueStyleMap.set(fieldId, valueStyle);
            });
            style.showRankParams = serverStyle.showRankParams;
            style.styleParams = serverStyle.styleParams;
            style.sortFieldsParams = serverStyle.sortFieldsParams;
        }
        if (clientStyle != null) {
            style.fieldIdList.push(...clientStyle.fieldIdList);
            clientStyle.fieldNameMap?.forEach((fieldName, fieldId) => {
                style.fieldNameMap.set(fieldId, fieldName);
            });
            clientStyle.fieldValueStyleMap?.forEach((valueStyle, fieldId) => {
                style.fieldValueStyleMap.set(fieldId, valueStyle);
            });
            if (style.showRankParams == null)
                style.showRankParams = clientStyle.showRankParams;
            if (style.styleParams == null)
                style.styleParams = clientStyle.styleParams;
            if (style.sortFieldsParams == null)
                style.sortFieldsParams = clientStyle.sortFieldsParams;
        }
        //设置Style给Panel
        for (let i = 0; i < style.fieldIdList.length; i++) {
            let fieldId = style.fieldIdList[i];
            let fieldName = style.fieldNameMap.get(fieldId);
            let valueStyle = style.fieldValueStyleMap.get(fieldId);
            this.panel.addField(fieldId, fieldName, valueStyle);
        }
        if (style.showRankParams != null) {
            let params = style.showRankParams;
            this.panel.showRankField(params.fieldName, params.valueStyle, params.notListed);
        }
        if (style.styleParams != null) {
            let params = style.styleParams;
            this.panel.setStyle(params.title, params.fieldsAutoLayout, params.showPlayerNum, params.itemSpacing);
        }
        if (style.sortFieldsParams != null) {
            this.panel.setSortFields(...style.sortFieldsParams);
        }
        return true;
    }
}
//默认模块-服务端
class LeaderboardDefaultModuleS extends LeaderboardModuleBaseS {
    _panelStyle;
    getPanelStyle() {
        if (this._panelStyle == null)
            this._panelStyle = new PanelStyle();
        return this._panelStyle;
    }
    net_getPanelStyle() {
        return this._panelStyle;
    }
    //@Decorator.noReply
    net_addPlayer(playerId, data = {}) {
        this.addPlayer(playerId, data);
    }
    //@Decorator.noReply
    net_removePlayer(playerId) {
        this.removePlayer(playerId);
    }
    //@Decorator.noReply
    net_setPlayerValue(playerId, fieldId, value) {
        this.setPlayerValue(playerId, fieldId, value);
    }
    //@Decorator.noReply
    net_clear() {
        this.clear();
    }
}
/**默认排行榜 */
exports.Leaderboard = Leaderboard_1 = class Leaderboard {
    static _instance;
    static get instance() {
        if (Leaderboard_1._instance == null) {
            Leaderboard_1._instance = new Leaderboard_1();
        }
        return Leaderboard_1._instance;
    }
    constructor() {
        ModuleManager.getInstance()["addModule"](LeaderboardDefaultModuleS, LeaderboardDefaultModuleC);
        if (SystemUtil.isClient()) {
            Events.dispatchToServer("RegisterModule_Leaderboard");
        }
    }
    static RegisterListener;
    static init() {
        if (SystemUtil.isServer()) {
            this.RegisterListener = Events.addClientListener("RegisterModule_Leaderboard", () => {
                this.RegisterListener.disconnect();
                Leaderboard_1.instance;
            });
        }
    }
    //UI风格
    get panelStyle() {
        if (Util.SystemUtil.isClient())
            return ModuleManager.getInstance().getModule(LeaderboardDefaultModuleC).getPanelStyle();
        return ModuleManager.getInstance().getModule(LeaderboardDefaultModuleS).getPanelStyle();
    }
    /**
     * 添加一个字段
     * @param fieldName 字段名(title上显示的内容)
     * @param valueStyle 值的表达方式 (例：{0}分)
     */
    addField(fieldId, fieldName, valueStyle) {
        if (this.panelStyle.fieldIdList == null)
            this.panelStyle.fieldIdList = [];
        if (this.panelStyle.fieldIdList.includes(fieldId))
            return this; //重复的字段id
        this.panelStyle.fieldIdList.push(fieldId);
        if (this.panelStyle.fieldNameMap == null)
            this.panelStyle.fieldNameMap = new Map();
        this.panelStyle.fieldNameMap.set(fieldId, fieldName);
        if (this.panelStyle.fieldValueStyleMap == null)
            this.panelStyle.fieldValueStyleMap = new Map();
        this.panelStyle.fieldValueStyleMap.set(fieldId, valueStyle);
        return this;
    }
    /**
     * 显示排名
     * @param fieldName 字段名
     * @param valueStyle 字段值样式
     * @param notListed 未上榜(如果未上榜也显示名次请填写null)
     */
    showRankField(fieldName, valueStyle, notListed) {
        this.panelStyle.showRankParams = { fieldName: fieldName, valueStyle: valueStyle, notListed: notListed };
        return this;
    }
    /**
     * 设置样式
     * @param title 界面标题
     * @param fieldsAutoLayout 字段是否自动布局，均匀分布
     * @param showPlayerNum 最多显示的玩家数量
     * @param itemSpacing 每条数据的间距
     */
    setStyle(title, fieldsAutoLayout, showPlayerNum, itemSpacing) {
        this.panelStyle.styleParams = { title: title, fieldsAutoLayout: fieldsAutoLayout, showPlayerNum: showPlayerNum, itemSpacing: itemSpacing };
        return this;
    }
    /**
     * 设置排序字段，可以设置多字段排序，只支持从大到小排序
     * @param fields 排序字段
     */
    setSortFields(...fields) {
        this.panelStyle.sortFieldsParams = fields;
        return this;
    }
    /**
     * 设置排序的方法（只能Client端调用）
     * @param fn 方法
     */
    setSortMethod(fn) {
        if (Util.SystemUtil.isClient())
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleC).panel.setSortMethod(fn);
        return this;
    }
    /**
     * 显示UI（只能Client端调用）
     * @param hideCallback Panel关闭的回调
     */
    showPanel(hideCallback = null) {
        if (Util.SystemUtil.isClient())
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleC).showPanel(hideCallback);
    }
    /**
     * 隐藏UI（只能Client端调用）
     */
    hidePanel() {
        if (Util.SystemUtil.isClient())
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleC).hidePanel();
    }
    //S端
    /**
     * 向排行榜添加一个玩家
     * @param player 玩家对象|玩家id
     * @param data 玩家数据
     */
    addPlayer(player, data = {}) {
        let playerId = player instanceof Gameplay.Player ? player.getPlayerID() : player;
        if (Util.SystemUtil.isServer()) {
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleS).addPlayer(player, data);
        }
        else {
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleC).server.net_addPlayer(playerId, data);
        }
    }
    /**
     * 从排行榜移除一个玩家
     * @param player 玩家对象|玩家id
     * @returns
     */
    removePlayer(player) {
        if (Util.SystemUtil.isServer()) {
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleS).removePlayer(player);
        }
        else {
            let playerId = player instanceof Gameplay.Player ? player.getPlayerID() : player;
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleC).server.net_removePlayer(playerId);
        }
    }
    /**
     * 设置一个玩家的一个字段值
     * @param player 玩家对象|玩家id
     * @param fieldId 字段的ID
     * @param value 字段的值
     */
    setPlayerValue(player, fieldId, value) {
        if (Util.SystemUtil.isServer()) {
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleS).setPlayerValue(player, fieldId, value);
        }
        else {
            let playerId = player instanceof Gameplay.Player ? player.getPlayerID() : player;
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleC).server.net_setPlayerValue(playerId, fieldId, value);
        }
    }
    /**
     * 清除排行榜
     */
    clear() {
        if (Util.SystemUtil.isServer()) {
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleS).clear();
        }
        else {
            ModuleManager.getInstance().getModule(LeaderboardDefaultModuleC).server.net_clear();
        }
    }
};
exports.Leaderboard = Leaderboard_1 = __decorate([
    Decorator.autoExecute("init")
    // @internal
], exports.Leaderboard);

exports.LeaderboardBaseItem = LeaderboardBaseItem;
exports.LeaderboardBasePanel = LeaderboardBasePanel;
exports.LeaderboardModuleBaseC = LeaderboardModuleBaseC;
exports.LeaderboardModuleBaseS = LeaderboardModuleBaseS;
//# sourceMappingURL=index.js.map
