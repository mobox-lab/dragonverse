declare module "mw-lynx-ui" {
    export namespace Lui.Asset {
        const ImgCircle = "163437";
        const ImgRectangle = "114028";
        const ImgRoundedRectangle = "163428";
        const ImgRoundedRectangleBoxMargin: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        const ImgHalfRoundRectangle = "163390";
        const ImgHalfRoundedRectangleBoxMargin: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        const ImgRoundedRectangleOutline = "163430";
        const ImgCross = "95810";
        enum Interval {
            VeryFast = 0.1,
            Fast = 0.25,
            Normal = 0.5,
            Slow = 1
        }
        enum Color {
            White = "#FFFFFF",
            Black = "#000000",
            Gray50 = "#fafafa",
            Gray100 = "#f5f5f5",
            Gray200 = "#eeeeee",
            Gray300 = "#e0e0e0",
            Gray400 = "#bdbdbd",
            Gray500 = "#9e9e9e",
            Gray600 = "#757575",
            Gray700 = "#616161",
            Gray800 = "#424242",
            Gray900 = "#212121",
            Blue200 = "#90caf9",
            Blue = "#2196f3",
            Blue800 = "#1565c0",
            Red200 = "#ef9a9a",
            Red = "#f44336",
            Red800 = "#c62828",
            Green200 = "#a5d6a7",
            Green = "#4caf50",
            Green800 = "#2e7d32",
            Yellow200 = "#fff59d",
            Yellow = "#ffeb3b",
            Yellow800 = "#f9a825"
        }
        class ThemeColor {
            /**
             * 主色.
             */
            primary: string;
            /**
             * 副色.
             */
            secondary: string;
        }
        const NormalThemeColor: ThemeColor;
        namespace ColorUtil {
            interface RGB {
                r: number;
                g: number;
                b: number;
                a?: number;
            }
            interface HSV {
                h: number;
                s: number;
                v: number;
            }
            function colorHexWithAlpha(color: string, alpha: number): string;
            function lerp(r: number, g: number, b: number, rd: number, gd: number, bd: number, t: number, out?: RGB): RGB;
            function lerpByHsv(r: number, g: number, b: number, rd: number, gd: number, bd: number, t: number, outer?: RGB): RGB;
            function lerpHsv(h: number, s: number, v: number, hd: number, sd: number, vd: number, t: number, out?: HSV): HSV;
            function rgbToHsv(r: number, g: number, b: number, out?: HSV): HSV;
            function hsvToRgb(h: number, s: number, v: number, out?: RGB): RGB;
            function hexToRgb(hex: string, out?: RGB): RGB;
            function rgbToHex(r: number, g: number, b: number): string;
            function hexToHsv(hex: string, out?: HSV): HSV;
            function hsvToHex(h: number, s: number, v: number): string;
            /**
             * 是否 是鲜艳色.
             * @param {number} r
             * @param {number} g
             * @param {number} b
             * @return {boolean}
             */
            function isBrightness(r: number, g: number, b: number): boolean;
            /**
             * 转换为深色主题颜色.
             * @param {ThemeColor} color
             * @return {ThemeColor}
             */
            function toDarkThemeColor(color: ThemeColor): ThemeColor;
            /**
             * 降低亮度.
             * @param {number} h
             * @param {number} s
             * @param {number} v
             * @return {{h: number, s: number, v: number}}
             */
            function toDarker(h: number, s: number, v: number): HSV;
            /**
             * 提高亮度.
             * @param {number} h
             * @param {number} s
             * @param {number} v
             * @return {{h: number, s: number, v: number}}
             */
            function toBrighter(h: number, s: number, v: number): HSV;
        }
    }
}

declare module "mw-lynx-ui" {
    export namespace Property {
        type Padding = {
            top?: number;
            right?: number;
            bottom?: number;
            left?: number;
        };
        type FontSize = number | "auto";
        type FontStyle = mw.UIFontGlyph;
        type InputType = mw.InputTextLimit;
        type DataValidators<P> = (DataValidator<P> | DataValidatorWithReason<P>)[];
        type DataValidateResult = {
            result: boolean;
            reason?: string;
        };
        type TextAlign = "left" | "center" | "right";
        type EffectLevel = "low" | "medium" | "high";
        enum Corner {
            None = 0,
            TopLeft = 1,
            TopRight = 2,
            BottomLeft = 4,
            BottomRight = 8,
            Top = 3,
            Left = 5,
            Right = 10,
            Bottom = 12,
            All = 15
        }
    }
    export namespace PropertyUtil {
        import DataValidateResult = Property.DataValidateResult;
        function applyFontSize(fontSizeAble: {
            fontSize: number;
            autoAdjust: boolean;
        }, fontSize: Property.FontSize): void;
        function applyTextAlign(textAlignAble: {
            textAlign: mw.TextJustify;
        }, textAlign: Property.TextAlign): void;
        function getMaskPrecisionByEffectLevel(effectLevel: Property.EffectLevel): number;
        function hasCorner(corner: Property.Corner, target: Property.Corner): boolean;
        function validate<P>(validators: Property.DataValidators<P>, param: P): DataValidateResult;
    }
    /**
     * 󰌆数据验证器.
     */
    export type DataValidator<P> = (param: P) => boolean;
    /**
     * 归因 󰌆数据验证器.
     */
    export interface DataValidatorWithReason<P> {
        /**
         * 󰌆数据验证器.
         */
        validator: DataValidator<P>;
        /**
         * 原因.
         */
        reason: string;
    }
}

declare module "mw-lynx-ui" {
    import { Delegate } from "gtoolkit";
    export abstract class Component {
        protected static create(): Component;
        protected static defaultOption(): unknown;
        private _root;
        protected initRoot(_root?: mw.Canvas): void;
        get root(): mw.Canvas;
        setLayout(option: ComponentOption): this;
        protected destroy(): void;
        attach(canvas: mw.Canvas | Component): this;
        detach(): void;
        private renderAnim;
        protected renderAnimHandler: (dt: number) => void;
        onAttach: Delegate.SimpleDelegate<void>;
        onDetach: Delegate.SimpleDelegate<void>;
    }
    export interface ComponentOption {
        size?: {
            x: number;
            y: number;
        };
        padding?: Property.Padding;
        zOrder?: number;
    }
    /**
     * Extract layout from option.
     * @param {ComponentOption} option
     * @returns {[
     * [number, number],
     * [number, number, number, number],
     * [number, number]
     * ]}
     *      [x,y]
     *      [pt, pr, pb, pl]
     *      [x - pl - pr, y - pt - pb]
     */
    export function extractLayoutFromOption(option: ComponentOption): [
        [
            number,
            number
        ],
        [
            number,
            number,
            number,
            number
        ],
        [
            number,
            number
        ]
    ];
    /**
     * Override layout option.
     * @param {ComponentOption} self
     * @param {ComponentOption} from
     * @returns {ComponentOption}
     */
    export function overrideOption(self: ComponentOption, from: ComponentOption): ComponentOption;
}

declare module "mw-lynx-ui" {
    export interface ClickEvent {
        position: {
            x: number;
            y: number;
        };
    }
}

declare module "mw-lynx-ui" {
    export interface InputCommitEvent {
        text: string;
        commitMethod: mw.TextCommit;
        validate?: Property.DataValidateResult;
    }
    export interface InputChangeEvent {
        text: string;
    }
}

declare module "mw-lynx-ui" {
    export interface KeyEvent {
        type: "down" | "up" | "press";
        key: mw.Keys;
    }
    export function fromKeyString(key: string): mw.Keys;
}

declare module "mw-lynx-ui" {
    import { Delegate } from "gtoolkit";
    import ThemeColor = Lui.Asset.ThemeColor;
    /**
     * Button.
     *
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export class Button extends Component {
        private _btn;
        private _box;
        private _cnvClickAnim;
        private _imgClickAnim;
        private _txtLabel;
        private _icon?;
        private _imgIcon?;
        private _imgHighlight;
        private _option;
        private _hovered;
        private _pressed;
        get enable(): boolean;
        set enable(value: boolean);
        static create(option?: ButtonOption): Button;
        static defaultOption(option?: ButtonOption): Required<ButtonOption>;
        protected renderAnimHandler: (dt: number) => void;
        setLayout(option: ButtonOption): this;
        preview(): this;
        private setColor;
        private playClickAnimAt;
        onClick: Delegate.SimpleDelegate<ClickEvent>;
        onPress: Delegate.SimpleDelegate<ClickEvent>;
        onRelease: Delegate.SimpleDelegate<ClickEvent>;
    }
    export type ButtonVariant = "contained" | "outlined";
    export interface ButtonOption extends ComponentOption {
        label?: string;
        color?: ThemeColor;
        fontSize?: Property.FontSize;
        fontStyle?: Property.FontStyle;
        textAlign?: Property.TextAlign;
        icon?: string;
        renderIcon?: Component;
        variant?: ButtonVariant;
        corner?: Property.Corner;
    }
}

declare module "mw-lynx-ui" {
    import ThemeColor = Lui.Asset.ThemeColor;
    /**
     * Box.
     *
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export class Box extends Component {
        private _imgMain;
        private _imgTopLeft;
        private _imgTopRight;
        private _imgBottomLeft;
        private _imgBottomRight;
        private _option;
        static create(option?: BoxOption): Box;
        static defaultOption(option?: BoxOption): Required<BoxOption>;
        setLayout(option: BoxOption): this;
        private setColor;
    }
    export interface BoxOption extends ComponentOption {
        color?: ThemeColor;
        corner?: Property.Corner;
    }
}

declare module "mw-lynx-ui" {
    import { Delegate } from "gtoolkit";
    import ThemeColor = Lui.Asset.ThemeColor;
    /**
     * TextField.
     *
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export class TextField extends Component {
        static readonly TextFieldHighlightLineWeight = 2;
        static readonly TextFieldFocusEventName = "__LUI_TEXT_FIELD_FOCUS__";
        static readonly TextFieldBlurEventName = "__LUI_TEXT_FIELD_BLUR__";
        private _option;
        private _box;
        private _imgHighlight;
        private _txtInput;
        private _txtLabel;
        private _imgLine;
        private _imgHighlightLine;
        private _hovered;
        private _focused;
        private _labelFloatElapsed;
        private _labelStartRgb;
        private _labelEndRgb;
        private _validated;
        get text(): string;
        get validated(): Property.DataValidateResult;
        static create(option?: InputFieldOption): TextField;
        static defaultOption(option?: InputFieldOption): Required<InputFieldOption>;
        protected renderAnimHandler: (dt: number) => void;
        setLayout(option: ComponentOption): this;
        private setColor;
        setContent(text: string): void;
        setValidator(validator: Property.DataValidators<string>): void;
        onCommit: Delegate.SimpleDelegate<InputCommitEvent>;
        onChange: Delegate.SimpleDelegate<InputChangeEvent>;
        onFocus: Delegate.SimpleDelegate;
        onKeyUp: Delegate.SimpleDelegate<KeyEvent>;
        private validate;
    }
    export type InputFieldVariant = "outlined" | "filled" | "standard";
    export interface InputFieldOption extends ComponentOption {
        label?: string;
        color?: ThemeColor;
        fontSize?: number;
        fontStyle?: Property.FontStyle;
        type?: Property.InputType;
        validator?: Property.DataValidators<string>;
        variant?: InputFieldVariant;
        corner?: Property.Corner;
    }
}

declare module "mw-lynx-ui" {
    export interface ChooseItemEvent<T = {
        label: string;
    }> {
        item: T;
    }
}

declare module "mw-lynx-ui" {
    import { Delegate } from "gtoolkit";
    import { FuseOptionKey, FuseSortFunctionArg } from "fuse.js";
    import SimpleDelegate = Delegate.SimpleDelegate;
    import ThemeColor = Lui.Asset.ThemeColor;
    export interface AutoCompleteItem {
        label: string;
        group?: string;
    }
    /**
     * AutoComplete.
     *
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export class AutoComplete<IT extends AutoCompleteItem> extends Component {
        static readonly originIndex: unique symbol;
        private _input;
        private _btnClear;
        private _scrContainer;
        private _cnvContainer;
        private _option;
        private _contentItems;
        private _contentItemsIndexer;
        private _fuse;
        private _standForIndex;
        private _standForIndexInView;
        private _hideScrTimer;
        private _currentInput;
        private _currentChoose;
        get label(): string;
        get choose(): IT;
        set choose(val: IT);
        static create<IT extends AutoCompleteItem>(option?: AutoCompleteOption<IT>): AutoComplete<IT>;
        static defaultOption<T extends AutoCompleteItem>(option?: AutoCompleteOption<T>): Required<AutoCompleteOption<T>>;
        /**
         * 重载列表.
         * @param items
         */
        reloadItems(items?: IT[]): this;
        setLayout(option: AutoCompleteOption<IT>): this;
        private setColor;
        private setItems;
        private filterItems;
        private resetItem;
        private clearScrHideTimer;
        private refreshScrHideTimer;
        private standForByViewIndex;
        private standForByIndex;
        private chooseByIndex;
        private showScr;
        private hideScr;
        private listenToUp;
        private listenToDown;
        private checkScrContain;
        onClick: SimpleDelegate<ClickEvent>;
        onChoose: SimpleDelegate<ChooseItemEvent<IT>>;
        onClear: SimpleDelegate;
    }
    export interface AutoCompleteOption<IT extends AutoCompleteItem> extends ComponentOption {
        label?: string;
        items?: IT[];
        color?: ThemeColor;
        itemHeight?: number;
        maxCount?: number;
        fontSize?: number;
        fontStyle?: Property.FontStyle;
        renderOption?: (item: IT) => mw.Widget;
        additionKey?: FuseOptionKey<IT>[];
        fuseSortFunction?: (a: FuseSortFunctionArg, b: FuseSortFunctionArg) => number;
        variant?: InputFieldVariant;
        corner?: Property.Corner;
    }
}

declare module "mw-lynx-ui" {
    import { Delegate } from "gtoolkit";
    import SimpleDelegate = Delegate.SimpleDelegate;
    import ThemeColor = Lui.Asset.ThemeColor;
    /**
     * Avatar.
     *
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export class Avatar extends Component {
        private _circleMasks;
        private get realRoot();
        private _imgBgIcon;
        private _btnIcon;
        private _cnvClickAnim;
        private _imgClickAnim;
        private _imgHighlight;
        private _txtLabel;
        private _option;
        private _hovered;
        static create(option?: AvatarOption): Avatar;
        static defaultOption(option?: AvatarOption): Required<AvatarOption>;
        protected renderAnimHandler: (dt: number) => void;
        setLayout(option: AvatarOption): this;
        private setColor;
        private setAvatarLabel;
        private playClickAnimAt;
        preview(): this;
        onClick: SimpleDelegate<ClickEvent>;
    }
    export type AvatarVariant = "square" | "circle";
    export interface AvatarOption extends ComponentOption {
        /**
         * 标签 文本.
         * @desc 与 labelIcon 互斥.
         * @desc labelIcon 优先生效.
         */
        labelText?: string;
        /**
         * 标签 图标.
         * @desc 与 labelText 互斥.
         * @desc labelIcon 优先生效.
         */
        labelIcon?: string;
        color?: ThemeColor;
        fontSize?: Property.FontSize;
        fontStyle?: Property.FontStyle;
        variant?: AvatarVariant;
        /**
         * 遮罩精度.
         * @desc 过高将带来性能问题.
         * @desc 过低将影响性能.
         * @desc 默认值为 6.
         */
        effectLevel?: Property.EffectLevel;
    }
}
