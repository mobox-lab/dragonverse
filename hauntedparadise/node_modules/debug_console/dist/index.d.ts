declare module "debug_console" {
    export interface IBinder {
        bind(mwLog: boolean, level: number): void;
        unBind(): void;
    }
}

declare module "debug_console" {
    export class CProxy {
        private binder;
        private players;
        constructor(binder: IBinder);
        private onClientConsole;
        sendConsole(level: number, text: string): void;
        deatachPlayer(player: mw.Player): void;
        attachPlayer(player: mw.Player, level: number): void;
    }
}

declare module "debug_console" {
    export namespace CTemp {
        const V2: mw.Vector2;
        const ConstraintFill: mw.UIConstraintAnchors;
        const ConstraintLeftFill: mw.UIConstraintAnchors;
        let MaxMessageCount: number;
        const Actions: {
            onConsole: mw.Action2<number, any[]>;
            onClose: mw.Action;
        };
    }
}

declare module "debug_console" {
    export class CConsole {
        private originConsole;
        private proxy;
        private isBind;
        private originConsoleFunc;
        private level;
        constructor(originConsole: any);
        bind(mwLog: boolean, level: number): void;
        unBind(): void;
        private ueLog;
        error(...data: any[]): void;
        info(...data: any[]): void;
        log(...data: any[]): void;
        warn(...data: any[]): void;
    }
}

declare module "debug_console" {
    export class RenderLine {
        type: number;
        time: number;
        textBlock: mw.TextBlock;
    }
}

declare module "debug_console" {
    export class UIBehivor extends mw.UIScript {
        private readonly colors;
        private renderLines;
        private contentCanvas;
        private scroller;
        private isPause;
        onStart(): void;
        bindEvents(): void;
        private createText;
        onUpdate(dt: number): void;
        private createButtons;
        private createScroller;
        private createBg;
    }
}

declare module "debug_console" {
    export class UIX {
        /**
         * ui载体
         */
        private ui;
        showMainPanel(): void;
        hideMainPanel(): void;
        private bindScript;
    }
}

declare module "debug_console" {
    /**
     * 调试控制台
     */
    export namespace DebugConsole {
        enum LogLevel {
            /**
             * 信息
             */
            Info = 0,
            /**
             * 警告
             */
            Warn = 1,
            /**
             * 错误
             */
            Error = 2
        }
        /**
         * 最大消息数量
         */
        let maxMessageCount: number;
        /**
         * 开启调试控制
         * @param isMonitorServer
         * @effect 仅在客户端调用生效
         * ```
         * 是否监控服务器
         * *如果监控服务器RPC会增高
         * ```
         */
        function start(mwLog?: boolean, level?: LogLevel): void;
        /**
         * 停止调试控制
         * @effect 仅在客户端调用生效
         */
        function stop(): void;
    }
}
