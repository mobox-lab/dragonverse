import Gtk from 'gtoolkit';

var Lui;
(function (Lui) {
    (function (Asset) {
        Asset.ImgCircle = "163437";
        Asset.ImgRectangle = "114028";
        Asset.ImgRoundedRectangle = "163428";
        Asset.ImgRoundedRectangleBoxMargin = { left: 12, top: 12, right: 12, bottom: 12 };
        Asset.ImgHalfRoundRectangle = "163390";
        Asset.ImgHalfRoundedRectangleBoxMargin = { left: 12, top: 12, right: 12, bottom: 0 };
        Asset.ImgRoundedRectangleOutline = "163430";
        Asset.ImgCross = "95810";
        (function (Interval) {
            Interval[Interval["VeryFast"] = 0.1] = "VeryFast";
            Interval[Interval["Fast"] = 0.25] = "Fast";
            Interval[Interval["Normal"] = 0.5] = "Normal";
            Interval[Interval["Slow"] = 1] = "Slow";
        })(Asset.Interval || (Asset.Interval = {}));
        let Color;
        (function (Color) {
            Color["White"] = "#FFFFFF";
            Color["Black"] = "#000000";
            Color["Gray50"] = "#fafafa";
            Color["Gray100"] = "#f5f5f5";
            Color["Gray200"] = "#eeeeee";
            Color["Gray300"] = "#e0e0e0";
            Color["Gray400"] = "#bdbdbd";
            Color["Gray500"] = "#9e9e9e";
            Color["Gray600"] = "#757575";
            Color["Gray700"] = "#616161";
            Color["Gray800"] = "#424242";
            Color["Gray900"] = "#212121";
            Color["Blue200"] = "#90caf9";
            Color["Blue"] = "#2196f3";
            Color["Blue800"] = "#1565c0";
            Color["Red200"] = "#ef9a9a";
            Color["Red"] = "#f44336";
            Color["Red800"] = "#c62828";
            Color["Green200"] = "#a5d6a7";
            Color["Green"] = "#4caf50";
            Color["Green800"] = "#2e7d32";
            Color["Yellow200"] = "#fff59d";
            Color["Yellow"] = "#ffeb3b";
            Color["Yellow800"] = "#f9a825";
        })(Color = Asset.Color || (Asset.Color = {}));
        class ThemeColor {
        }
        Asset.ThemeColor = ThemeColor;
        Asset.NormalThemeColor = {
            primary: Color.Gray500,
            secondary: Color.Gray200,
        };
        (function (ColorUtil) {
            const safeCache = {
                r: 0,
                g: 0,
                b: 0,
                h: 0,
                s: 0,
                v: 0,
            };
            const safeCache2 = {
                r: 0,
                g: 0,
                b: 0,
                h: 0,
                s: 0,
                v: 0,
            };
            function colorHexWithAlpha(color, alpha) {
                if (color.length > 7)
                    return color;
                return `${color}${(Math.ceil(Gtk.clamp(alpha) * 255))
                    .toString(16)
                    .toUpperCase()}`;
            }
            ColorUtil.colorHexWithAlpha = colorHexWithAlpha;
            function lerp(r, g, b, rd, gd, bd, t, out) {
                if (!out)
                    out = { r, g, b };
                out.r = r + (rd - r) * t;
                out.g = g + (gd - g) * t;
                out.b = b + (bd - b) * t;
                return out;
            }
            ColorUtil.lerp = lerp;
            function lerpByHsv(r, g, b, rd, gd, bd, t, outer) {
                const hsv = rgbToHsv(r, g, b, safeCache);
                const hsvD = rgbToHsv(rd, gd, bd, safeCache2);
                return hsvToRgb(hsv.h + (hsvD.h - hsv.h) * t, hsv.s + (hsvD.s - hsv.s) * t, hsv.v + (hsvD.v - hsv.v) * t, outer);
            }
            ColorUtil.lerpByHsv = lerpByHsv;
            function lerpHsv(h, s, v, hd, sd, vd, t, out) {
                if (!out)
                    out = { h, s, v };
                out.h = h + (hd - h) * t;
                out.s = s + (sd - s) * t;
                out.v = v + (vd - v) * t;
                return out;
            }
            ColorUtil.lerpHsv = lerpHsv;
            function rgbToHsv(r, g, b, out) {
                r /= 255;
                g /= 255;
                b /= 255;
                let max = Math.max(r, g, b), min = Math.min(r, g, b);
                if (!out)
                    out = { h: 0, s: 0, v: max };
                let d = max - min;
                out.s = max === 0 ? 0 : d / max;
                if (max === min) {
                    out.h = 0;
                }
                else {
                    switch (max) {
                        case r:
                            out.h = (g - b) / d + (g < b ? 6 : 0);
                            break;
                        case g:
                            out.h = (b - r) / d + 2;
                            break;
                        case b:
                            out.h = (r - g) / d + 4;
                            break;
                    }
                    out.h /= 6;
                }
                return out;
            }
            ColorUtil.rgbToHsv = rgbToHsv;
            function hsvToRgb(h, s, v, out) {
                if (!out)
                    out = { r: 0, g: 0, b: 0 };
                let i = Math.floor(h * 6);
                let f = h * 6 - i;
                let p = v * (1 - s);
                let q = v * (1 - f * s);
                let t = v * (1 - (1 - f) * s);
                switch (i % 6) {
                    case 0:
                        out.r = v;
                        out.g = t;
                        out.b = p;
                        break;
                    case 1:
                        out.r = q;
                        out.g = v;
                        out.b = p;
                        break;
                    case 2:
                        out.r = p;
                        out.g = v;
                        out.b = t;
                        break;
                    case 3:
                        out.r = p;
                        out.g = q;
                        out.b = v;
                        break;
                    case 4:
                        out.r = t;
                        out.g = p;
                        out.b = v;
                        break;
                    case 5:
                        out.r = v;
                        out.g = p;
                        out.b = q;
                        break;
                }
                out.r *= 255;
                out.g *= 255;
                out.b *= 255;
                return out;
            }
            ColorUtil.hsvToRgb = hsvToRgb;
            function hexToRgb(hex, out) {
                if (!out)
                    out = { r: 0, g: 0, b: 0 };
                hex = hex.replace(/^#/, "");
                let bigint = parseInt(hex, 16);
                out.r = (bigint >> 16) & 255;
                out.g = (bigint >> 8) & 255;
                out.b = bigint & 255;
                return out;
            }
            ColorUtil.hexToRgb = hexToRgb;
            function rgbToHex(r, g, b) {
                let red = r.toString(16).padStart(2, "0");
                let green = g.toString(16).padStart(2, "0");
                let blue = b.toString(16).padStart(2, "0");
                return `#${red}${green}${blue}`;
            }
            ColorUtil.rgbToHex = rgbToHex;
            function hexToHsv(hex, out) {
                hexToRgb(hex, safeCache);
                return rgbToHsv(safeCache.r, safeCache.g, safeCache.b, out);
            }
            ColorUtil.hexToHsv = hexToHsv;
            function hsvToHex(h, s, v) {
                let rgb = hsvToRgb(h, s, v);
                return rgbToHex(rgb.r, rgb.g, rgb.b);
            }
            ColorUtil.hsvToHex = hsvToHex;
            /**
             * 是否 是鲜艳色.
             * @param {number} r
             * @param {number} g
             * @param {number} b
             * @return {boolean}
             */
            function isBrightness(r, g, b) {
                return (r * 299 + g * 587 + b * 114) / 1000 > 128;
            }
            ColorUtil.isBrightness = isBrightness;
            /**
             * 转换为深色主题颜色.
             * @param {ThemeColor} color
             * @return {ThemeColor}
             */
            function toDarkThemeColor(color) {
                let primary = hexToHsv(color.primary);
                primary = toBrighter(primary.h, primary.s, primary.v);
                let secondary = hexToHsv(color.secondary);
                secondary = toDarker(secondary.h, secondary.s, secondary.v);
                return {
                    primary: hsvToHex(primary.h, primary.s, primary.v),
                    secondary: hsvToHex(secondary.h, secondary.s, secondary.v),
                };
            }
            ColorUtil.toDarkThemeColor = toDarkThemeColor;
            /**
             * 降低亮度.
             * @param {number} h
             * @param {number} s
             * @param {number} v
             * @return {{h: number, s: number, v: number}}
             */
            function toDarker(h, s, v) {
                return {
                    h,
                    s: Math.min(s * 1.2, 1),
                    v: v * 0.8,
                };
            }
            ColorUtil.toDarker = toDarker;
            /**
             * 提高亮度.
             * @param {number} h
             * @param {number} s
             * @param {number} v
             * @return {{h: number, s: number, v: number}}
             */
            function toBrighter(h, s, v) {
                return {
                    h,
                    s: s * 0.8,
                    v: Math.min(v * 1.2, 1),
                };
            }
            ColorUtil.toBrighter = toBrighter;
        })(Asset.ColorUtil || (Asset.ColorUtil = {}));
    })(Lui.Asset || (Lui.Asset = {}));
})(Lui || (Lui = {}));

export { Lui };
//# sourceMappingURL=Asset.js.map
