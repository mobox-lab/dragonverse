export { RangeDataValidator } from './GodModParam.js';
import { GodCommandItem } from './GodCommandItem.js';
import { GodModPanel } from './ui/GodModPanel.js';
export { GodModParamInputBase } from './ui/param-base/GodModParamInputBase.js';
export { ParamInputSizeY, ParamInputZOrder } from './ui/param-base/IGodModParamInput.js';
import './ui/param-input/GodModIntegerParamInput.js';
import './ui/param-input/GodModNumberParamInput.js';
import './ui/param-input/GodModStringParamInput.js';
import './ui/param-input/GodModVectorParamInput.js';
export { ExpandIcon } from './ui/icon/ExpandIcon.js';
export { MoveIcon } from './ui/icon/MoveIcon.js';
import Gtk, { Singleton, Regulator, GtkTypes } from 'gtoolkit';
import Log4Ts from 'mw-log4ts';

class GodModService extends Singleton() {
    constructor() {
        super(...arguments);
        //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
        this._queriedAdminList = false;
        /**
         * GodCommands 库.
         * @type {Map<string, GodCommandItem<unknown>>}
         * @private
         */
        this._commands = new Map();
        /**
         * 管理员列表.
         * @type {Set<string>}
         * @private
         */
        this._adminList = undefined;
        this._shutdown = false;
        this._checkAuthorityRegulator = new Regulator(GtkTypes.Interval.PerMin * 5);
    }
    onConstruct() {
        mw.TimeUtil.onEnterFrame.add(() => {
            if (this._checkAuthorityRegulator.request()) {
                this.queryAdminList();
            }
        });
    }
    addCommand(label, paramType = "string", clientCmd = undefined, serverCmd = undefined, paramOption = undefined, group) {
        if (this._shutdown)
            return;
        if (this._commands.get(label)) {
            Log4Ts.error(GodModService, `A command with the same label already exists.`, label);
        }
        else if (!clientCmd && !serverCmd) {
            Log4Ts.error(GodModService, `at least one of the client command and server command must be provided.`);
            return;
        }
        else {
            this._commands.set(label, new GodCommandItem(label, paramType, clientCmd, serverCmd, paramOption, group));
            if (mw.SystemUtil.isServer()) {
                mw.Event.addClientListener(this.getEventName(label), (player, p) => {
                    this.runCommandInServer(player, label, p);
                });
            }
        }
    }
    removeCommand(label) {
        this._commands.delete(label);
    }
    getAllCommands() {
        return [...this._commands.values()];
    }
    runCommandInClient(label, p, autoDispatchToServer = true) {
        if (this._shutdown || !mw.SystemUtil.isClient())
            return;
        const command = this._commands.get(label);
        if (!command || !command.isParamValid(p))
            return;
        try {
            command.clientCmd?.(p);
        }
        catch (e) {
            Log4Ts.error(GodModService, `error occurs in client command.`, e);
        }
        if (command.serverCmd && autoDispatchToServer) {
            Event.dispatchToServer(this.getEventName(command.label), p);
        }
    }
    runCommandInServer(player, label, p) {
        if (this._shutdown || !mw.SystemUtil.isServer())
            return;
        if (!this.verifyAuthority(player.userId))
            return;
        const command = this._commands.get(label);
        if (!command || !command.isParamValid(p))
            return;
        try {
            command.serverCmd?.(player, p);
        }
        catch (e) {
            Log4Ts.error(GodModService, `error occurs in server command.`, e);
        }
    }
    showGm() {
        if (mw.SystemUtil.isClient()) {
            if (!this._view) {
                this._view = GodModPanel
                    .create({
                    items: Array.from(this._commands.values()),
                    zOrder: 650000,
                })
                    .attach(mw.UIService.canvas)
                    .registerCommandHandler((label, p, autoDispatchToServer) => {
                    this.runCommandInClient(label, p, autoDispatchToServer);
                });
            }
            else {
                this._view.attach(mw.UIService.canvas);
            }
        }
    }
    hideGm() {
        if (mw.SystemUtil.isClient()) {
            this._view?.detach();
        }
    }
    shutdown() {
        this._shutdown = true;
        this._commands.clear();
        return this;
    }
    //#region UI Config
    /**
     * 设置 GodMod 面板 zOrder.
     * @param {number} zOrder
     * @return {this}
     */
    setZOrder(zOrder) {
        if (this._view && this._view.root) {
            this._view.root.zOrder = zOrder;
        }
        return this;
    }
    /**
     * 设置 GodMod 面板 位置.
     * @param {number} x
     * @param {number} y
     * @return {this}
     */
    setPosition(x, y) {
        if (this._view && this._view.root) {
            Gtk.setUiPosition(this._view.root, x, y);
        }
        return this;
    }
    //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
    verifyAuthority(userId) {
        return this._adminList === undefined || (this._adminList && this._adminList.has(userId));
    }
    /**
     * 查询管理员列表.
     */
    queryAdminList() {
        mw.DataStorage
            ?.asyncGetData(GodModService.GodModAdminListStorageKey)
            ?.then(result => {
            if (this._queriedAdminList)
                return;
            switch (result.code) {
                case mw.DataStorageResultCode.Success:
                    if (result.data === undefined) {
                        mw.DataStorage.asyncSetData(GodModService.GodModAdminListStorageKey, []);
                    }
                    else {
                        if (result.data?.length > 0 ?? false) {
                            this._adminList = new Set();
                            for (const d of result.data) {
                                this._adminList.add(d);
                            }
                        }
                        else {
                            this._adminList = undefined;
                        }
                    }
                    break;
            }
            this._queriedAdminList = true;
        });
    }
    ;
    /**
     * 获取填充类型名.
     * @param {string} label
     * @return {string}
     * @private
     */
    getEventName(label) {
        return GodModService.GodModRequestEventNamePrefix + label;
    }
}
//#region Constant
/**
 * 管理员列表存储键.
 * @type {string}
 */
GodModService.GodModAdminListStorageKey = "GOD_MOD_ADMIN_LIST__STORAGE_KEY";
/**
 * God Mod 请求事件名称前缀.
 * @type {string}
 */
GodModService.GodModRequestEventNamePrefix = "__GOD_MOD_REQUEST_EVENT_NAME__";
function addGMCommand(label, paramType, clientCmd = undefined, serverCmd = undefined, paramOption = undefined, group) {
    GodModService.getInstance().addCommand(label, paramType, clientCmd, serverCmd, paramOption, group);
}

export { GodCommandItem, GodModPanel, addGMCommand, GodModService as default };
//# sourceMappingURL=GodModService.js.map
