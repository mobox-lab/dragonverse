declare module "mw-god-mod" {
    export type AcceptableParamType = "void" | "string" | "integer" | "number" | "enum" | "vector";
    export type InferParamType<P> = P extends "void" ? void : P extends "string" ? string : P extends "number" ? number : P extends "integer" ? number : P extends "enum" ? object : P extends "vector" ? mw.Vector : never;
    export type GodModInferredParamType = InferParamType<AcceptableParamType>;
    /**
     * 󰌆数据验证器.
     */
    export type DataValidator<P> = (param: P) => boolean;
    /**
     * 归因 󰌆数据验证器.
     */
    export interface DataValidatorWithReason<P> {
        /**
         * 󰌆数据验证器.
         */
        validator: DataValidator<P>;
        /**
         * 原因.
         */
        reason: string;
    }
    /**
     * God Mod 命令参数选项.
     */
    export interface GodCommandParamOption<P = string> {
        /**
         * 󰌆数据验证器组合.
         */
        validator: (DataValidator<P> | DataValidatorWithReason<P>)[];
    }
    export function RangeDataValidator(min: number, max: number): DataValidatorWithReason<number>;
}

declare module "mw-god-mod" {
    /**
     * God Command Item 命令项.
     * @desc 描述一个 God 命令.
     */
    export class GodCommandItem<P extends AcceptableParamType> {
        label: string;
        paramType: P;
        clientCmd: (params: InferParamType<P>) => void;
        serverCmd: (player: mw.Player, params: InferParamType<P>) => void;
        paramOption: GodCommandParamOption<InferParamType<P>>;
        group?: string;
        pinyin: string;
        /**
         * God Command Item constructor.
         * @param {string} label 名称. 唯一的.
         * @param {P} paramType 参数类型.
         * @param {(params: P) => void} clientCmd client 命令.
         * @param {(player: mw.Player, params: P) => void} serverCmd server 命令.
         * @param {GodCommandParamOption<P>} paramOption 参数选项.
         * @param {string} group 分组.
         */
        constructor(label: string, paramType: P, clientCmd?: (params: InferParamType<P>) => void, serverCmd?: (player: mw.Player, params: InferParamType<P>) => void, paramOption?: GodCommandParamOption<InferParamType<P>>, group?: string);
        /**
         * 是否 󰍹客户端命令.
         * @return {boolean}
         */
        get isClientCmd(): boolean;
        /**
         * 是否 󰒋服务器命令.
         * @return {boolean}
         */
        get isServerCmd(): boolean;
        /**
         * 是否通过 󰄲数据验证.
         * @param {P} p
         * @return {boolean} 是否 通过验证.
         */
        isParamValid(p: InferParamType<P>): boolean;
    }
}

declare module "mw-god-mod" {
    import { Delegate } from "gtoolkit";
    import { Component, InputChangeEvent, KeyEvent, Property } from "mw-lynx-ui";
    export const ParamInputSizeY = 60;
    export interface IGodModParamInputParametric<P extends GodModInferredParamType> {
        getParam(): P;
        setParam(p: P): void;
        setValidator(validator: Property.DataValidators<unknown>): void;
        get validated(): Property.DataValidateResult;
        onCommit: Delegate.SimpleDelegate<InputChangeEvent>;
        onKeyUp: Delegate.SimpleDelegate<KeyEvent>;
    }
    export type GodModParamInputComponent<P extends GodModInferredParamType> = IGodModParamInputParametric<P> & Component;
}

declare module "mw-god-mod" {
    import { Component } from "mw-lynx-ui";
    export class GodModPanel extends Component {
        private static readonly TipsShownTime;
        private static readonly TipsFadeTime;
        private static readonly BtnRunSizeY;
        private static readonly TxtInfoSizeY;
        private _cnvController;
        private _btnExpand;
        private _btnMove;
        private _btnClose;
        private _acInput;
        private _cnvParamInputContainer;
        private _cnvParamInput;
        private _btnRun;
        private _txtInfo;
        private _imgDrag;
        private _godCommandItems;
        private _currentChoose;
        private _lastChoose;
        private _currentInputComponent;
        private _paramCache;
        private _paramInputComponentCache;
        private _dragSensitive;
        private _dragStartTime;
        private _mouseStartMosPos;
        private _mouseStartCnvPos;
        private _lastShowTipsTime;
        private _runCommandHandler;
        static create(option?: GodModPanelOption): GodModPanel;
        static defaultOption(): any;
        protected renderAnimHandler: (dt: number) => void;
        protected destroy(): void;
        registerCommandHandler(handler: (label: string, p: any, autoDispatchToServer?: boolean) => void): this;
        private showCnvParamInput;
        private hideCnvParamInput;
        private commit;
        private handleDrag;
        private playStartDragEffect;
        private playStopDragEffect;
        private showTips;
        private showWarning;
        private showSuccess;
    }
    export interface GodModPanelOption {
        items: GodCommandItem<AcceptableParamType>[];
        /**
         * 拖动敏度. ms
         * @desc 该时间后触发拖动.
         */
        dragSensitive?: number;
        zOrder?: number;
    }
}

declare module "mw-god-mod" {
    const GodModService_base: {
        new (): {
            createTime: Date;
            onConstruct(): void;
        };
        _instance: GodModService;
        getInstance(): GodModService;
    };
    export default class GodModService extends GodModService_base {
        /**
         * 管理员列表存储键.
         * @type {string}
         */
        static readonly GodModAdminListStorageKey = "GOD_MOD_ADMIN_LIST__STORAGE_KEY";
        /**
         * God Mod 请求事件名称前缀.
         * @type {string}
         */
        static readonly GodModRequestEventNamePrefix = "__GOD_MOD_REQUEST_EVENT_NAME__";
        private _queriedAdminList;
        private _view;
        /**
         * GodCommands 库.
         * @type {Map<string, GodCommandItem<unknown>>}
         * @private
         */
        private _commands;
        /**
         * 管理员列表.
         * @type {Set<string>}
         * @private
         */
        private _adminList;
        private _shutdown;
        private _checkAuthorityRegulator;
        onConstruct(): void;
        addCommand<P extends AcceptableParamType>(label: string, paramType?: P, clientCmd?: (params: InferParamType<P>) => void, serverCmd?: (player: mw.Player, params: InferParamType<P>) => void, paramOption?: GodCommandParamOption<InferParamType<P>>, group?: string): void;
        removeCommand(label: string): void;
        getAllCommands(): Readonly<GodCommandItem<AcceptableParamType>[]>;
        runCommandInClient(label: string, p: any, autoDispatchToServer?: boolean): void;
        runCommandInServer(player: mw.Player, label: string, p: any): void;
        showGm(): void;
        hideGm(): void;
        shutdown(): this;
        private verifyAuthority;
        /**
         * 查询管理员列表.
         */
        private queryAdminList;
        /**
         * 获取填充类型名.
         * @param {string} label
         * @return {string}
         * @private
         */
        private getEventName;
    }
    export function addGMCommand<P extends AcceptableParamType>(label: string, paramType: P, clientCmd?: (params: InferParamType<P>) => void, serverCmd?: (player: mw.Player, params: InferParamType<P>) => void, paramOption?: GodCommandParamOption<InferParamType<P>>, group?: string): void;
}
