declare module "module_leaderboard" {
    export type LeaderboardPlayerData = {
        playerId: number;
        data: {
            [fieldId: number]: number | string;
        };
    };
    export class LeaderboardModuleBaseC<T extends LeaderboardModuleBaseS<any>> extends ModuleC<T, null> {
        private playerDataMap;
        private playerDataList;
        private dataIsChange;
        private refreshPanelTime;
        private refreshPanelTimeInterval;
        private refreshPanelCallback;
        private refreshId;
        /**
         * 开始刷新界面
         * @param refreshCallback 刷新的回调方法，可以在这个方法里刷新UI
         * @param timeInterval 刷新的间隔时间(单位:秒)，这个时间越小，S端有变化时前端刷新越及时，但更消耗性能，建议使用默认值1秒
         */
        protected startRefreshPanel(refreshCallback: (playerDataList: LeaderboardPlayerData[]) => void, timeInterval?: number): void;
        /**
         * 停止刷新界面
         */
        protected stopRefreshPanel(): void;
        private initDataList;
        private refresh;
        private immediatelyRefresh;
    }
    export abstract class LeaderboardModuleBaseS<T extends LeaderboardModuleBaseC<any>> extends ModuleS<T, null> {
        private refreshClientArr;
        private playerDataMap;
        /**
         * 向排行榜添加一个玩家
         * @param player 玩家对象|玩家id
         * @param data 玩家数据
         * @returns 是否成功
         */
        addPlayer(player: Gameplay.Player | number, data: {
            [fieldId: number]: number | string;
        }): boolean;
        /**
         * 从排行榜移除一个玩家
         * @param player 玩家对象|玩家id
         * @returns 是否成功
         */
        removePlayer(player: Gameplay.Player | number): boolean;
        /**
         * 设置玩家的一个字段值
         * @param player 玩家对象|玩家id
         * @param fieldId 字段ID
         * @param value 字段的值
         */
        setPlayerValue(player: Gameplay.Player | number, fieldId: number, value: number | string): void;
        /**
         * 清除排行榜
         */
        clear(): void;
        private removeRefreshPlayer;
    }
}

declare module "module_leaderboard" {
    interface IItemView extends UI.UIBehavior {
        mContent: UI.Canvas;
    }
    interface IPanelView extends UI.UIBehavior {
        mTitle_txt: UI.TextBlock;
        mFieldName: UI.Canvas;
        mContent: UI.Canvas;
        mSelfList: UI.Canvas;
        mClose_btn: UI.StaleButton;
    }
    export abstract class LeaderboardBaseItem<T extends IItemView> extends BasePanel<T> {
        protected mFieldTxtList: Array<UI.TextBlock>;
        private _playerId;
        protected onAwake(): void;
        /**
         * 显示在画布上调用，需要请复写
         * @param playerId 玩家id
         * @param rankIndex 排名(0开始)
         */
        protected onAddToCanvas(playerId: number, rankIndex: number): void;
        /**
         * 设置字段内容后调用，需要请复写
         * @param playerId 玩家id
         * @param rankIndex 名次索引(0开始)
         * @param fieldIndex 字段索引 (如果是排行字段，此参数为mull)
         * @param fieldValue 字段显示内容
         * @param textBlockIndex 文本控件索引
         * @param textBlock 文本控件
         */
        protected onFieldSet(playerId: number, rankIndex: number, fieldId: number, fieldValue: string | number, textBlockIndex: number, textBlock: UI.TextBlock): void;
        protected get playerId(): number;
    }
    type LeaderboardItem = LeaderboardBaseItem<IItemView>;
    export abstract class LeaderboardBasePanel<T extends IPanelView> extends BasePanel<T> {
        readonly onClose: Type.Action;
        private mFieldNameTxtList;
        private mSelfFieldTxtList;
        private lan_notInList;
        private fieldIdList;
        private fieldNameMap;
        private fieldValueFormatMap;
        private itemPool;
        private itemList;
        private isShowRank;
        private rankFieldName;
        private rankValueStyle;
        private showPlayerNum;
        private itemSpacing;
        private autoLayout;
        private fieldNum;
        private sortFields;
        private isInit;
        private init;
        private initFieldNameTxtList;
        private layoutFieldTxt;
        /**
         * 设置排行榜样式
         * @param title UI标题
         * @param fieldsAutoLayout 字段是否自动布局(true-均匀分布, false-所摆即所得）
         * @param showPlayerNum 最多显示的玩家数量
         * @param itemSpacing 每条数据的间距
         */
        setStyle(title: string, fieldsAutoLayout: boolean, showPlayerNum: number, itemSpacing: number): this;
        /**
         * 显示"名次"字段，默认不显示，调用这个方法后才会显示
         * @param fieldName 字段标题
         * @param valueStyle 字段值样式
         * @param notListed 未上榜(如果未上榜也显示"名次"请填写null)
         */
        showRankField(fieldName: string, valueStyle?: string, notListed?: string): this;
        /**
         * 添加一个字段
         * @param fieldId 字段ID
         * @param fieldName 字段的标题
         * @param valueStyle 字段值的展示样式 (例：{0}分)
         */
        addField(fieldId: number, fieldName: string, valueStyle?: string): this;
        /**
         * 设置排序字段ID，可以设置多字段排序，只支持从大到小排序
         * @param fields 排序字段
         */
        setSortFields(...fieldIds: number[]): this;
        /**
         * 设置排序的方法
         * @param fn 方法
         */
        setSortMethod(fn: (dataList: LeaderboardPlayerData[]) => LeaderboardPlayerData[]): this;
        /**
         * 显示调用
         * @param playerDataList 玩家数据列表
         */
        protected onShow(playerDataList: Array<LeaderboardPlayerData>): void;
        /**隐藏调用 */
        protected onHide(): void;
        private sortFun;
        private creatContentList;
        /**
         * 显示一条玩家数据
         * @param rankIndex 名次索引(0开始)
         * @param playerData 玩家数据
         */
        private showPlayerData;
        /**
         * 显示自己的数据
         * @param rankIndex 名次索引(0开始)
         * @param playerData 玩家数据
         */
        private showSelfData;
        private setFieldName;
        private setSelfFieldContent;
        /**
         * 获取一个字段的显示内容，如:30分
         * @param fieldId 字段id
         * @param fieldValue 字段的值
         * @returns 处理后的内容
         */
        private getValueContent;
        /**
         * 设置自己的字段内容后调用，需要请复写
         * @param rankIndex 名次索引(0开始)
         * @param fieldId 字段索引 (如果是排行字段，此参数为mull)
         * @param fieldValue 字段显示内容
         * @param textBlockIndex 文本控件索引
         * @param textBlock 文本控件
         */
        protected onSelfFieldSet(rankIndex: number, fieldId: number, fieldValue: string | number, textBlockIndex: number, textBlock: UI.TextBlock): void;
        /**
         * 创建显示一条信息的item
         */
        protected abstract creatItem(): LeaderboardItem;
    }
}

declare module "module_leaderboard" {
    /**默认排行榜 */
    export class Leaderboard {
        private static _instance;
        static get instance(): Leaderboard;
        private constructor();
        private static RegisterListener;
        private static init;
        private get panelStyle();
        /**
         * 添加一个字段
         * @param fieldName 字段名(title上显示的内容)
         * @param valueStyle 值的表达方式 (例：{0}分)
         */
        addField(fieldId: number, fieldName: string, valueStyle?: string): this;
        /**
         * 显示排名
         * @param fieldName 字段名
         * @param valueStyle 字段值样式
         * @param notListed 未上榜(如果未上榜也显示名次请填写null)
         */
        showRankField(fieldName: string, valueStyle?: string, notListed?: string): this;
        /**
         * 设置样式
         * @param title 界面标题
         * @param fieldsAutoLayout 字段是否自动布局，均匀分布
         * @param showPlayerNum 最多显示的玩家数量
         * @param itemSpacing 每条数据的间距
         */
        setStyle(title: string, fieldsAutoLayout: boolean, showPlayerNum: number, itemSpacing: number): this;
        /**
         * 设置排序字段，可以设置多字段排序，只支持从大到小排序
         * @param fields 排序字段
         */
        setSortFields(...fields: number[]): this;
        /**
         * 设置排序的方法（只能Client端调用）
         * @param fn 方法
         */
        setSortMethod(fn: (dataList: LeaderboardPlayerData[]) => LeaderboardPlayerData[]): this;
        /**
         * 显示UI（只能Client端调用）
         * @param hideCallback Panel关闭的回调
         */
        showPanel(hideCallback?: () => void): void;
        /**
         * 隐藏UI（只能Client端调用）
         */
        hidePanel(): void;
        /**
         * 向排行榜添加一个玩家
         * @param player 玩家对象|玩家id
         * @param data 玩家数据
         */
        addPlayer(player: Gameplay.Player | number, data?: any): void;
        /**
         * 从排行榜移除一个玩家
         * @param player 玩家对象|玩家id
         * @returns
         */
        removePlayer(player: Gameplay.Player | number): void;
        /**
         * 设置一个玩家的一个字段值
         * @param player 玩家对象|玩家id
         * @param fieldId 字段的ID
         * @param value 字段的值
         */
        setPlayerValue(player: Gameplay.Player | number, fieldId: number, value: number | string): void;
        /**
         * 清除排行榜
         */
        clear(): void;
    }
}
