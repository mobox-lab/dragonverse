import { ParamInputSizeY } from '../param-base/IGodModParamInput.js';
import Gtk, { Delegate } from 'gtoolkit';
import { Lui, Component, TextField, Property, PropertyUtil } from 'mw-lynx-ui';
import { GodModPanelSizeX } from '../base/GodModPanelConst.js';

var Color = Lui.Asset.Color;
/**
 * GodModVectorParamInput.
 *
 * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
 * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
 * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
 * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
 * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
 * @author LviatYi
 * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
 * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
 * @internal
 */
class GodModVectorParamInput extends Component {
    constructor() {
        super(...arguments);
        //#region Init
        this.onCommit = new Delegate.SimpleDelegate();
        this.onKeyUp = new Delegate.SimpleDelegate();
        //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
        //#region CallBack
        //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
    }
    //#region Lui Component
    static create(option) {
        let input = new GodModVectorParamInput();
        input._inputX = TextField.create({
            label: "x",
            size: { x: 135, y: ParamInputSizeY },
            padding: { right: 5 },
            color: {
                primary: Color.Blue,
                secondary: Color.Blue200,
            },
            fontSize: 16,
            fontStyle: mw.UIFontGlyph.Light,
            corner: Property.Corner.Top,
            type: mw.InputTextLimit.LimitToFloat,
        }).attach(input);
        input._inputY = TextField.create({
            label: "y",
            size: { x: 135, y: ParamInputSizeY },
            padding: { right: 5 },
            color: {
                primary: Color.Blue,
                secondary: Color.Blue200,
            },
            fontSize: 16,
            fontStyle: mw.UIFontGlyph.Light,
            corner: Property.Corner.Top,
            type: mw.InputTextLimit.LimitToFloat,
        }).attach(input);
        Gtk.setUiPositionX(input._inputY.root, 135);
        input._inputZ = TextField.create({
            label: "z",
            size: { x: 130, y: ParamInputSizeY },
            color: {
                primary: Color.Blue,
                secondary: Color.Blue200,
            },
            fontSize: 16,
            fontStyle: mw.UIFontGlyph.Light,
            corner: Property.Corner.Top,
            type: mw.InputTextLimit.LimitToFloat,
        }).attach(input);
        Gtk.setUiPositionX(input._inputZ.root, 270);
        Gtk.setUiSize(input.root, GodModPanelSizeX, ParamInputSizeY);
        input._inputZ.onKeyUp.add((e) => {
            input.onKeyUp.invoke(e);
        });
        return input;
    }
    ;
    //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
    getParam() {
        return new mw.Vector(Number(this._inputX.text), Number(this._inputY.text), Number(this._inputZ.text));
    }
    setParam(p) {
        this._inputX.setContent(p?.x?.toString() ?? "");
        this._inputY.setContent(p?.y?.toString() ?? "");
        this._inputZ.setContent(p?.z?.toString() ?? "");
        this._inputX.onCommit.add(e => this.onCommit.invoke(e));
        this._inputY.onCommit.add(e => this.onCommit.invoke(e));
        this._inputZ.onCommit.add(e => this.onCommit.invoke(e));
        this._inputX.onKeyUp.add(e => this.onKeyUp.invoke(e));
        this._inputY.onKeyUp.add(e => this.onKeyUp.invoke(e));
        this._inputZ.onKeyUp.add(e => this.onKeyUp.invoke(e));
    }
    setValidator(validator) {
        this._validator = validator;
    }
    get validated() {
        if (Gtk.isNullOrEmpty(this._validator))
            return { result: true };
        let param = this.getParam();
        return PropertyUtil.validate(this._validator, param);
    }
}

export { GodModVectorParamInput as default };
//# sourceMappingURL=GodModVectorParamInput.js.map
