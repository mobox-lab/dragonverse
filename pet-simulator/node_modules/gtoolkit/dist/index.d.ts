declare module "gtoolkit" {
    /**
     * GToolkit.
     * General Toolkit deep binding MW Ts.
     * @desc ---
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author G.S.C. Gtk Standards Committee. Gtk 标准委员会.
     * @author LviatYi
     * @author minjia.zhang
     * @author zewei.zhang
     * @author yuanming.hu
     * @see https://github.com/LviatYi/MetaWorldNPT/tree/main/MetaWorldNPT/JavaScripts/util
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    class GToolkit {
        /**
         * 角度限制常数.
         * @private
         */
        private static readonly DEFAULT_ANGLE_CLAMP;
        /**
         * 圆周角.
         * @private
         */
        private static readonly CIRCLE_ANGLE;
        /**
         * 简略精度.
         * @private
         */
        private static readonly SIMPLE_EPSILON;
        /**
         * 全高清分辨率.
         * @private
         */
        private static readonly FULL_HD;
        /**
         * 全高清分辨率比例.
         * @private
         */
        private static readonly FULL_HD_RATIO;
        /**
         * 1 天 24 小时.
         * @private
         */
        private static readonly HourInDay;
        /**
         * 1 小时 60 分钟.
         * @private
         */
        private static readonly MinuteInHour;
        /**
         * 1 分钟 60 秒.
         * @private
         */
        private static readonly SecondInMinute;
        /**
         * 1 秒 1000 毫秒.
         * @private
         */
        private static readonly MillisecondInSecond;
        /**
         * 默认 随机函数.
         * @type {() => number}
         */
        defaultRandomFunc: () => number;
        private _characterDescriptionLockers;
        private _patchHandlerPool;
        private _waitHandlerPool;
        private _globalOnlyOnBlurDelegate;
        /**
         * Is Primitive.
         * @param value
         */
        isPrimitiveType<T>(value: T): value is T extends string | number | boolean | symbol ? T : never;
        /**
         * Is number.
         * @param value
         */
        isNumber<T>(value: T): value is T extends number ? T : never;
        /**
         * Is string.
         * @param value
         */
        isString<T>(value: T): value is T extends string ? T : never;
        /**
         * Is boolean.
         * @param value
         */
        isBoolean<T>(value: T): value is T extends boolean ? T : never;
        /**
         * Is object.
         * @param value
         */
        isObject<T>(value: T): value is T extends object ? T : never;
        /**
         * 对 instance 进行强制类型推断.
         * @param instance 对象
         * @param method 对象方法名
         * @returns boolean
         */
        is<T extends object>(instance: object, method: string | ((instance: object) => boolean)): instance is T;
        /**
         * Ts 枚举值.
         * traverse values in enum.
         * @param {T} enumType
         * @return {ValueTypeInEnum<T>[]}
         */
        enumVals<T>(enumType: T): ValueTypeInEnum<T>[];
        /**
         * is the array or string empty.
         * define empty is undefined or null or [""].
         * @param textOrArray str or array.
         */
        isNullOrEmpty(textOrArray: string | unknown[]): boolean;
        /**
         * is the value null or undefined.
         * @param value
         */
        isNullOrUndefined(value: unknown): boolean;
        /**
         * return the safe index.
         * @param index
         * @param arr
         * @param safeStrategy 索引越界时的安全策略.
         *      - "cut" default. 截断至合法索引.
         *      - "cycle" 循环. 非法时对值取余.
         * @return 当数组为空时返回 -1. 否则按策略返回合法索引.
         */
        safeIndex(index: number, arr: unknown[], safeStrategy?: "cut" | "cycle"): number;
        /**
         * return item by index who maybe unsafe.
         * @param index
         * @param arr
         * @param safeStrategy 索引越界时的安全策略.
         *      - "cut" default. 截断至合法索引.
         *      - "cycle" 循环. 非法时对值取余.
         * @return 当数组为空时返回 null. 否则按策略返回合法元素.
         */
        safeIndexItem<T>(index: number, arr: T[], safeStrategy?: "cut" | "cycle"): T;
        /**
         * remove item from array.
         * @param array
         * @param item
         * @param {boolean} holdOrder hold order after remove.
         */
        remove<T>(array: T[], item: T, holdOrder?: boolean): boolean;
        /**
         * remove item from array by index.
         * @desc sequence not maintained.
         * @param {T[]} array
         * @param {number} index
         */
        removeByIndex(array: unknown[], index: number): boolean;
        /**
         * build an advanced switch.
         */
        switch(): Switcher;
        /**
         * fold data.
         * @param data
         * @param foldCount
         * @param func
         */
        fold<UF, F>(data: UF[], foldCount: number, func: (data: UF[]) => F): F[];
        /**
         * unfold data.
         * @param data
         * @param foldCount
         * @param func
         */
        unfold<F, UF>(data: F[], foldCount: number, func: (data: F) => UF[]): UF[];
        /**
         * confirm get value from map with key.
         * @param {Map<K, V>} map
         * @param {K} key
         * @param {()=>V} generate
         * @return {V}
         */
        tryGet<K, V>(map: Map<K, V>, key: K, generate: Expression<V> | V): V;
        /**
         * do callback once when predicate return true.
         * @param predicate
         * @param callback
         * @param interval test predicate interval. ms.
         *      - 100 default.
         * @param instant test predicate at once.
         * @param timeout timeout. stop predicate test after timeout. ms.
         *      - 0 default. no timeout.
         * @param onError on error callback.
         * @param onTimeout on timeout callback.
         * @return interval hold id.
         */
        doWhenTrue(predicate: () => boolean, callback: () => void, interval?: number, instant?: boolean, timeout?: number, onError?: Expression<void>, onTimeout?: Expression<void>): number | null;
        /**
         * do callback persistently until predicate return true.
         * @param predicate
         * @param callback
         * @param interval ms. test predicate interval.
         *      100 default.
         * @param instant test predicate at once.
         * @param timeout timeout. stop predicate test after timeout. ms.
         *      - 0 default. no timeout.
         * @param onError on error callback.
         * @param onTimeout on timeout callback.
         * @return interval hold id.
         */
        doUntilTrue(predicate: () => boolean, callback: () => void, interval?: number, instant?: boolean, timeout?: number, onError?: Expression<void>, onTimeout?: Expression<void>): number | null;
        /**
         * do a delayed batch operation who wait for data.
         * @param {TArg} data
         * @param {(data: TArg[]) => void} patchCallback
         *      - do not use an anonymous function here.
         * @param {number} waitTime=undefined 󰅐wait time. ms.
         *      if first register the patchCallback, the waitTime will be 100 ms.
         *      else the waitTime will use last waitTime.
         * @param {boolean} reTouch=false reclock when data added.
         *      it allows a single instance to store and manage multiple data batch queues based on different tags.
         * @param {boolean} instantly=false do patch when instantly.
         * @return {number} timer id.
         */
        patchDo<TArg>(data: TArg, patchCallback: (data: TArg[]) => void, waitTime?: number, reTouch?: boolean, instantly?: boolean): number | undefined;
        /**
         * do a delayed batch operation who wait for data.
         * @param {TArg} data
         * @param {(data: TArg) => void} waitCallback
         *      - do not use an anonymous function here.
         * @param {number} waitTime=undefined 󰅐wait time. ms.
         *      if first register the patchCallback, the waitTime will be 100 ms.
         *      else the waitTime will use last waitTime.
         * @param {boolean} reTouch=true reclock when data added.
         *      it allows a single instance to store and manage multiple data batch queues based on different tags.
         * @param {boolean} instantly=false do patch when instantly.
         * @return {number} timer id.
         */
        waitDo<TArg>(data: TArg, waitCallback: (data: TArg) => void, waitTime?: number, reTouch?: boolean, instantly?: boolean): number | undefined;
        /**
         * whether the two times are equal.
         * @param {number} lhs
         * @param {number} rhs
         * @param {GtkTypes.TimeFormatDimensionFlagsLike} precision
         * @return {boolean}
         */
        isSameTime(lhs: number, rhs: number, precision?: GtkTypes.TimeFormatDimensionFlagsLike): boolean;
        /**
         * 获取所有成员 key.
         * @param obj 指定实例.
         * @param exceptConstructor 是否 排除构造函数.
         * @param exceptObject 是否 排除 Js Object.
         */
        getAllMember(obj: object, exceptConstructor?: boolean, exceptObject?: boolean): string[];
        /**
         * angle to radius.
         * @param angle
         */
        radius(angle: number): number;
        /**
         * radius to angle.
         * @param radius
         */
        angle(radius: number): number;
        /**
         * random in range [min,max).
         * @param min default 0.
         * @param max default min + 1.
         * @param integer return a integer.
         */
        random(min?: number, max?: number, integer?: boolean): number;
        /**
         * random with weight.
         * @param weight
         * @param total total weight. add last weight as total-sum(weight)
         * @return number [0,weight.length) .
         */
        randomWeight(weight: number[], total?: number): number;
        /**
         * random in array.
         * return null when array invalid or length is zero.
         * @param array
         */
        randomArrayItem<T>(array: Array<T>): T | null;
        /**
         * random shuffle the order from 0 to count.
         * Fisher–Yates.
         * @param count
         */
        randomShuffleOrder(count: number): number[];
        /**
         * random shuffle the array.
         * Fisher–Yates.
         * @param items
         */
        randomShuffleArray<T>(items: T[]): T[];
        /**
         * Get a random generator.
         * @param {number | number[]} length length or scale.
         * @return {RandomGenerator}
         */
        randomGenerator(length?: number | number[]): RandomGenerator;
        /**
         * Generate a random point located on the surface of a unit sphere in an arbitrary number of dimensions,
         * by Box-Muller transform and normalization.
         * @param dimension
         * @param randomFunc
         */
        randomDimensionSphere(dimension?: number, randomFunc?: any): number[];
        /**
         * 格式化 Timestamp 至 00:00.
         *
         * @param timestamp
         * @param option 选择需显示的时间维度.
         */
        formatTimeFromTimestamp(timestamp: number, option?: GtkTypes.TimeFormatDimensionFlagsLike): string;
        /**
         * 时间转换.
         * 支持的时间单位范围：[毫秒,天]
         * @param val 原值.
         * @param from 原值时间维度.
         * @param to 目标时间维度.
         * @return {null} 入参在不支持的范围内时.
         */
        timeConvert(val: number, from: GtkTypes.TimeFormatDimensionFlagsLike, to: GtkTypes.TimeFormatDimensionFlagsLike): number;
        /**
         * Clamp.
         * @param {number} val
         * @param {number} min=0
         * @param {number} max=1
         * @return {number}
         */
        clamp(val: number, min?: number, max?: number): number;
        /**
         * 汉明重量.
         * num 作为二进制时 1 的个数.
         * @param num
         */
        hammingWeight(num: number): number;
        /**
         * num 的二进制形式中第一个 1 的位置.
         * @param num
         * @return {number} 位置.
         *      {-1} 时入参不合法.
         */
        bitFirstOne(num: number): number;
        /**
         * num 的二进制形式中指定数位是否为 1.
         * @param num
         * @param bit 从右向左数第 bit 位.
         */
        bitIn(num: number, bit: number): boolean;
        /**
         * Guid of Root GameObject.
         */
        readonly ROOT_GAME_OBJECT_GUID = "SceneRoot";
        /**
         * Guid of Root GameObject (old).
         */
        readonly ROOT_GAME_OBJECT_GUID_BACKUP = "ComponentRoot";
        /**
         * Tag of Root GameObject.
         * @type {string}
         */
        readonly ROOT_GAME_OBJECT_TAG_CUSTOM = "SceneRootTagByGtk";
        /**
         * 全透明图片 GUID.
         * @type {string}
         */
        readonly IMAGE_FULLY_TRANSPARENT_GUID = "168495";
        /**
         * 纯黑圆形遮罩 GUID.
         */
        readonly IMAGE_CIRCLE_MASK_GUID = "212681";
        /**
         * 白色方块 GUID.
         * @type {string}
         */
        readonly IMAGE_WHITE_SQUARE_GUID = "114028";
        /**
         * mw 导出颜色字符串正则.
         * @type {RegExp}
         * @private
         */
        private readonly REGEX_MW_EXPORT_COLOR_STR;
        /**
         * mw 导出颜色值正则.
         * @type {RegExp}
         * @private
         */
        private readonly REGEX_MW_EXPORT_COLOR_VALUE_STR;
        /**
         * 十六进制颜色字符串正则.
         * @type {RegExp}
         * @private
         */
        private readonly REGEX_HEX_COLOR_STR;
        /**
         * mw 配置颜色字符串正则.
         * @type {RegExp}
         * @private
         */
        private readonly REGEX_MW_ARRAY_COLOR_STR;
        /**
         * mw 场景根对象 引用.
         * @type {mw.GameObject}
         * @private
         */
        private _rootObj;
        /**
         * 该平台是否 use mouse 缓存.
         * @type {boolean}
         * @private
         */
        private _useMouse;
        /**
         * 导出颜色字符串统一化.
         * @param {string} str
         * @param {boolean} fallback=false 是否 值不合法时 回退至透明.
         * @returns {mw.LinearColor | undefined}
         */
        catchMwExportColor(str: string, fallback?: boolean): mw.LinearColor | undefined;
        /**
         * 尝试捕获 mw 导出颜色字符串.
         * @param {string} str
         * @returns {IColor | undefined}
         */
        tryCatchMwExport(str: string): IColor | undefined;
        /**
         * 尝试捕获十六进制颜色字符串.
         * @param {string} str
         * @returns {IColor | undefined}
         */
        tryCatchHex(str: string): IColor | undefined;
        /**
         * 尝试捕获 mw 配置颜色字符串.
         * @param {string} str
         * @returns {IColor | undefined}
         */
        tryCatchMwArray(str: string): IColor | undefined;
        private colorLikeToMwColor;
        /**
         * return a vector whose value is vec + v.
         * @param {V} vec
         * @param {number | V} v
         * @param {V} outer return new vector when undefined.
         * @return {V}
         */
        vectorAdd<V extends mw.Vector | mw.Vector2 | mw.Vector4>(vec: V, v: number | V, outer?: V): V;
        /**
         * return a vector whose value is vec - v.
         * @param {V} vec
         * @param {number | V} v
         * @param {V} outer return new vector when undefined.
         * @return {V}
         */
        vectorSub<V extends mw.Vector | mw.Vector2 | mw.Vector4>(vec: V, v: number | V, outer?: V): V;
        /**
         *
         * return a vector whose value is vec * v.
         * @param {V} vec
         * @param {number | V} v
         * @param {V} outer return new vector when undefined.
         * @return {V}
         */
        vectorMul<V extends mw.Vector | mw.Vector2 | mw.Vector4>(vec: V, v: number | V, outer?: V): V;
        /**
         *
         * return a vector whose value is vec / v.
         * @param {V} vec
         * @param {number | V} v
         * @param {V} outer return new vector when undefined.
         * @return {V}
         */
        vectorDiv<V extends mw.Vector | mw.Vector2 | mw.Vector4>(vec: V, v: number | V, outer?: V): V;
        newWithX(vec: mw.Vector, val: number): mw.Vector;
        newWithX(vec: mw.Vector2, val: number): mw.Vector2;
        newWithX(vec: mw.Rotation, val: number): mw.Rotation;
        newWithY(vec: mw.Vector, val: number): mw.Vector;
        newWithY(vec: mw.Vector2, val: number): mw.Vector2;
        newWithY(vec: mw.Rotation, val: number): mw.Rotation;
        newWithZ(vec: mw.Vector, val: number): mw.Vector;
        newWithZ(vec: mw.Rotation, val: number): mw.Rotation;
        /**
         * 计算向量 a 至 b 之间的四元数.
         * @param lhs
         * @param rhs
         * @param fallbackAxis 回退轴. 当 lhs 与 rhs 共线时使用.
         */
        quaternionBetweenVector(lhs: mw.Vector, rhs: mw.Vector, fallbackAxis?: mw.Vector): mw.Quaternion;
        /**
         * //TODO_LviatYi [待补完]
         * 等值判断.
         * @param lhs
         * @param rhs
         * @param epsilon 精度误差.
         * @alpha
         */
        equal<T>(lhs: T, rhs: T, epsilon?: T | number): boolean;
        /**
         * Manhattan Distance.
         * 曼哈顿距离.
         * 当 b 为 null 时 将 a 视为向量. 并计算其长度平方.
         */
        manhattanDistance(a: number[] | GtkTypes.Vector2 | GtkTypes.Vector3, b?: number[] | GtkTypes.Vector2 | GtkTypes.Vector3): number;
        /**
         * Squared Euclid Distance.
         * 两点欧几里得距离的平方.
         * 当 b 为 null 时 将 a 视为向量. 并计算其长度平方.
         * @param a
         * @param b
         */
        squaredEuclideanDistance<T extends number[] | GtkTypes.Vector2 | GtkTypes.Vector3>(a: T, b?: T): number;
        /**
         * Euclid Distance.
         * 欧几里得距离.
         * 当 b 为 null 时 将 a 视为向量. 并计算其长度.
         * @param a
         * @param b
         */
        euclideanDistance<T extends number[] | GtkTypes.Vector2 | GtkTypes.Vector3>(a: T, b?: T): number;
        /**
         * 将 origin 向量围绕 axis 轴旋转 angle 角度.
         * @param origin 初始向量.
         * @param axis
         * @param angle
         */
        rotateVector(origin: mw.Vector, axis: mw.Vector, angle: number): mw.Vector;
        /**
         * 屏幕坐标系 转 UI 坐标系.
         * @param location
         * @param parent=undefined 指定的父级 Widget.
         *      - undefined 使用 UIService.canvas 作为父级.
         *      - 全无效时使用 zero.
         */
        screenToUI(location: mw.Vector2, parent?: mw.Widget): mw.Vector2;
        /**
         * 泛型获取 GameObject.
         * @param guid
         */
        getGameObjectByGuid<T>(guid: string): T | null;
        /**
         * 获取 GameObject 及其子 GameObject 下的所有指定脚本.
         * @param object
         * @param scriptCls
         * @param traverse 遍历深度. 从 1 计数.
         *      0 default. 无限遍历.
         */
        getComponent<T extends mw.Script>(object: mw.GameObject, scriptCls: AbstractAllowClass<T>, traverse?: number): T[];
        /**
         * 获取 GameObject 及其子 GameObject 下的首个指定脚本.
         * @param object
         * @param scriptCls
         * @param traverse 遍历深度. 从 1 计数.
         *      0 default. 无限遍历.
         */
        getFirstComponent<T extends mw.Script>(object: mw.GameObject, scriptCls: AbstractAllowClass<T>, traverse?: number): T | null;
        /**
         * 获取 GameObject 及其子 GameObject 下的所有指定脚本.
         * @param object
         * @param method
         * @param traverse 遍历深度. 从 1 计数.
         *      0 default. 无限遍历.
         */
        getComponentIs<T extends mw.Script>(object: mw.GameObject, method: string | ((instance: object) => boolean), traverse?: number): T[];
        /**
         * 获取 GameObject 及其子 GameObject 下的首个指定脚本.
         * @param object
         * @param method
         * @param traverse 遍历深度. 从 1 计数.
         *      0 default. 无限遍历.
         */
        getFirstComponentIs<T extends mw.Script>(object: mw.GameObject, method: string | ((instance: object) => boolean), traverse?: number): T | null;
        /**
         * 获取 GameObject 及其子 GameObject 下的所有同名 GameObject.
         * @param object
         * @param name
         */
        getGameObject(object: mw.GameObject, name: string): mw.GameObject[];
        /**
         * 获取 GameObject 及其子 GameObject 下的首个同名 GameObject.
         * @param object
         * @param name
         */
        getFirstGameObject(object: mw.GameObject, name: string): mw.GameObject | null;
        /**
         * 获取 GameObject 指定层数的所有子 GameObject.
         * @param object
         * @param traverse 遍历深度. 从 1 计数.
         *      - default undefined.
         *      - null 或 undefined 无限遍历.
         */
        getChildren(object: mw.GameObject, traverse?: number): mw.GameObject[];
        /**
         * 获取场景中的根 GameObject.
         */
        getRootGameObject(): mw.GameObject | undefined;
        /**
         * 在场景中的根 GameObject 上挂载脚本.
         */
        addRootScript<T extends mw.Script>(scriptCls: Constructor<T>): T;
        /**
         * 在场景中的根 GameObject 上获取脚本.
         * @param {Constructor<T>} scriptCls
         * @return {T | null}
         */
        getRootScript<T extends mw.Script>(scriptCls: Constructor<T>): T | null;
        /**
         * 在场景中的根 GameObject 上获取所有脚本.
         * @param {Constructor<T>} scriptCls
         * @return {T[] | null}
         */
        getRootScripts<T extends mw.Script>(scriptCls: Constructor<T>): T[] | null;
        /**
         * 角色 性别.
         */
        gender(character: mw.Character): GtkTypes.GenderTypes;
        /**
         * GameObject 是否为 Character.
         * @param obj
         */
        isCharacter(obj: mw.GameObject): obj is mw.Character;
        /**
         * 是否 playerId gameObjectId 或 obj 指向自己.
         * @scope 仅客户端.
         * @param idOrObj
         */
        isSelfCharacter(idOrObj: number | string | mw.GameObject): boolean;
        /**
         * playerId userId 与 player 归一化 player.
         * @param player
         */
        queryPlayer(player: number | string | Player): mw.Player;
        /**
         * 获取角色胶囊体 下圆心坐标.
         * @param character
         */
        getCharacterCapsuleLowerCenter(character: mw.Character): mw.Vector;
        /**
         * 获取角色胶囊体 下圆心相对坐标.
         * @param character
         */
        getCharacterCapsuleLowerCenterRelative(character: mw.Character): mw.Vector;
        /**
         * 获取角色胶囊体 下圆心 相对于角色位置 向量.
         * 主管的 不受角色属性影响.
         * @param character
         */
        getCharacterCapsuleLowerCenterVector(character: mw.Character): mw.Vector;
        /**
         * 获取角色胶囊体 底部点.
         * @param character
         */
        getCharacterCapsuleBottomPoint(character: mw.Character): mw.Vector;
        /**
         * 获取角色胶囊体 底部点.
         * @param character
         */
        getCharacterCapsuleBottomPointRelative(character: mw.Character): mw.Vector;
        /**
         * 安全设置 Character Description.
         * @param character
         * @param description
         * @return set interval character state.
         */
        safeSetDescription(character: mw.Character, description: string): boolean | null;
        /**
         * 设置 Button Guid.
         * 默认将 normalImageGuid 传播至:
         *   normalImageGuid
         *   pressedImageGuid
         *   disableImageGuid
         * @param button
         * @param normalGuid
         * @param pressedGuid
         * @param disableGuid
         */
        setButtonGuid(button: mw.Button | mw.StaleButton, normalGuid: string, pressedGuid?: string, disableGuid?: string): void;
        /**
         * 尝试设置 UI 可见性.
         * 当不需改变时不设置.
         *
         * @param ui
         * @param visibility
         *  当为 boolean 时 将按照常用策略将 true 映射为 {@link mw.SlateVisibility.Visible} 或 {@link mw.SlateVisibility.SelfHitTestInvisible}.
         * @param syncEnable 是否同步设置 enable.
         *      true default. 当 ui 为 {@link mw.Button} 或 {@link mw.StaleButton} 时 将根据 visibility 同步设置 enable.
         * @return 返回是否发生实际更改.
         */
        trySetVisibility(ui: mw.Widget | mw.UIScript, visibility: mw.SlateVisibility | boolean, syncEnable?: boolean): boolean;
        /**
         * 尝试设置 UI 文本性.
         * @desc 使用 LviatYi 等提供的 UIScriptHeader_Template. 将提供自动比较.
         * @param {mw.Text} ui
         * @param {string} text
         * @return {boolean}
         */
        trySetText(ui: {
            text: string;
        }, text: string): boolean;
        /**
         * 是否 给定平台绝对坐标 在 UI 控件内.
         * @param ui
         * @param position
         */
        isPlatformAbsoluteInWidget(position: mw.Vector2, ui: mw.Widget): boolean;
        /**
         * 获取 UI 空间下 控件的 计算后坐标.
         * @desc 计算后大小将考虑父子关系的坐标.
         * @param {Widget} ui
         * @return {mw.Vector2}
         */
        getUiResolvedPosition(ui: mw.Widget): mw.Vector2;
        /**
         * 获取 UI 空间下 控件的 计算后大小.
         * @desc 计算后大小将考虑父子关系的缩放.
         * @param {Widget} ui
         */
        getUiResolvedSize(ui: mw.Widget): mw.Vector2;
        /**
         * 获取 UiScript 构成的列表中 最上层 UiScript.
         * @desc 仅当
         * @param uis
         */
        getTopUi(uis: mw.UIScript[]): mw.UIScript | null;
        compareWidgetStack(lhs: mw.Widget, rhs: mw.Widget): number;
        /**
         * Compare widget stack who has same parent.
         * @param {mw.Widget} lhs
         * @param {mw.Widget} rhs
         * @return {number}
         */
        compareSameParentWidgetStack(lhs: mw.Widget, rhs: mw.Widget): number;
        /**
         * Check if widget is attached on root.
         * 检查是否 Widget 挂在在指定的 root 上
         * @param {mw.Widget} widget
         * @param {mw.Widget} root=undefined
         *      - undefined: 默认指向 {@link UIService.canvas}
         * @return {boolean}
         */
        isWidgetAttachOnRoot(widget: mw.Widget, root?: mw.Widget): boolean;
        /**
         * Get widget index in parent.
         * @param {mw.Widget} widget
         * @return {number}
         *     - -1: widget is not attached on parent.
         */
        getWidgetIndexInParent(widget: mw.Widget): number;
        /**
         * 获取 Ui 指定层数的所有子 Ui.
         * @param object
         * @param traverse 遍历深度. 从 1 计数.
         *      - default 1.
         *      - null 或 undefined 无限遍历.
         */
        getUiChildren<Item = mw.Widget>(object: mw.Widget, traverse?: number): Item[];
        /**
         * 使用 x,y 而非 Vector2 直接设定 UI 位置.
         * @param {Widget} ui
         * @param {number} x
         * @param {number} y
         */
        setUiPosition(ui: mw.Widget, x: number, y: number): void;
        setUiPositionX(ui: mw.Widget, x: number): void;
        setUiPositionY(ui: mw.Widget, y: number): void;
        /**
         * 使用 x,y 而非 Vector2 直接设定 UI 大小.
         * @param {Widget} ui
         * @param {number} x
         * @param {number} y
         */
        setUiSize(ui: mw.Widget, x: number, y: number): void;
        setUiSizeX(ui: mw.Widget, x: number): void;
        setUiSizeY(ui: mw.Widget, y: number): void;
        /**
         * 使用 x,y 而非 Vector2 直接设定 UI 缩放.
         * @param {Widget} ui
         * @param {number} x
         * @param {number} y
         */
        setUiScale(ui: mw.Widget, x: number, y: number): void;
        setUiScaleX(ui: mw.Widget, x: number): void;
        setUiScaleY(ui: mw.Widget, y: number): void;
        /**
         * 检查为何 UI 控件未显示.
         * @param {mw.Widget} widget
         * @returns {[WidgetNotShownReason, AttributiveNotShownWidget[]]}
         */
        whyUiNotShown(widget: mw.Widget): [
            WidgetNotShownReason,
            AttributiveNotShownWidget[]
        ];
        /**
         * UI 坐标系下 Viewport 全尺寸.
         * @return {mw.Vector2}
         */
        getUiVirtualFullSize(): mw.Vector2;
        /**
         * Viewport 纵横比. x/y.
         * @return {number}
         */
        getViewportRatio(): number;
        /**
         * 获取 窗口失焦回调.
         * @desc WindowUtil.onDefocus 的多次调用将生成多次回调.
         * @return {Delegate.SimpleDelegate<void>}
         */
        getOnWindowsBlurDelegate(): Delegate.SimpleDelegate<void>;
        /**
         * 垂直地形侦测.
         * 从起始点创建一条垂直向下的射线 返回命中到任何其他物体的命中点信息.
         * @param startPoint 起始点.
         * @param length 侦测距离.
         * @param self 自身 不参与检测.
         * @param ignoreObjectGuids 忽略物体 Guid.
         * @param debug 是否 绘制调试线.
         * @return hitPoint 命中首个点的命中信息 当未命中时返回 null.
         */
        detectVerticalTerrain(startPoint: mw.Vector, length?: number, self?: mw.GameObject, ignoreObjectGuids?: string[], debug?: boolean): mw.HitResult | undefined;
        /**
         * 垂直地形采样.
         * 从起始平台创建一条垂直向下的射线 返回命中到任何其他物体的命中点位置.
         * @param {IPoint2} startPoint
         * @param {number} platform
         * @param {number} length
         * @param {string[]} ignores
         * @param {boolean} ignoreByType
         * @param {boolean} traceSkeletonOnly
         * @param {mw.GameObject} self
         * @param {boolean} down
         * @param {boolean} debug
         * @return {mw.HitResult[] | undefined}
         */
        sampleVerticalTerrain(startPoint: IPoint2, platform: number, length: number, down?: boolean, ignores?: string[], ignoreByType?: boolean, traceSkeletonOnly?: boolean, self?: mw.GameObject, debug?: boolean): mw.HitResult[] | undefined;
        /**
         * 忽略自身的 GameObject 垂直地形侦测.
         * @param self
         * @param length
         * @param ignoreObjectGuids
         * @param debug
         */
        detectGameObjectVerticalTerrain(self: mw.GameObject, length?: number, ignoreObjectGuids?: string[], debug?: boolean): mw.HitResult | null;
        /**
         * 角色正下方地形侦测.
         * 从 角色角色胶囊体 下圆心 创建一条垂直向下的射线 返回命中到任何其他物体的命中点信息.
         * @param length 最大探测距离.
         * @param ignoreObjectGuids 忽略物体 Guid.
         * @param debug 是否 绘制调试线.
         * @return hitPoint 命中首个点的命中信息 当未命中时返回 null.
         */
        detectCurrentCharacterTerrain(length?: number, ignoreObjectGuids?: string[], debug?: boolean): mw.HitResult;
        /**
         * 计算角色在地形上运动时的倾倒角.
         * 返回值为以正交系轴为参考.
         * @param character
         * @param ignoreObjectGuids 忽略物体 Guid.
         * @return [pitch, roll] 旋转角度.
         */
        calCentripetalAngle(character: mw.Character, ignoreObjectGuids?: string[]): number[];
        /**
         * 绘制 Debug 用射线.
         * @param startPoint
         * @param direction
         * @param distance
         */
        drawRay(startPoint: mw.Vector, direction: mw.Vector, distance?: number): void;
        /**
         * 是否 两点之间存在合法路径.
         * @param origin
         * @param dest
         */
        hasValidPath(origin: Vector, dest: Vector): boolean;
        /**
         * KV 方式查询 ModuleData.
         * @param {string} moduleDataName
         * @param {string} userId
         * @param {string} defaultValue
         * @return {Promise<string>}
         */
        queryModuleData<T extends object>(moduleDataName: string, userId: string, defaultValue?: T): Promise<T>;
        /**
         * KV 方式更新 ModuleData.
         * @param {string} moduleDataName
         * @param {string} userId
         * @param {string} value
         * @return {Promise<boolean>}
         */
        updateModuleData(moduleDataName: string, userId: string, value: object): Promise<boolean>;
        /**
         * 获取 ModuleData Key.
         * @param {string} userId
         * @param {string} moduleDataName
         * @return {string}
         */
        getModuleDataKey(userId: string, moduleDataName: string): string;
        /**
         * 获取当前游戏版本.
         */
        getEditorVersion(): EditorVersion;
        /**
         * 是否 当前平台默认使用鼠标.
         * @return {boolean}
         */
        get useMouse(): boolean;
    }
    /**
     * Prototype of a class constructor.
     */
    export type Constructor<TResult> = new (...args: Array<unknown>) => TResult;
    /**
     * Constructor of an abstract-allow class.
     */
    export type AbstractAllowClass<TResult> = Constructor<TResult> | Function;
    /**
     * A function taking one argument and returning a boolean result.
     * TArg void default.
     */
    export type Predicate<TArg = void> = (arg: TArg) => boolean;
    /**
     * A function taking no argument and returning a result.
     */
    export type Expression<TResult> = () => TResult;
    /**
     * A function taking any arguments and returning any result.
     */
    export type Method = (...params: unknown[]) => unknown;
    /**
     * Type of Value in enum.
     */
    export type ValueTypeInEnum<E> = E[keyof E];
    /**
     * Types of ParamList in Func.
     * @example
     * function testFunc(a: number, b: string, c: boolean) {
     *     mw.console.log(a, b, c);
     * }
     *
     * class Foo {
     *     testFunc(a: number, b: string, c: boolean) {
     *         mw.console.log(a, b, c);
     *     }
     * }
     *
     * const paramList: ParamListInFunc<typeof testFunc> = [1, "2", false];
     * const paramListInClass: ParamListInFunc<Foo["testFunc"]> = [1, "2", true];
     */
    export type ParamListInFunc<T> = T extends (...args: infer P) => unknown ? P : never;
    /**
     * Types of Plural Optional.
     * @desc If T is Array, return T, else return [T].
     */
    export type PluralOptional<T> = T extends Array<unknown> ? T : [
        T
    ];
    /**
     * Getter.
     */
    export type Getter<T> = () => T;
    /**
     * Setter.
     */
    export type Setter<T> = (val: T) => void;
    const _: unique symbol;
    /**
     * NoOverride.
     * @desc you shouldn't override the function return this type.
     * @desc 你不应该重写返回此类型的函数.
     */
    export type NoOverride = {
        [_]: typeof _;
    };
    export namespace GtkTypes {
        interface Vector2 {
            x: number;
            y: number;
        }
        interface Vector3 {
            x: number;
            y: number;
            z: number;
        }
        type VectorLike = Vector2 | Vector3;
        type TimeFormatDimensionFlagsLike = TimeFormatDimensionFlags | Tf;
        /**
         * 时间值维度 枚举.
         *
         * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
         * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
         * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
         * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
         * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
         * @author LviatYi
         * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
         * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
         */
        enum TimeFormatDimensionFlags {
            /**
             * 毫秒.
             */
            Millisecond = 2,
            /**
             * 秒.
             */
            Second = 4,
            /**
             * 分.
             */
            Minute = 8,
            /**
             * 时.
             */
            Hour = 16,
            /**
             * 日.
             */
            Day = 32,
            /**
             * 月.
             */
            Month = 64,
            /**
             * 年.
             */
            Year = 128
        }
        /**
         * 时间值维度 枚举 简写.
         * @desc 等价于 {@link TimeFormatDimensionFlags}.
         */
        enum Tf {
            /**
             * 毫秒.
             */
            Ms = 2,
            /**
             * 秒.
             */
            S = 4,
            /**
             * 分.
             */
            M = 8,
            /**
             * 时.
             */
            H = 16,
            /**
             * 日.
             */
            D = 32,
            /**
             * 月.
             */
            Mon = 64,
            /**
             * 年.
             */
            Y = 128
        }
        /**
         * 性别 枚举.
         *
         * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
         * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
         * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
         * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
         * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
         * @author LviatYi
         * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
         * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
         */
        enum GenderTypes {
            /**
             * 武装直升机.
             */
            Helicopter = 0,
            /**
             * 女性.
             */
            Female = 1,
            /**
             * 男性.
             */
            Male = 2
        }
        /**
         * 精度 枚举.
         */
        enum Epsilon {
            /**
             * 正常.
             * @type {Epsilon.Normal}
             */
            Normal = 0.000001,
            /**
             * 低精度.
             * @type {Epsilon.Low}
             */
            Low = 0.0001,
            /**
             * 高精度.
             * @type {Epsilon.High}
             */
            High = 1e-8,
            /**
             * 超高精度.
             * @type {Epsilon.ExtraHigh}
             */
            ExtraHigh = 1e-12,
            /**
             *
             * @type {Epsilon.Scientific}
             */
            Scientific = 1e-16
        }
        /**
         * 时间间隔 枚举.
         */
        enum Interval {
            None = 0,
            Hz144 = 6.944444444444445,
            Hz120 = 8.333333333333334,
            Hz90 = 11.11111111111111,
            Hz60 = 16.666666666666668,
            Hz30 = 33.333333333333336,
            Sensitive = 100,
            Fast = 500,
            PerSec = 1000,
            Slow = 3000,
            Logy = 5000,
            PerMin = 60000,
            PerHour = 3600000
        }
    }
    export interface IColor {
        r: number;
        g: number;
        b: number;
        a?: number;
    }
    export type AnyPoint = IPoint2 | IPoint3;
    /**
     * Point in 2D.
     */
    export interface IPoint2 {
        x: number;
        y: number;
    }
    /**
     * Point in 3D.
     */
    export interface IPoint3 {
        x: number;
        y: number;
        z: number;
    }
    export interface IEditorVersion {
        main: number;
        sub?: number;
        patch?: number;
    }
    /**
     * Editor Version.
     */
    export class EditorVersion implements IEditorVersion {
        main: number;
        sub?: number;
        patch?: number;
        constructor(main: number, sub?: number, patch?: number);
        /**
         * 版本比较.
         * @desc 将忽略 undefined 字段，且遇到后不再继续比较.
         * @param {EditorVersion} rhs
         * @returns {number}
         *      >0 自身较新.
         *      =0 版本一直.
         *      <0 自身较旧.
         */
        compare(rhs: IEditorVersion): number;
    }
    /**
     * 控件不显示原因.
     * @flag
     */
    export enum WidgetNotShownReason {
        Null = 0,
        /**
         * 透明的.
         * @desc render opacity 为 0.
         */
        Transparent = 1,
        /**
         * 隐藏的.
         * @desc visibility = {@link mw.Visibility.Hidden}.
         */
        Hidden = 2,
        /**
         * 收缩的.
         * @desc visibility = {@link mw.Visibility.Collapsed}.
         */
        Collapsed = 4,
        /**
         * 越界的.
         * @desc 超出 Viewport.
         */
        OutOfView = 8,
        /**
         * 过小的.
         * @desc 面积小于 10 px.
         * @desc x * y * scale
         */
        TooSmall = 16,
        /**
         * 未绘制按钮.
         * @desc 作为 Button 时，未绘制图片.
         */
        BtnImageNoDraw = 32,
        /**
         * 未挂载.
         * @desc 未挂载于 ViewPort.
         */
        NotAttached = 64
    }
    /**
     * Widget 未显示原因.
     */
    export interface AttributiveNotShownWidget {
        gap: mw.Widget;
        reason: WidgetNotShownReason;
    }
    /**
     * Delegate. 委托.
     * @desc provide some useful delegate.
     * @desc ---
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export namespace Delegate {
        interface IDelegate<T, Func extends Function> {
            /**
             * add a delegate.
             * @param {Func extends Funciton} func
             * @param thisArg
             * @param {number} alive call times.
             *      default = -1. 无限制.
             * @param {boolean} repeatable  whether can be added repeatedly.
             *      default = false.
             * @return {boolean}
             *      - true success.
             *      - false already exist.
             */
            add(func: Func, alive?: number, repeatable?: boolean, thisArg?: unknown): boolean;
            /**
             * add a delegate. can be only invoke once.
             * behaves the same as add(func, 1)
             * @param {Func extends Function} func
             * @param thisArg
             * @return {boolean}
             *      - true success.
             *      - false already exist.
             */
            once(func: Func, thisArg?: unknown): boolean;
            /**
             * add a delegate as the only alive callback.
             * @desc remove all and add this.
             * @param func
             * @param thisArg
             * @return {boolean}
             *      - true success.
             *      - false already exist.
             */
            only(func: Func, thisArg?: unknown): boolean;
            /**
             * invoke delegate.
             * @desc you should not rely on the add order.
             * @param param
             */
            invoke(...param: PluralOptional<T>): void;
            /**
             * remove a delegate.
             * @param func
             * @param thisArg
             * @return boolean
             *      - true success.
             *      - false already exist.
             */
            remove(func: Func, thisArg?: unknown): boolean;
        }
        export type SimpleDelegateFunction<T = void> = (...param: PluralOptional<T>) => void;
        export type ConditionDelegateFunction<T = void> = (...param: PluralOptional<T>) => boolean;
        abstract class DelegateInfo {
            callback: Function;
            hitPoint: number;
            thisArg: unknown;
            protected constructor(callback: Function, hitPoint: number, thisArg?: unknown);
            equal(callback: Function, thisArg?: unknown): boolean;
        }
        class SimpleDelegateInfo<T> extends DelegateInfo {
            callback: SimpleDelegateFunction<T>;
            constructor(callback: SimpleDelegateFunction<T>, hitPoint: number, thisArg?: unknown);
        }
        class ConditionDelegateInfo<T> extends DelegateInfo {
            callback: ConditionDelegateFunction<T>;
            constructor(callback: ConditionDelegateFunction<T>, hitPoint: number, thisArg?: unknown);
        }
        abstract class Delegate<DI extends DelegateInfo> {
            protected _callbackInfo: DI[];
            /**
             * try to get the index of an existing delegate.
             * @param func
             * @param thisArg
             * @return index func index. -1 not exist.
             * @protected
             */
            protected getIndex(func: Function, thisArg?: unknown): number;
            /**
             * remove Func by index.
             * @param index
             * @protected
             */
            protected removeByIndex(index: number): void;
            private _clearable;
            /**
             * remove all delegate.
             */
            clear(): void;
            /**
             * whether remove all delegate is enable.
             */
            get clearable(): boolean;
            /**
             * set clearable to false.
             */
            setProtected(): this;
        }
        /**
         * Simple Delegate.
         * 简单委托.
         *
         * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
         * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
         * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
         * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
         * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
         * @author LviatYi
         * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
         * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
         */
        export class SimpleDelegate<T = void> extends Delegate<SimpleDelegateInfo<T>> implements IDelegate<T, SimpleDelegateFunction<T>> {
            add(func: SimpleDelegateFunction<T>, alive?: number, repeatable?: boolean, thisArg?: unknown): boolean;
            once(func: SimpleDelegateFunction<T>, thisArg?: unknown): boolean;
            only(func: SimpleDelegateFunction<T>, thisArg?: unknown): boolean;
            invoke(...param: PluralOptional<T>): void;
            remove(func: SimpleDelegateFunction<T>, thisArg?: unknown): boolean;
        }
        /**
         * Condition Delegate
         * 条件委托.
         *
         * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
         * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
         * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
         * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
         * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
         * @author LviatYi
         * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
         * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
         */
        export class ConditionDelegate<T = void> extends Delegate<ConditionDelegateInfo<T>> implements IDelegate<T, ConditionDelegateFunction<T>> {
            add(func: ConditionDelegateFunction<T>, alive?: number, repeatable?: boolean, thisArg?: unknown): boolean;
            once(func: ConditionDelegateFunction<T>, thisArg?: unknown): boolean;
            only(func: ConditionDelegateFunction<T>, thisArg?: unknown): boolean;
            invoke(...param: PluralOptional<T>): void;
            remove(func: ConditionDelegateFunction<T>, thisArg?: unknown): boolean;
        }
        export {};
    }
    /**
     * Singleton factory.
     * To create a Singleton, extends Singleton<YourClass>().
     * @example
     * class UserDefineSingleton extends Singleton<UserDefineSingleton>() {
     *      public name: string;
     *
     *      public someSubMethod(): void {
     *          mw.console.log("someSubMethod in UserDefineSingleton called");
     *      }
     *
     *      protected onConstruct(): void {
     *          this.name = "user define singleton";
     *      }
     *  }
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @constructor
     * @beta
     */
    export function Singleton<T>(): {
        new (): {
            createTime: Date;
            /**
             * override when need extend constructor.
             */
            onConstruct(): void;
        };
        _instance: T;
        getInstance(): T;
    };
    /**
     * Random Generator.
     * generate a number array and convert to supported types.
     */
    export class RandomGenerator {
        private _result;
        toVector3(fill?: number): mw.Vector;
        toVector2(fill?: number): mw.Vector2;
        toRotation(fill?: number): mw.Rotation;
        from(value: number[]): this;
        /**
         * generate random array.
         * @param {number | number[]} length length or scale.
         * @param {() => number} randomFunc random function.
         *      - default Math.random
         * @return {this}
         */
        random(length: number | number[], randomFunc?: () => number): this;
        /**
         * generate random point on unit circle.
         * @return {this}
         */
        randomCircle(): this;
        /**
         * handle result by index.
         * @param {(value: number, index: number) => number} handler
         * @return {this}
         */
        handle(handler: (value: number, index: number) => number): this;
    }
    /**
     * advance switch.
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export class Switcher {
        private _cases;
        private _callbacks;
        private _default;
        /**
         * build judge case.
         * @param callback
         * @param values
         *  when value is null or undefined, it will be ignored.
         */
        case(callback: Method, ...values: (boolean | number)[]): this;
        /**
         * build judge default case.
         * @param callback
         */
        default(callback: Method): this;
        /**
         * judge values.
         * @param values
         */
        judge(...values: (boolean | number)[]): void;
    }
    /**
     * 分帧器.
     * @desc 为某个行为设定频率上限.
     * @desc ---
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author minjia.zhang
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export class Regulator {
        private _lastUpdates;
        /**
         * 更新间隔. ms.
         */
        updateInterval: number;
        /**
         * 生命值.
         * @desc 阶段时间内的可用次数.
         * @type {number}
         */
        hitPoint: number;
        /**
         * 尝试申请 下一次.
         */
        request(): boolean;
        /**
         * @param updateInterval 更新间隔. ms
         * @param hitPoint 时段内次数.
         */
        constructor(updateInterval?: number, hitPoint?: number);
        /**
         * 频率. 每秒 ready 次数.
         */
        frequency(val: number): this;
        /**
         * 间隔.
         * @param val
         */
        interval(val: number): this;
        /**
         * 获取只读的更新时间列表.
         */
        getRecord(): ReadonlyArray<number>;
    }
    /**
     * 可暂时回收的.
     */
    export interface IRecyclable {
        /**
         * 使能. 赋能. 激活.
         * @param param
         */
        makeEnable(...param: unknown[]): void;
        /**
         * 去使能. 回收. 去活.
         */
        makeDisable(): void;
        /**
         * 析构函数.
         */
        makeDestroy?(): void;
    }
    /**
     * 对象池选项.
     */
    export interface IObjectPoolOption<T> {
        /**
         * 构造函数.
         * @desc 用于在对象池空时生成新实例.
         * @desc 与构造函数二选一即可.
         * @desc 构造函数优先.
         */
        construct?: Constructor<T>;
        /**
         * 实例生成函数.
         * @desc 用于在对象池空时生成新实例.
         * @desc 与构造函数二选一即可.
         * @desc 构造函数优先.
         * @return {T}
         */
        generator?: () => T;
        /**
         * 自动减半时间间隔. ms.
         *      - 0 [不推荐] 不开启自动回收.
         */
        autoHalvingInterval?: number;
        /**
         * 最低阈值.
         */
        floor?: number;
        /**
         * 立即按照最低阈值生成实例.
         * @desc default false.
         */
        instantly?: boolean;
    }
    /**
     * 对象池.
     * @desc 执行自动垃圾回收.
     * @desc 可回收对象需实现 {@link IRecyclable} 接口.
     * @desc ---
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export class ObjectPool<T extends IRecyclable> {
        private readonly _itemConstructor;
        private readonly _itemGenerator;
        private _pool;
        private _tempPool;
        private _lastAutoRecycleTime;
        private readonly _floor;
        private _autoHalvingInterval;
        get autoHalvingInterval(): number;
        /**
         * 自动减半时间间隔. ms.
         *      - 0 [不推荐] 不开启自动回收.
         *      - 5 * 60e3. 5 min. 默认的.
         */
        set autoHalvingInterval(value: number);
        private _autoHalvingTimer;
        private getNew;
        /**
         * 归还事件.
         * @type {Delegate.SimpleDelegate<T>}
         */
        readonly onPush: Delegate.SimpleDelegate<T>;
        /**
         * 借出事件.
         * @type {Delegate.SimpleDelegate<T>}
         */
        readonly onPop: Delegate.SimpleDelegate<T>;
        /**
         * 垃圾回收事件.
         * @type {Delegate.SimpleDelegate<T[]>}
         */
        readonly onRecycle: Delegate.SimpleDelegate<[
            T[]
        ]>;
        /**
         * 清除事件.
         * @type {Delegate.SimpleDelegate<T[]>}
         */
        readonly onClear: Delegate.SimpleDelegate<[
            T[]
        ]>;
        constructor(option: IObjectPoolOption<T>);
        /**
         * 使池回收一个对象.
         * @param {T} rub
         */
        push(...rub: T[]): void;
        /**
         * 从池中取出一个对象 并赋初值..
         * @param {any} params
         */
        pop(...params: ParamListInFunc<T["makeEnable"]>): T | null;
        /**
         * 临时回收一个对象.
         * @desc 临时回收的对象直到 {@link finishTemp} 后才调用 {@link makeDisable}.
         * @desc 减少一次 {@link makeDisable} 调用
         * @param {T} rub
         */
        tempPush(...rub: T[]): void;
        /**
         * 结束临时回收.
         * @desc 立即回收所有临时回收对象
         */
        finishTemp(): void;
        /**
         * 立即执行自动垃圾回收策略.
         */
        doRecycle(): void;
        /**
         * 清空池.
         */
        clear(): void;
        private autoRecycle;
    }
    /**
     * HyperText 超文本解析器.
     * @desc 将超文本字符串转换为 Dom 树.
     * @desc 提供字符串切片功能.
     * @desc ---
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     */
    export class HyperText {
        static readonly RegTag: RegExp;
        static readonly RegElement: RegExp;
        tag: string | undefined;
        attr: string;
        content: (string | HyperText)[];
        private _length;
        get length(): number;
        /**
         * 转换为严格的超文本.
         * @desc 严格超文本将补全未闭合的标签.
         * @param {string} str
         * @return {string | undefined} 当传入的超文本字符串非法时 返回 undefined.
         *      - 当标签发生交错时 无效.
         */
        static toStrictHyperText(str: string): string | undefined;
        /**
         * 从超文本字符串构建.
         * @param {string} str
         * @param {string} tag
         * @param {string} attr
         * @param {boolean} strict=true 是否 启用严格检查.
         *      - false 需保证提供了严格有效的超文本字符串.
         * @return {HyperText | undefined} 当传入的超文本字符串非法时 返回 undefined.
         *      - 当标签发生交错时 无效.
         */
        static fromString(str: string, tag?: string, attr?: string, strict?: boolean): HyperText | undefined;
        /**
         * 切片.
         * @param {number} start
         * @param {number} end
         * @return {string}
         */
        slice(start?: number, end?: number): string;
    }
    const Gtk: GToolkit;
    export default Gtk;
}
