{"version":3,"file":"Log4Ts.js","sources":["../../../../depend/log4ts/Log4Ts.ts"],"sourcesContent":["/**\r\n * Log4Ts.\r\n * pure TS 日志管理器.\r\n * @desc 提供统一的日志管理.\r\n * @desc 以及简单的过滤功能.\r\n * @nothrow\r\n * @desc ---\r\n * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟\r\n * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄\r\n * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄\r\n * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄\r\n * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n * @author LviatYi\r\n * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip\r\n * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z\r\n * @version 1.4.0\r\n */\r\nclass Log4Ts {\r\n//#region Config\r\n    /**\r\n     * 日志等级.\r\n     */\r\n    public debugLevel: DebugLevels = DebugLevels.Dev;\r\n\r\n    private _config: Log4TsConfig = new Log4TsConfig();\r\n\r\n    private _cache_chunk: string[] = [];\r\n\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n\r\n    /**\r\n     * debug log.\r\n     * @param announcer announcer with name.\r\n     *      when null or undefined, will print as second indent.\r\n     * @param messages text.\r\n     */\r\n    public log = (announcer: Announcer, ...messages: (LogString | Error | string | unknown)[]): void => {\r\n        if (this.debugLevel !== DebugLevels.Dev || !this._config.checkAnnouncer(announcer)) return;\r\n        const logFunc: LogFunc = this._config.logFunc;\r\n\r\n        this.print(logFunc, announcer, ...messages);\r\n    };\r\n\r\n    /**\r\n     * debug warn.\r\n     * @param announcer announcer with name.\r\n     *      when null or undefined, will print as second indent.\r\n     * @param messages text.\r\n     */\r\n    public warn = (announcer: Announcer, ...messages: (LogString | Error | string | unknown)[]): void => {\r\n        if (this.debugLevel === DebugLevels.Silent || !this._config.checkAnnouncer(announcer)) return;\r\n        const logFunc: LogFunc = this._config.logFunc;\r\n\r\n        this.print(logFunc, announcer, ...messages);\r\n    };\r\n\r\n    /**\r\n     * debug error.\r\n     * @param announcer announcer with name.\r\n     *      when null or undefined, will print as second indent.\r\n     * @param messages text.\r\n     */\r\n    public error = (announcer: Announcer, ...messages: (LogString | Error | string | unknown)[]): void => {\r\n        if (this.debugLevel === DebugLevels.Silent || !this._config.checkAnnouncer(announcer)) return;\r\n        const logFunc: LogFunc = this._config.errorFunc;\r\n\r\n        this.print(logFunc, announcer, ...messages);\r\n    };\r\n\r\n    /**\r\n     * 设置配置.\r\n     * @param config\r\n     */\r\n    public setConfig(config: Log4TsConfig = undefined): this {\r\n        this._config = config ?? new Log4TsConfig();\r\n        return this;\r\n    }\r\n\r\n    private print(logFunc: LogFunc, announcer: Announcer, ...messages: (LogString | string | unknown)[]) {\r\n        for (const msg of messages) {\r\n            let msgStr: string;\r\n            if (typeof msg === \"string\") {\r\n                msgStr = msg;\r\n            } else if (typeof msg === \"function\") {\r\n                try {\r\n                    msgStr = msg();\r\n                } catch (e) {\r\n                    msgStr = \"error occurs in LogString.\";\r\n                }\r\n            } else if (typeof msg === \"object\" && \"name\" in msg && \"stack\" in msg && \"message\" in msg) {\r\n                msgStr = msg.stack.toString();\r\n            } else {\r\n                msgStr = msg?.toString() ?? \"message obj cant be convert to string.\";\r\n            }\r\n            try {\r\n                const logStr = `${\r\n                    announcer && announcer.name ?\r\n                        announcer.name + \":\" :\r\n                        `   `\r\n                } ${msgStr}`;\r\n                this._cache_chunk.push(logStr);\r\n                logFunc(logStr);\r\n            } catch (e) {\r\n            }\r\n            this.checkHandleChunk();\r\n\r\n            announcer = null;\r\n        }\r\n    }\r\n\r\n    private checkHandleChunk() {\r\n        if (this._cache_chunk.length >= this._config.chunkSize) {\r\n            this.forceHandleChunk();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 立即使用 Handler 处理 chunk 池 并清空 chunk.\r\n     */\r\n    public forceHandleChunk() {\r\n        try {\r\n            this._config.chunkHandler?.(this._cache_chunk);\r\n            this._cache_chunk.length = 0;\r\n        } catch (e) {\r\n            mw.console.log(`Log4Ts Self: chunkHandler error. ${e}`);\r\n            mw.console.log(e.stack);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 日志等级.\r\n */\r\nexport enum DebugLevels {\r\n    /**\r\n     * 无日志.\r\n     */\r\n    Silent = 0,\r\n    /**\r\n     * 信息. 包含 warn error.\r\n     */\r\n    Info,\r\n    /**\r\n     * 开发. 包含 log warn error.\r\n     */\r\n    Dev,\r\n}\r\n\r\n//#region Type\r\n/**\r\n * 日志 lambda.\r\n */\r\nexport type LogString = (...params: unknown[]) => string;\r\n\r\n/**\r\n * 宣称者.\r\n */\r\nexport type Announcer = { name: string };\r\n\r\n/**\r\n * 宣称者或宣称者名.\r\n */\r\nexport type NameOrAnnouncer = string | Announcer;\r\n\r\n/**\r\n * 日志打印函数.\r\n */\r\nexport type LogFunc = (...data: unknown[]) => void;\r\n\r\n/**\r\n * 日志缓存分块处理器.\r\n */\r\nexport type ChunkHandler = (chunk: string[]) => void;\r\n\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n\r\nexport class Log4TsConfig {\r\n//#region Constant\r\n    private static readonly DEFAULT_CHUNK_SIZE = 50;\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n\r\n//#region Member\r\n    private _lastValidAnnouncer: Announcer = null;\r\n\r\n    private _logFunc: LogFunc = console.log;\r\n\r\n    private _warnFunc: LogFunc = console.warn;\r\n\r\n    private _errorFunc: LogFunc = console.error;\r\n\r\n    private _cacheChunkHandler: ChunkHandler | null = null;\r\n\r\n    private _chunkSize: number = Log4TsConfig.DEFAULT_CHUNK_SIZE;\r\n\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n\r\n    public get logFunc(): LogFunc {\r\n        return this._logFunc;\r\n    }\r\n\r\n    public get warnFunc(): LogFunc {\r\n        return this._warnFunc;\r\n    }\r\n\r\n    public get errorFunc(): LogFunc {\r\n        return this._errorFunc;\r\n    }\r\n\r\n    /**\r\n     * chunk 池大小.\r\n     * @return {number}\r\n     */\r\n    public get chunkSize(): number {\r\n        return this._chunkSize;\r\n    }\r\n\r\n    /**\r\n     * 白名单.\r\n     * @desc only announcers in _whiteList could be printed.\r\n     */\r\n    private _whiteList: Set<string> = new Set<string>();\r\n\r\n    /**\r\n     * 黑名单.\r\n     * @desc announcers in _blackList will never be printed.\r\n     */\r\n    private _blackList: Set<string> = new Set<string>();\r\n\r\n    private _filter: (name: string) => boolean = null;\r\n\r\n    /**\r\n     * 设置 log 函数.\r\n     * @param func\r\n     */\r\n    public setLogFunc(func: LogFunc): this {\r\n        this._logFunc = func;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置 warn 函数.\r\n     * @param func\r\n     */\r\n    public setWarnFunc(func: LogFunc): this {\r\n        this._warnFunc = func;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置 error 函数.\r\n     * @param func\r\n     */\r\n    public setErrorFunc(func: LogFunc): this {\r\n        this._errorFunc = func;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置 chunk 池大小.\r\n     * @param {number} size\r\n     *  - default 1.\r\n     *  - 未主动调用前 默认值为 {@link Log4TsConfig.DEFAULT_CHUNK_SIZE}.\r\n     * @return {this}\r\n     */\r\n    public setChunkSize(size: number = 1): this {\r\n        this._chunkSize = size;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置 **chunk 池** 处理器.\r\n     * @desc 当 chunk 池满时自动触发，并清除 chunk 池.\r\n     * @desc chunk 池为日志的缓存池，用于处理大量日志时的分块输出.\r\n     * @desc 当 chunk 池中的日志数量达到 {@link chunkSize} 时，池满.\r\n     * @param {ChunkHandler} handler\r\n     * @return {this}\r\n     */\r\n    public setChunkHandler(handler: ChunkHandler): this {\r\n        this._cacheChunkHandler = handler;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * chunk 池处理器.\r\n     * @friend {@link Log4Ts}\r\n     */\r\n    public get chunkHandler(): ChunkHandler | null {\r\n        return this._cacheChunkHandler;\r\n    }\r\n\r\n    /**\r\n     * 添加 白名单.\r\n     * @param names\r\n     */\r\n    public addWhiteList(...names: (NameOrAnnouncer | NameOrAnnouncer[])[]): this {\r\n        names.forEach(name => {\r\n            if (Array.isArray(name)) {\r\n                name.forEach(n => {\r\n                    if (typeof n !== \"string\") n = n.name;\r\n                    this._whiteList.add(n);\r\n                });\r\n            } else {\r\n                if (typeof name !== \"string\") name = name.name;\r\n                this._whiteList.add(name);\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 添加 黑名单.\r\n     * @param names\r\n     */\r\n    public addBlackList(...names: (NameOrAnnouncer | NameOrAnnouncer[])[]): this {\r\n        names.forEach(name => {\r\n            if (Array.isArray(name)) {\r\n                name.forEach(n => {\r\n                    if (typeof n !== \"string\") n = n.name;\r\n                    this._blackList.add(n);\r\n                });\r\n            } else {\r\n                if (typeof name !== \"string\") name = name.name;\r\n                this._blackList.add(name);\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设定过滤器.\r\n     * @desc 当过滤器存在时 仅过滤器生效.\r\n     * @desc 以支持更多的客制化过滤选项.\r\n     * @param filter\r\n     */\r\n    public setFilter(filter: (name: string) => boolean): this {\r\n        this._filter = filter;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 重置过滤器.\r\n     * @desc 重置后将使用白名单与黑名单进行过滤.\r\n     */\r\n    public resetFilter(): this {\r\n        this._filter = null;\r\n        return this;\r\n    }\r\n\r\n    private inWhiteList(announcer: Announcer): boolean {\r\n        return this._whiteList.size === 0 || (announcer.name ? this._whiteList.has(announcer.name) : false);\r\n    }\r\n\r\n    private inBlackList(announcer: Announcer): boolean {\r\n        return announcer.name ? this._blackList.has(announcer.name) : false;\r\n    }\r\n\r\n    /**\r\n     * 检查 Announcer 是否可打印.\r\n     * @param announcer\r\n     */\r\n    public checkAnnouncer(announcer: Announcer): boolean {\r\n        if (announcer == null) {\r\n            if (this._lastValidAnnouncer == null) return false;\r\n        } else this._lastValidAnnouncer = announcer;\r\n\r\n        return this._filter ?\r\n            this._filter(this._lastValidAnnouncer.name) :\r\n            this.inWhiteList(this._lastValidAnnouncer) && !this.inBlackList(this._lastValidAnnouncer);\r\n    }\r\n\r\n//#region Shorter Builder\r\n    /**\r\n     * short for {@link setFilter}.\r\n     * @param filter\r\n     */\r\n    public sF(filter: (name: string) => boolean): this {\r\n        return this.setFilter(filter);\r\n    }\r\n\r\n    /**\r\n     * short for {@link resetFilter}.\r\n     */\r\n    public rsF() {\r\n        return this.resetFilter();\r\n    }\r\n\r\n    /**\r\n     * short for {@link setLogFunc}.\r\n     * @param func\r\n     * @constructor\r\n     */\r\n    public SLog(func: LogFunc) {\r\n        this.setLogFunc(func);\r\n    }\r\n\r\n    /**\r\n     * short for {@link setWarnFunc}.\r\n     * @param func\r\n     * @constructor\r\n     */\r\n    public SWarn(func: LogFunc) {\r\n        this.setWarnFunc(func);\r\n    }\r\n\r\n    /**\r\n     * short for {@link setErrorFunc}.\r\n     * @param func\r\n     * @constructor\r\n     */\r\n    public SError(func: LogFunc) {\r\n        this.setErrorFunc(func);\r\n    }\r\n\r\n    /**\r\n     * short for {@link addWhiteList}.\r\n     * @param names\r\n     */\r\n    public aW(...names: (NameOrAnnouncer | NameOrAnnouncer[])[]) {\r\n        return this.addWhiteList(...names);\r\n    }\r\n\r\n    /**\r\n     * short for {@link addBlackList}.\r\n     * @param names\r\n     */\r\n    public aB(...names: (NameOrAnnouncer | NameOrAnnouncer[])[]) {\r\n        return this.addBlackList(...names);\r\n    }\r\n\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n}\r\n\r\n//#region Export\r\nexport default new Log4Ts().setConfig();\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄"],"names":[],"mappings":"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"}