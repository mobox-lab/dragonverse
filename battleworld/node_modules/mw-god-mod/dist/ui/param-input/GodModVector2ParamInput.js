import { ParamInputSizeY } from '../param-base/IGodModParamInput.js';
import Gtk, { Delegate } from 'gtoolkit';
import { Lui, TextField, Property, PropertyUtil } from 'mw-lynx-ui';
import { GodModPanelSizeX } from '../base/GodModPanelConst.js';
import { GodModParamInputBase } from '../param-base/GodModParamInputBase.js';
import Log4Ts from 'mw-log4ts';

var Color = Lui.Asset.Color;
/**
 * GodModVector2ParamInput.
 *
 * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
 * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
 * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
 * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
 * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
 * @author LviatYi
 * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
 * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
 * @internal
 */
class GodModVector2ParamInput extends GodModParamInputBase {
    //#region Lui Component
    static create() {
        let input = new GodModVector2ParamInput();
        input._inputX = TextField.create({
            label: "x",
            size: { x: (GodModPanelSizeX - 5) / 2 + 5, y: ParamInputSizeY },
            padding: { right: 5 },
            color: {
                primary: Color.Blue,
                secondary: Color.Blue200,
            },
            fontSize: 16,
            fontStyle: mw.UIFontGlyph.Light,
            corner: Property.Corner.Top,
            type: mw.InputTextLimit.LimitToFloat,
        }).attach(input);
        input._inputY = TextField.create({
            label: "y",
            size: { x: (GodModPanelSizeX - 5) / 2, y: ParamInputSizeY },
            color: {
                primary: Color.Blue,
                secondary: Color.Blue200,
            },
            fontSize: 16,
            fontStyle: mw.UIFontGlyph.Light,
            corner: Property.Corner.Top,
            type: mw.InputTextLimit.LimitToFloat,
        }).attach(input);
        Gtk.setUiPositionX(input._inputY.root, 202.5);
        Gtk.setUiSize(input.root, GodModPanelSizeX, ParamInputSizeY);
        return input;
    }
    ;
    //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
    //#region IGodModParamInputParametric
    getParam() {
        return new mw.Vector2(Number(this._inputX.text), Number(this._inputY.text));
    }
    setParam(p) {
        this._inputX.setContent(p?.x?.toString() ?? "");
        this._inputY.setContent(p?.y?.toString() ?? "");
    }
    setValidator(validator) {
        this._validator = validator;
    }
    setCustomLabel(label) {
        if (!label)
            return;
        Log4Ts.warn(GodModVector2ParamInput, `custom label not supported when Vector2 param.`);
    }
    get validated() {
        if (Gtk.isNullOrEmpty(this._validator))
            return { result: true };
        let param = this.getParam();
        return PropertyUtil.validate(this._validator, param);
    }
    get onCommit() {
        if (!this._onCommit) {
            this._onCommit = new Delegate.SimpleDelegate();
            this._inputX.onCommit.add(() => this._onCommit.invoke());
            this._inputY.onCommit.add(() => this._onCommit.invoke());
        }
        return this._onCommit;
    }
}

export { GodModVector2ParamInput as default };
//# sourceMappingURL=GodModVector2ParamInput.js.map
