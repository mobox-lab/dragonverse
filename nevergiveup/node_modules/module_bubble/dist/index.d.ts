declare module "module_bubble" {
    /**气泡预制体配置 */
    export const BubblePrefabConfig: {
        /**可视距离 */
        viewDistance: number;
        /**字体颜色 */
        textColor: mw.LinearColor;
        /**字体大小 */
        fontSize: number;
        /**是否显示尾巴 */
        arrayVisible: boolean;
        /**背景图guid */
        bg: string;
        /**背景图颜色 */
        bgColor: mw.LinearColor;
        /**边框颜色 */
        borderColor: mw.LinearColor;
    };
    /**气泡模块配置 */
    export const BubbleModuleConfig: {
        /**可视距离 */
        viewDistance: number;
        /**层级 */
        zOrder: number;
        /**创建气泡UI方法 */
        onCreateBubbleUI: any;
        /**时间 */
        time: number;
        /**最大数量 */
        maxCount: number;
        /**偏移 */
        offset: number;
    };
}

declare module "module_bubble" {
    /**气泡皮肤接口 */
    export interface IBubbleSkin {
        /**id */
        id: number;
        /**字体颜色 */
        textColor: mw.LinearColor;
        /**字体大小 */
        fontSize: number;
        /**是否显示尾巴 */
        arrayVisible: boolean;
        /**背景图片 */
        bg: string;
        /**背景颜色 */
        bgColor: mw.LinearColor;
        /**边框图片 */
        border: string;
        /**边框颜色 */
        borderColor: mw.LinearColor;
    }
}

declare module "module_bubble" {
    /**气泡UI接口 */
    export interface IBubbleUI {
        /**数组图片节点 */
        array: mw.Image;
        bg: mw.Image;
        /**边框图片节点 */
        border: mw.Image;
        /**UI根节点  */
        uiObject: mw.Widget;
        /**UI root节点 */
        rootCanvas: mw.Canvas;
    }
}

declare module "module_bubble" {
    /**气泡UI展示逻辑, 包括气泡样式设置, 生命周期,状态机管理 */
    export class BubbleUI {
        skin?: IBubbleSkin;
        /**ui对象 */
        private uiObject;
        /**canvas节点 */
        private canvas;
        /**背景图节点 */
        private bg;
        /**边界图节点 */
        private border;
        /**尾巴图节点 */
        private tail;
        /**文本节点 */
        private textBlock;
        /**气泡状态机 */
        private fsm;
        /**大小 */
        private size;
        /**当前高度 */
        currentHeight: number;
        /**
         * 计算回调
         */
        onMeasure: () => void;
        /**
         * Y轴偏移
         */
        offset: number;
        /**世界缩放大小 */
        worldScale: number;
        /**UI root节点 */
        private rootObject;
        private maxMeasureFps;
        constructor(skin?: IBubbleSkin);
        /**
        *设置索引，索引大于0的隐藏小尾巴
        */
        setIndex(index: number): void;
        /**
         * 销毁
         */
        destory(): void;
        /**
         * 设置文本信息
         * @param msg  文本信息
         */
        invalidate(msg: string): void;
        /**
         * 是否隐藏
         */
        set isHide(isHide: boolean);
        /**
         * 更新
         * @param playerLocation 玩家位置
         * @param position 位置
         * @param dt 时间
         */
        onUpdate(playerLocation: mw.Vector, position: mw.Vector, dt: number): boolean;
        /**
         * 是否可以显示
         */
        get isSizeValidate(): boolean;
        /**
         * 设置缩放
         */
        scale(scale: number): void;
        /**
         * 跳出来
         * @param scale
         */
        jump(scale: number): void;
    }
}

declare module "module_bubble" {
    /**气泡状态基类 */
    interface IBubbleState {
        /**
         * 退出
         */
        onExit(): void;
        /**
         * 进入
         */
        onEnter(): any;
        /**
         * 更新
         * @param dt
         */
        update(dt: number): any;
    }
    /**气泡状态机 */
    export class BubbleFsm {
        bubble: BubbleUI;
        /**
         * 是否完成
         */
        private _isFinish;
        /**
         * 状态列表
         */
        private _stateList;
        /**
         * 当前状态
         */
        private _currentState;
        /**
         * 下一个状态
         */
        private _nextState;
        constructor(bubble: BubbleUI);
        /**
         * 状态机完成
         */
        finish(): void;
        /**
         * 状态机重置
         */
        reset(): void;
        /**
         * 更新状态机
         * @param dt
         */
        onUpdate(dt: number): boolean;
        /**
         * 调用切换到下一个状态，为了防止状态混乱，仅在update期间调用
         */
        private _doChangeState;
        /**
         * 切换到下一个状态
         */
        switchState(stateClass: new (o: any) => IBubbleState): void;
    }
}

declare module "module_bubble" {
    /**宿主身上的气泡管理 */
    export class BubbleUser {
        guid: string;
        /**所有的气泡 */
        private bubbles;
        /**碰撞高度 */
        private collisionHeight;
        /**宿主对象 */
        owner: mw.GameObject;
        constructor(guid: string);
        /**
         * 添加气泡
         * @param bubble 气泡UI
         */
        addBubble(bubble: BubbleUI): void;
        /**
         * 气泡更新
         * @param playerLocation 玩家位置
         * @param dt 帧时长
         * @returns 气泡UI
         */
        onUpdate(playerLocation: mw.Vector, dt: number): BubbleUI;
        /**
         * 清理所有气泡
         */
        clear(): void;
        /**
         * 是否完成
         */
        get isFinish(): boolean;
        /**重新定位 */
        private onMeasure;
    }
}

declare module "module_bubble" {
    export namespace UIX {
        /**本地玩家character */
        let character: mw.Character;
        function init(_character: mw.Character): void;
        /**
         * 更新气泡
         * @param dt 帧时长
         */
        function onUpdate(dt: number): void;
        /**
         * 清理气泡宿主
         * @param gameObjectId 物体guid
         */
        function clear(gameObjectId: string): void;
        /**
         * 显示气泡
         * @param sender  发送者
         * @param msg  消息
         * @param skin  气泡皮肤
         */
        function showBubble(sender: string, msg: string, skin?: IBubbleSkin): void;
    }
}

declare module "module_bubble" {
    class BubbleSkin implements IBubbleSkin {
        id: number;
        fontSize: number;
        bg: string;
        border: string;
        textColor: mw.LinearColor;
        bgColor: mw.LinearColor;
        borderColor: mw.LinearColor;
        arrayVisible: boolean;
    }
    export namespace Bubble {
        /**气泡代理，勿用 */
        let _proxy: BubbleProxy;
        /**
         * 展示气泡，双端可用
         * @param skinId 气泡外观配置，为0时根据说话者选择默认配置
         * @param text 文本
         * @param guid 说话者的GUID，可以为场景物体,服务端必传，客户端不传为主控者说话
         * @param isLocally true仅在本地显示 false所以端显示
         */
        function showBubble(skinId: number, text: string, guid?: string, isLocally?: boolean): void;
        /**
        * 关闭所属物体气泡，双端可用
        * @param guid 说话者的GUID，可以为场景物体,服务端必传，客户端不传为主控者
        * @param isLocally true仅在本地关闭 false所以端关闭
        */
        function closeBubble(guid?: string, isLocally?: boolean): void;
    }
    export abstract class BubbleProxy extends mw.Script {
        private viewDistance;
        private playerSkinId;
        private otherSkinId;
        time: number;
        maxCount: number;
        offset: number;
        zOrder: number;
        skins: BubbleSkin[];
        /**本机玩家 */
        private player;
        /** 当脚本被实例后，会在第一帧更新前调用此函数 */
        protected onStart(): void;
        /**创建UI接口 */
        protected abstract onCreateBubbleUI(): IBubbleUI;
        /**
         * 显示气泡
         * @param skinId
         * @param text
         * @param player
         */
        showBubble(skinId: number, text: string, guid: string, isLocally: boolean): void;
        /**
         * 中转调用关闭气泡
         * @param guid
         */
        private boradcastCloseBubble;
        /**
         * 关闭气泡
         * @param guid
         */
        closeBubble(guid: string, isLocally: boolean): void;
        /**
         * 中转调用全局显示气泡
         * @param guid
         * @param skinId
         * @param text
         */
        private serverShowBubble;
        /**
         * 服务端调用所有客户端关闭气泡
         * @param guid
         */
        private serverCloseBubble;
        /**
         * 所有客户端显示气泡
         * @param guid 发送者
         * @param skinId 气泡皮肤
         * @param text 气泡文本
         */
        private boardCastBubble;
        /**
         * 周期函数 每帧执行
         * 此函数执行需要将this.useUpdate赋值为true
         * @param dt 当前帧与上一帧的延迟 / 秒
         */
        protected onUpdate(dt: number): void;
        /**
         * 脚本被销毁时最后一帧执行完调用此函数
         */
        protected onDestroy(): void;
    }
}
