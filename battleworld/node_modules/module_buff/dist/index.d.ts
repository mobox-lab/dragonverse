declare module "module_buff" {

    /**Buff参数传递约束*/
    export type buffArgs = {
        castPId: number//释放技能玩家id
        buffParamType: number,//AttributeBuff  属性buff 0值类型-1百分比类型
        value: number,//AttributeBuff 属性buff 加成值(50 = 50%)
        pos: mw.Vector //CenterBuffC 吸附buff 位置
    }
    /**
    * @Author       : MengYao.Zhao
    * @Date         : 2022/04/13 10:51:51
    * @Description  :  buff用到的一些通用数据,枚举, 通用函数...
    */
    /**
     * 生成buff到玩家身上的数据结构  宿主playerId, buff动态id,buff静态id, 角色插槽位置索引,相对位置，相对朝向，缩放
     */
    export type BuffSpawnInPlayerData = {
        playerId: string;
        id: number;
        configId: number;
        slotIndex: number;
        lPos: number[];
        lRot: number[];
        scale: number[];
        args: buffArgs;
    };
    /**
     * 生成buff到物体身上的数据结构  宿主guid, buff动态id,buff静态id,  相对位置，相对朝向，缩放
     */
    export type BuffSpawnInObjData = {
        objGuid: string;
        id: number;
        configId: number;
        lPos: number[];
        lRot: number[];
        scale: number[];
    };
    /**
     * 生成buff到世界位置上的数据结构    buff动态id,buff静态id,世界位置，世界朝向，缩放
     */
    export type BuffSpawnInPlaceData = {
        id: number;
        configId: number;
        wPos: number[];
        wRot: number[];
        scale: number[];
    };
    /**
     * 定义buff类的类形状
     */
    export type BuffClass<T> = {
        new(...arg: any[]): T;
    };
    /**
     * 转换数组到Vector
     * @param pos number[3]
     * @param defaultValue  不存在时默认分量值
     * @returns
     */
    export function convertArrayToVector(pos: number[], defaultValue?: number): mw.Vector;
    /**
     * 转换数组到Rotation,不存在则默认到标准朝向
     * @param rot number[3]
     * @returns
     */
    export function convertArrayToRotation(rot: number[]): mw.Rotation;
    /**
     * Buff的生成规则
     */
    export enum EBuffSpawnRule {
        /**
         * 后端做逻辑，通知前端做表现
         */
        Client = 0,
        /**
         * 后端做逻辑，后端做双端表现，前端不参与
         */
        Server = 1,
        /**
         * 仅有后端逻辑，无任何表现，前端不参与
         */
        OnlyLogic = 2
    }
    /**
     * buff宿主类型
     */
    export enum EBuffHostType {
        /**
         * 表示无宿主，放在世界位置的
         */
        None = 0,
        /**
         * 技能对象，也就是玩家
         */
        Player = 1,
        /**
         * 物体上
         */
        GameObject = 2
    }
    /**
     * buff效果类型
     */
    export enum EBuffEffectType {
        /**
         * 无效的
         */
        None = 0,
        /**
         * 基础属性有变化
         */
        PropertyChange = 1,
        /**
         * 生成一些新buff
         */
        SpawnNewBuff = 2,
        /**
         * 调用释放技能
         */
        CallSkill = 3,
        /**
         * 切换自身的模型
         */
        ChangeModel = 4,
        /**
         * 晕眩
         */
        Stun = 5
    }
    /**
     * buff的叠加方式
     */
    export enum EBuffOverlayType {
        /**
         * 独占的，表示宿主身上只能有一个
         */
        Only = 0,
        /**
         * 可叠加的，允许多个同id的buff存在
         */
        Overlap = 1,
        /**
         * 没有该类型的buff就是新的，有就在旧buff上追加时间
         */
        AddTime = 2,
        /**
         * 没有该类型的buff就是全新的，有就是旧buff上刷新时间
         */
        RefreshTime = 3
    }
    /**
     * buff的生命周期类型
     */
    export enum EBuffLifecycleType {
        /**
         * 永远存在的
         */
        Forever = 0,
        /**
         * 受时间限制
         */
        LimitByTime = 1,
        /**
         * 受触发次数限制
         */
        LimitByTriggerCount = 2
    }
    /**
     * buff参数的数值代表的类型
     */
    export enum EBuffParamType {
        /**
         * 值类型
         */
        Value = 0,
        /**
         * 百分比类型
         */
        Percent = 1
    }
    /**
     * buff影响的基础属性类型
     */
    export enum EBuffPropertyType {
        /**
         * 无效的
         */
        None = 0,
        /**
         * 攻击力
         */
        Atk = 1,
        /**
         * 防御力
         */
        Def = 2,
        /**
         * 当前血量
         */
        Hp = 3,
        /**
         * 最大血量
         */
        HpMax = 4,
        /**
         * 移动速度
         */
        Speed = 5,
        /**
         * 攻击间隔 s
         */
        AtkInterval = 6,
        /**
         * 暴击率 小数
         */
        CriticalRate = 7,
        /**
         * 命中率 小数
         */
        HitRate = 8,
        /**
         * 闪避率 小数
         */
        DodgeRate = 9
    }
    /**
     * 子buff的生成时机
     */
    export enum EBuffTriggerOpportunity {
        /**
         * 无效的
         */
        None = 0,
        /**
         * 在初始化完成后执行时
         */
        OnExecute = 1,
        /**
         * 在每次效果触发时触发
         */
        OnTrigger = 2
    }
    /**
     * 定义buff用的rpc函数名
     */
    export namespace buffRpcFun {
        /**
         * 在玩家 身上生成buff的网络通信函数名
         */
        let net_SpawnBuffInPlayer: string;
        /**
         * 在物体身上生成buff的网络通信函数名
         */
        let net_SpawnBuffInObject: string;
        /**
         * 在世界位置生成buff的网络通信函数名
         */
        let net_SpawnBuffInPlace: string;
        /**
        * 移除一个buff的网络通信函数名
        */
        let net_DestroyBuff: string;
        /**
        *  移除一批buff的网络通信函数名
        */
        let net_DestroyBuffs: string;
    }
}

declare module "module_buff" {
    export abstract class BuffManager<T extends BuffBase> {
        /**
         * 所有静态buff，外部初始化进来的
         */
        protected staticBuffs: Map<number, BuffData>;
        /**
         * 是否完成了初始化
         */
        protected isInit: boolean;
        /**
         * 所有宿主身上的buff，字典，方便查询 key= SkillBaseActor.guid/GameObject.guid
         */
        protected hostBuffsDic: Map<string, T[]>;
        /**
         * 缓存buff的宿主对象 mw.Player | mw.GameObject ,key= SkillBaseActor.guid/GameObject.guid
         */
        protected hostsDic: Map<string, mw.Player | mw.GameObject>;
        /**
         * 所有buff 包含宿主buff和世界位置buff,用于查询，key为buff的动态id
         */
        protected buffsDic: Map<number, T>;
        /**
         * 所有buff，包含宿主buff和世界位置buff,可以用于遍历，有时序
         */
        protected buffsList: T[];
        /**
         * 当buff开始创建时 参数1代表创建buff要使用的的数据结构，参数2表示该buff的宿主对象类型，生成特效时有用, 当设置manualPlayEffect=true时会在buff创建时调用
         */
        protected _onBuffEffectPreCreate: mw.Action2<BuffSpawnInPlayerData | BuffSpawnInObjData | BuffSpawnInPlaceData, EBuffHostType>;
        get onBuffEffectPreCreate(): mw.Action2<BuffSpawnInPlayerData | BuffSpawnInObjData | BuffSpawnInPlaceData, EBuffHostType>;
        /**
         * 当全新的成功创建了后的回调
         */
        protected _onBuffCreated: mw.Action1<T>;
        get onBuffCreated(): mw.Action1<T>;
        /**
         * 当buff开始销毁前的回调
         */
        protected _onBuffPreDestroy: mw.Action1<T>;
        get onBuffPreDestroy(): mw.Action1<T>;
        /**
         * 是否手动的播放buff特效，如果为false，将使用Odin的特效管理器进行特效播放， 如果为true  注册回调onBuffEffectPreCreate，手动在模块外管理自己的特效
         */
        protected manualPlayEffect: boolean;
        /**
         * 初始化
         * @param staticBuffData  静态buff数据,传入GameConfig.Buff.getAllElement()即可
         */
        init(staticBuffData: BuffData[]): void;
        /**
         * 销毁 ,想把BuffManager 彻底清除
         * 注意如果调用之后，要再次使用BuffManager  需要再调用init方法再做初始化 ,且之前如果有的监听情况需要重新去监听,否则可以考虑 调用 clearBuffs();
         */
        destroy(): void;
        /**
         * 从静态表里根据buff的静态id,查询静态数据
         * @param configId
         */
        protected findStaticBuffById(configId: number): BuffData;
        /**
         * 给玩家身上添加buff特效
         * @param buff 特效归属的buff
         * @param playerId SkillBaseActor.guid
         * @param slotIndex  玩家对象上的的插槽
         * @param relativePos  相对位置
         * @param relativeRot  相对朝向
         * @param scale  缩放
         */
        protected playBuffEffectInPlayer(buff: T, playerId: string, slotIndex: number, relativePos: mw.Vector, relativeRot: mw.Rotation, scale: mw.Vector): void;
        /**
          * 给物体身上添加buff特效
          * @param buff 特效归属的buff
          * @param objGuid mw.GameObject.guid
          * @param relativePos  相对位置
          * @param relativeRot  相对朝向
          * @param scale  缩放
          */
        protected playBuffEffectInGameObject(buff: T, objGuid: string, relativePos: mw.Vector, relativeRot: mw.Rotation, scale: mw.Vector): void;
        /**
         * 寻找缓存的宿主对象
         * @param hostGuid SkillBaseActor.guid/GameObject.guid
         * @returns mw.Player | mw.GameObject
         */
        protected getHost(hostGuid: string): mw.Player | mw.GameObject;
        /**
         * 当buff已经成功绑定了特效时
         * @param buff
         */
        private onBuffAttachEffect;
        /**
         * 当一个全新的buff被创建成功后
         * @param buff
         */
        protected onBuffCreateSuccess(buff: T): void;
        /**
         * 销毁一批buff
         * @param buffs
         */
        removeBuffs(buffs: T[]): void;
        /**
         * 销毁一个buff
         * @param buff
         */
        removeBuff(buff: T): void;
        /**
         * 清理所有buff
         */
        clearBuffs(): void;
        /**
         * 当buff需要移除前
         * @param buff
         */
        protected onBuffPreRemove(buff: T): void;
        /**
         * 获取当前所有buff
         * @returns buff对象列表
         */
        getBuffs(): T[];
        /**
         * 通过buff的动态id查询buff对象
         * @param buffId
         * @returns buff对象
         */
        findBuff(buffId: number): T;
        /**
         * 通过宿主guid获得宿主身上的buff列表
         * @param hostId   SkillBaseActor.guid/mw.GameObject.guid
         * @returns buff对象列表
         */
        findBuffByHostId(hostId: string): T[];
        /**
         * 通过buff的静态id，和宿主的guid来查找宿主身上某种类型的所有buff，如果宿主guid不存在，则会找寻所有可能的该类型的buff
         * @param configId buff静态id
         * @param hostId buff的宿主 guid
         */
        findBuffByConfigId(configId: number, hostId?: string): T[];
        /**
         * 通过buff的效果类型，和宿主的guid来查找宿主身上某种buff效果的的所有buff
         * @param hostId buff的宿主 guid
         * @param effectType buff的宿主 guid
         */
        findBuffByEffectType(hostId: string, effectType: EBuffEffectType): T[];
        /**
         * 遍历buff
         * @param callBack
         */
        forEach(callBack: (buff: T) => void): void;
        /**在一个角色的挂点上播放特效 */
        static rpcPlayEffectOnPlayer(source: string, target: mw.Player | mw.Character, slotType: mw.HumanoidSlotType, loopCount?: number, offset?: mw.Vector, rotation?: mw.Rotation, scale?: mw.Vector): number;
        /**在一个GameObject上播放特效 */
        static rpcPlayEffectOnGameObject(source: string, target: mw.GameObject, loopCount?: number, offset?: mw.Vector, rotation?: mw.Rotation, scale?: mw.Vector): number;
        /**在指定位置播放特效 */
        static rpcPlayEffectAtLocation(source: string, location: mw.Vector, loopCount?: number, rotation?: mw.Rotation, scale?: mw.Vector): number;
    }
}

declare module "module_buff" {
    /**
     * buff模块内部使用buff数据结构，字段类型和包含于excel导表工具导出的数据类型
     */
    export class BuffData {
        /**id*/
        id: number;
        /**名称*/
        name: string;
        /**buff描述*/
        description: string;
        /**图标*/
        icon: number;
        /**Buff的效果类型*/
        buffEffectType: number;
        /**buff的叠加方式*/
        overlayType: number;
        /**buff的生命周期类型*/
        lifecycleType: number;
        /**持续时间(单位s)*/
        duration: number;
        /**触发次数*/
        triggerCount: number;
        /**触发间隔(单位s)*/
        triggerInterval: number;
        /**动作的guid*/
        actionGuid: number;
        /**buff生成时产生的特效Guid*/
        effectGuid: number;
        /**是否循环。0-不循环，1-循环*/
        loop: number;
        /**buff生成时特效延迟多久出现(单位s)*/
        effectDelayTime: number;
        /**特效挂载人物身上的插槽索引*/
        effectSlotIndex: number;
        /**特效挂载于人物插槽|物体时的相对位置*/
        relativePos: Array<number>;
        /**特效挂载于人物插槽|物体时的相对朝向*/
        relativeRot: Array<number>;
        /**特效缩放*/
        scale: Array<number>;
        /**影响的属性类型*/
        affectPropertyType: number;
        /**子buff的生效时机*/
        buffTriggerOpportunity: number;
        /**会生成的通用子buff*/
        subBuffs: Array<number>;
        /**调用新的技能的生效时机*/
        skillTriggerOpportunity: number;
        /**会调用新的技能*/
        skillId: number;
        /**参数Param1是值类型还是百分比类型*/
        param1_Model: number;
        /**参数1*/
        param1: number;
        /**参数Param2是值类型还是百分比类型*/
        param2_Model: number;
        /**参数2*/
        param2: number;
        /**参数Param3是值类型还是百分比类型*/
        param3_Model: number;
        /**参数3*/
        param3: number;
        /**备注: 记录一些参数值在不同buff下代表的意义*/
        ps: string;
    }
    export abstract class BuffBase {
        /**
         * 动态唯一id
         */
        protected _id: number;
        get id(): number;
        /**
         * 是否已经死亡了，如果已经死亡将被Buff管理器销毁
         */
        protected _dead: boolean;
        get dead(): boolean;
        /**
         * 是否已经死亡了，用于回收
         */
        protected destroyFlag: boolean;
        /**
         * 宿主guid，SkillBaseActor.guid/GameObject.guid , 如果不存在表示该buff位于世界位置上
         */
        protected _hostGuid: string;
        get hostGuid(): string;
        set hostGuid(value: string);
        /**
         * 宿主的类型
         */
        protected _hostType: EBuffHostType;
        get hostType(): EBuffHostType;
        set hostType(value: EBuffHostType);
        /**
         * 特效的宿主对象,mw.Player | mw.GameObject，不存在表示该特效生成在世界位置上
         */
        protected _host: mw.Player | mw.GameObject;
        get host(): mw.Player | mw.GameObject;
        /**
         * 对应的buff特效id,在生成之后由Odin的mw.EffectService播放之后给出
         * 该id可以使用mw.EffectService去查找到特效，如果有时需要在部位去调整这个特效的一些情况，可以查找出来自由处理
         */
        protected _buffEffectId: number;
        get buffEffectId(): number;
        /**
         * 当有宿主存在且完成特效绑定时
         */
        private _onAttachedEffect;
        get onAttachedEffect(): mw.Action1<BuffBase>;
        /**
         * 静态buff表
         */
        protected readonly _staticConfig: BuffData;
        get staticConfig(): BuffData;
        /**
         * 静态buff表里的id
         */
        protected _configId: number;
        get configId(): number;
        /**
         * buff的名字
         */
        protected _name: string;
        get name(): string;
        /**
         * buff的描述
         */
        protected _desc: string;
        get desc(): string;
        /**
         * buff的图标
         */
        protected _icon: string;
        get icon(): string;
        /**
         * buff的效果类型
         */
        protected _buffEffectType: EBuffEffectType;
        get buffEffectType(): EBuffEffectType;
        /**
         * buff的叠加方式
         */
        protected _buffOverlayType: EBuffOverlayType;
        get buffOverlayType(): EBuffOverlayType;
        /**
         * buff的生命周期
         */
        protected _buffLifecycleType: EBuffLifecycleType;
        get buffLifecycleType(): EBuffLifecycleType;
        /**
         * buff的有限时间，在EBuffLifecycleType==1时使用
         */
        protected _duration: number;
        get duration(): number;
        /**
         * buff的触发次数,在EBuffLifecycleType==2时使用
         */
        protected _triggerCount: number;
        get triggerCount(): number;
        /**
         * buff的触发次数的间隔,在EBuffLifecycleType==2时使用
         */
        protected _triggerInterval: number;
        get triggerInterval(): number;
        /**
         * buff生成时需要产生的玩家动作guid
         */
        protected _occurredActionGuid: number;
        get occurredActionGuid(): number;
        /**
         * buff生成时的特效资源guid
         */
        protected _effectGuid: string;
        get effectGuid(): string;
        /**
         * 特效是否循环，0-不循环，1，循环
         */
        protected _effectLoop: number;
        get effectLoop(): number;
        /**
         * buff生成时的特效资源延迟出现的时间
         */
        protected _effectDelayShow: number;
        get effectDelayShow(): number;
        /**
        * buff生成时的特效资源挂载到人物身上的插槽索引
        */
        protected _mountSlotIndex: mw.HumanoidSlotType;
        get mountSlotIndex(): mw.HumanoidSlotType;
        /**
        * buff生成时的特效资源挂载到人物身上某个插槽的相对位置
        */
        protected _relativePos: mw.Vector;
        get relativePos(): mw.Vector;
        /**
        * buff生成时的特效资源挂载到人物身上某个插槽的相对朝向
        */
        protected _relativeRot: mw.Rotation;
        get relativeRot(): mw.Rotation;
        /**
        * buff生成时的特效资源挂载到人物身上某个插槽的缩放
        */
        protected _scale: mw.Vector;
        get scale(): mw.Vector;
        /**
        * buff是属性变化时的变化类型
        */
        protected _affectPropertyType: EBuffPropertyType;
        get affectPropertyType(): EBuffPropertyType;
        /**
        * 子buff的施加时机
        */
        protected _subBuffTriggerOpportunity: EBuffTriggerOpportunity;
        get subBuffTriggerOpportunity(): EBuffTriggerOpportunity;
        /**
        * buff可能生成的子buff id列表
        */
        protected _subBuffIds: number[];
        get subBuffIds(): number[];
        /**
        * 技能的调用时机
        */
        protected _skillTriggerOpportunity: EBuffTriggerOpportunity;
        get skillTriggerOpportunity(): EBuffTriggerOpportunity;
        /**
        * buff可能调用的新技能id
        */
        protected _skillId: number;
        get skillId(): number;
        /**
        * buff参数1的值的类型
        */
        protected _param1_modle: EBuffParamType;
        get param1_modle(): EBuffParamType;
        /**
        * buff参数1的值
        */
        protected _param1: number;
        get param1(): number;
        /**
        * buff参数2的值的类型
        */
        protected _param2_modle: EBuffParamType;
        get param2_modle(): EBuffParamType;
        /**
        * buff参数2的值
        */
        protected _param2: number;
        get param2(): number;
        /**
        * buff参数3的值的类型
        */
        protected _param3_modle: EBuffParamType;
        get param3_modle(): EBuffParamType;
        /**
        * buff参数3的值
        */
        protected _param3: number;
        get param3(): number;
        /**
         * 构造buff基类数据
         * @param _id 全局id
         * @param staticConfig buff静态表
         */
        constructor(_id: number, staticConfig: BuffData);
        /**
         * 把静态表buff里的一些东西转化到buff对象里，方便操作
         */
        private convertstaticConfig;
        /**
         * 构造完成之后，可能需要一些初始化行为
         */
        init(): void;
        /**
         * 获得buff的打印信息
         */
        dump(): string;
        /**
         * 帧驱动
         * @param dt  s
         */
        onUpdate(dt: number): void;
        /**
         * 销毁，清理
         */
        destroy(): void;
        /**
         * 使用Odin的mw.EffectService在玩家身上绑定一个buff特效,出现时间会收buff配置中的延迟影响
         * @param playerTarget 玩家id 或者玩家对象
         * @param slotIndex 玩家绑定的插槽位置索引
         * @param relativePos 绑定的相对位置
         * @param relativeRot  绑定的相对朝向
         * @param scale 缩放
         */
        playEffectInPlayer(playerTarget: number | mw.Player, slotIndex: number, relativePos: mw.Vector, relativeRot: mw.Rotation, scale: mw.Vector): void;
        /**
         * 使用Odin的mw.EffectService在物体身上绑定一个buff特效,出现时间会受buff配置中的延迟影响
         * @param objTarget 物体的guid  或者 该物体的对象
         * @param relativePos 绑定的相对位置
         * @param relativeRot  绑定的相对朝向
         * @param scale 缩放
         */
        playEffectInGameObject(objTarget: string | mw.GameObject, relativePos: mw.Vector, relativeRot: mw.Rotation, scale: mw.Vector): void;
        /**
         * 使用Odin的mw.EffectService在世界位置上旋转buff特效,出现时间会收buff配置中的延迟影响
         * @param worldPos 位置
         * @param worldRot  朝向
         * @param scale 缩放
         */
        playEffectInPlace(worldPos: mw.Vector, worldRot: mw.Rotation, scale: mw.Vector): void;
    }
}

declare module "module_buff" {
    export class BuffC extends BuffBase {
        /**
         * 构造客户端端buff类数据
         * @param _id 全局id
         * @param staticConfig buff静态表
         */
        constructor(_id: number, staticConfig: BuffData);
        /**
         * 构造完成之后，可能需要一些初始化行为
         * @param
         */
        init(): void;
        /**
         * 销毁，清理
         */
        destroy(): void;
    }
}

declare module "module_buff" {
    export class BuffManagerC extends BuffManager<BuffC> {
        private static _instance;
        /**
         * 单例实例
         */
        static get instance(): BuffManagerC;
        /**
         * 是否手动的创建buff表现类，如果为false，将使用默认的BuffC基类做为buff表现,且不会抛出onBuffPreCreate， 如果为true,注册回调onBuffPreCreate，该事件会在开始生成buff表现类时抛出，外部可手动调用生成buff函数，可以传递自己的派生Buff类
         */
        private manualCreateBuff;
        /**
         * 当客户端Buff表现类开始创建时  manualCreateBuff=true时
         */
        protected _onBuffPreCreate: mw.Action2<BuffSpawnInPlayerData | BuffSpawnInObjData | BuffSpawnInPlaceData, EBuffHostType>;
        get onBuffPreCreate(): mw.Action2<BuffSpawnInPlayerData | BuffSpawnInObjData | BuffSpawnInPlaceData, EBuffHostType>;
        /**
         * 初始化， 客户端使用BuffManagerC其它功能前需要调用本方法
         * @param staticBuffData  静态buff数据,传入GameConfig.Buff.getAllElement()即可
         * @param _manualPlayEffect 是否手动的播放buff特效，如果为false，将使用Odin的特效管理器进行特效播放，
         *                            如果为true  注册回调_onBuffEffectPreCreate，手动在外部管理自己的特效
         * @param _manualCreateBuff  是否手动的创建buff表现类，如果为false，将使用默认的BuffC基类做为buff表现,且不会抛出onBuffPreCreate，
         *                           如果为true,注册回调onBuffPreCreate，该事件会在开始生成buff表现类时抛出，外部可手动调用生成buff函数，可以传递自己的派生Buff类
         */
        init(staticBuffData: BuffData[], _manualPlayEffect?: boolean, _manualCreateBuff?: boolean): void;
        /**
         * 销毁
         * 注意如果调用之后，要再次使用BuffManagerC 需要调用 init方法再做初始化
         */
        destroy(): void;
        /**
         * 通过buff表现的动态id销毁一个buff表现,前端自主的销毁一些，不等后端通知
         * @param buffId  buff动态id
         */
        removeBuffById(buffId: number): void;
        /**
         * 通过buff 动态id销毁一些buff表现,前端自主的销毁一些，不等后端通知
         * @param buffIds  buff动态id
         */
        removeBuffsById(buffIds: number[]): void;
        /**
         *  前端自主的销毁一个buff表现，不等后端通知
         * @param buff  BuffC
         */
        removeBuff(buff: BuffC): void;
        /**
         *  前端自主的销毁一些buff表现，不等后端通知
         * @param buffs  BuffC[]
         */
        removeBuffs(buffs: BuffC[]): void;
        /**生成一个buff表现对象
         * @param id buff动态id，由后端分配的
         * @param configId buff静态id
         * @param buffClass buff表现类，默认为BuffC
         * @param args buff表现类的额外想使用的参数
         */
        private createBuff;
        /**
         * 创建一个到玩家身上的buff表现，不会创建动态id一样的buff ，默认情况是执行后端生成指令，需要手动调用时可外部调用
         * @param id buff动态id，由后端分配的
         * @param configId buff静态id
         * @param playerId 玩家 guid
         * @param buffClass buff表现类，默认为BuffC
         * @param args buff表现类的额外想使用的参数
         * @param slotIndex 绑定到玩家的那个插槽上的
         * @param relativePos 绑定到玩家身上时的相对位置
         * @param relativeRot 绑定到玩家身上时的相对朝向
         * @param scale 缩放
         * @returns 新的buff表现对象
         */
        createBuffInPlayer(id: number, configId: number, playerId: string, buffClass: BuffClass<BuffC>, args?: any[], slotIndex?: number, relativePos?: mw.Vector, relativeRot?: mw.Rotation, scale?: mw.Vector): BuffC;
        /**
         * 创建一个到物体身上的buff表现，不会创建动态id一样的buff ，默认情况是执行后端生成指令，需要手动调用时可外部调用
         * @param id buff动态id，由后端分配的
         * @param configId buff静态id
         * @param objGuid 物体的guid
         * @param buffClass buff表现类，默认为BuffC
         * @param args buff表现类的额外想使用的参数
         * @param relativePos 绑定到物体身上时的相对位置
         * @param relativeRot 绑定到物体身上时的相对朝向
         * @param scale 缩放
         * @returns 新的buff表现对象
         */
        createBuffInGameObject(id: number, configId: number, objGuid: string, buffClass: BuffClass<BuffC>, args?: any[], relativePos?: mw.Vector, relativeRot?: mw.Rotation, scale?: mw.Vector): BuffC;
        /**
         * 创建一个到世界位置的buff表现，不会创建动态id一样的buff ，默认情况是执行后端生成指令，需要手动调用时可外部调用
         * @param id buff动态id，由后端分配的
         * @param configId buff静态id
         * @param buffClass buff表现类，默认为BuffC
         * @param args buff表现类的额外想使用的参数
         * @param worldPos 绑定到玩家身上时的相对位置
         * @param worldRot 绑定到玩家身上时的相对朝向
         * @param scale 缩放
         * @returns 新的buff表现对象
         */
        createBuffInPlace(id: number, configId: number, buffClass: BuffClass<BuffC>, args?: any[], worldPos?: mw.Vector, worldRot?: mw.Rotation, scale?: mw.Vector): BuffC;
        /**
         * 在某个玩家身上生成一个buff 网络通信函数
         * @param param BuffSpawnInPlayerData结构
         */
        net_SpawnBuffInPlayer(param: BuffSpawnInPlayerData): void;
        /**
         * 在某个物体身上生成一个buff 网络通信函数
         * @param param BuffSpawnInObjData结构
         */
        net_SpawnBuffInObject(param: BuffSpawnInObjData): void;
        /**
         * 在世界位置上生成一个buff 网络通信函数
         * @param param BuffSpawnInPlaceData结构
         */
        net_SpawnBuffInPlace(param: BuffSpawnInPlaceData): void;
        /**
         * 移除一个buff
         * @param buffId  buff动态id
         */
        net_DestroyBuff(buffId: number): void;
        /**
         * 移除一批buff
         * @param  buffIds buff的动态id
         */
        net_DestroyBuffs(buffIds: number[]): void;
    }
}

declare module "module_buff" {
    export class BuffS extends BuffBase {
        /**
         * buff生成时的位置，如果挂载在身物身上时表示为相对位置，在世界位置时是世界位置
         */
        protected _buffPos: mw.Vector;
        get buffPos(): mw.Vector;
        set buffPos(value: mw.Vector);
        /**
         * buff生成时的朝向，如果挂载在身物身上时表示为相对朝向，在世界位置时是世界朝向
         */
        protected _buffRot: mw.Rotation;
        get buffRot(): mw.Rotation;
        set buffRot(value: mw.Rotation);
        /**
         * buff生成时的缩放
         */
        protected _buffScale: mw.Vector;
        get buffScale(): mw.Vector;
        set buffScale(value: mw.Vector);
        /**
         * 服务端生成buff时的规则
         */
        private _buffSpawnRule;
        get buffSpawnRule(): EBuffSpawnRule;
        set buffSpawnRule(value: EBuffSpawnRule);
        /**
         * 移除时是否已经检查过要通知客户端了
         */
        protected _checkedNotifyClient: boolean;
        get checkedNotifyClient(): boolean;
        set checkedNotifyClient(value: boolean);
        /**
         * 已经过去的时间,有时间限制的buff使用
         */
        protected elapsedTime: number;
        /**
         * 上次触发时间，有触发次数类型的buff使用
         */
        protected lastOccurredTime: number;
        /**
         * 当前触发的次数，有触发次数类型的buff使用
         */
        protected curOccurredCount: number;
        /**
         * 当触buff完成初始化后，当帧初时执行时，给外部一个回调
         */
        protected _onExecute: mw.Action1<BuffS>;
        get onExecute(): mw.Action1<BuffS>;
        /**
         * 当触发了buff效果时，给外部一个回调
         */
        protected _onTrigger: mw.Action1<BuffS>;
        get onTrigger(): mw.Action1<BuffS>;
        /**
         * 构造服务端buff类数据
         * @param _id 全局id
         * @param staticConfig buff静态表
         */
        constructor(_id: number, staticConfig: BuffData);
        /**
         * 构造完成之后， 一些初始化行为
         */
        init(): void;
        /**
         * buff开始执行了
         */
        execute(): void;
        /**
         * 帧驱动
         * @param dt  s
         */
        onUpdate(dt: number): void;
        /**
         * 销毁，清理
         */
        destroy(): void;
        /**
        * 追加buff持续时间
        */
        addBuffTime(): void;
        /**
         * 刷新自己的持续时间
         */
        refreshTime(): void;
    }
}

declare module "module_buff" {
    /**
     * buff一些情况的回调类型
     */
    type BuffAction = (buff: BuffS) => void;
    export class BuffManagerS extends BuffManager<BuffS> {
        private net;
        constructor();
        private static _instance;
        /**
         * 单例实例
         */
        static get instance(): BuffManagerS;
        /**
         * buff的动态id基数  用于给buff分配动态id
         */
        private buffBaseId;
        /**
         * 当前帧死亡的buff,收集起来统一回收
         */
        private deadBuffs;
        /**
         * 当技能对象型(SkillBaseActor)的宿主创建了新buff时的回调,key= SkillBaseActor.guid/
         */
        private onHostBuffCreateActions;
        /**
         * 当技能对象型的宿主准备销毁buff时的回调 ,key= SkillBaseActor.guid/
         */
        private onHostBuffPreDestroyActions;
        /**
         * 当技能对象型的宿主在buff使用后准备再调用某个技能时回调 ,key= SkillBaseActor.guid/
         */
        private onHostBuffPlaySkillActions;
        /**
         * 当buff完成初始化后，开始正式执行后
         */
        private _onBuffExecuted;
        get onBuffExecuted(): mw.Action1<BuffS>;
        /**
         * 当buff触发了一次效果时
         */
        private _onBuffEffectTrigger;
        get onBuffEffectTrigger(): mw.Action1<BuffS>;
        /**
         * 当子buff开始触发创建时
         */
        private _onSubBuffPreCreate;
        get onSubBuffPreCreate(): mw.Action1<BuffS>;
        /**
         * 是否手动创建子buff，如果为false，将使用默认的BuffS类做为buff类，来自动生成子buff，如果为true,注册回调onSubBuffPreCreate，手动在外部进行子buff的创建
         */
        private manualCreateSubBuff;
        /**
         * 当技能开始触发调用时
         */
        private _onSkillTrigger;
        get onSkillTrigger(): mw.Action1<BuffS>;
        /**
         * 是否手动施放调用的技能，如果为false，将调用SkillBaseActor的默认接口cast进行施放，，如果为true  注册回调onSkillTrigger，手动在外部管理技能的施放
         */
        private manualPlaySkill;
        /**
         * 获取buff的全局id
         * @returns
         */
        private getBuffGuid;
        /**
         * 初始化， 服务端使用BuffManagerS前需要调用本方法
         * @param staticBuffData  静态buff数据,传入GameConfig.Buff.getAllElement()即可
         * @param _manualPlayEffect 是否手动的播放buff特效，如果为false，将使用Odin的特效管理器进行特效播放，
         *                            如果为true  注册回调_onBuffEffectPreCreate，手动在外部管理自己的特效
         * @param _manualCreateSubBuff  是否手动创建子buff，如果为false，将使用默认的BuffS类做为buff类，来自动生成子buff，
         *                                 如果为true,注册回调onSubBuffPreCreate，手动在外部进行子buff的创建
         * @param _manualPlaySkill  是否手动施放调用的技能，如果为false，将调用SkillBaseActor的默认接口cast进行施放，
         *                                  如果为true  注册回调onSkillTrigger，手动在外部管理技能的施放
         */
        init(staticBuffData: BuffData[], _manualPlayEffect?: boolean, _manualCreateSubBuff?: boolean, _manualPlaySkill?: boolean): void;
        /**
         * 帧驱动
         * @param dt s
         */
        private update;
        /**
         * 销毁 ,想把BuffManagerS 彻底清除
         * 注意如果调用之后，要再次使用BuffManagerS  需要再调用init方法再做初始化 ,且之前如果有的监听情况需要重新去监听,否则可以考虑 调用 clearBuffs();
         */
        destroy(): void;
        /**
         * 创建buff
         * @param configId  buff配置id
         * @param hostGuid 宿主对象  技能角色SkillBaseActor.guid | mw.GameObject.guid  ==null表示是生成在世界位置上
         * @param buffClass 要生成的buff类
         * @param args 类额外  数组参数
         * @returns buff创建的结果
         */
        private createBuff;
        /**
         * 全新buff做初始化
         * @param buff BuffS
         */
        private initBuff;
        /**
         * 检查buff生成子buff或者使用技能
         * @param buff
         */
        private checkSubBuffOrSkill;
        /**
         * 当buff初始化完成后，首次开始执行时
         * @param buff
         */
        private onBuffExceuted;
        /**
         * 当有效果触发型的buff触发时
         * @param buff
         */
        private doBuffEffectTrigger;
        /**
         * 创建子buff
         * @param buff
         */
        private createSubBuff;
        /**
         * buff释放新的技能
         * @param buff
         */
        private playSkill;
        /**
         * 给某个技能角色对象上创建一个buff。如无指定绑定信息，则使用buff配置的绑定信息, 技能角色对象在自己的onDestroy()方法触发时会onPlayerDestroy()清理自己身上的buff
         * @param playerId   SkillBaseActor.guid
         * @param configId  buff的静态配置id
         * @param buffClass 要生成的buff类
         * @param args 类额外  数组参数
         * @param spawnRule Buff生成规则
         * @param slotIndex  玩家对象上的的插槽
         * @param relativePos  相对位置
         * @param relativeRot  相对朝向
         * @param scale  缩放
         * @returns buff对象，需要追加和刷新时间buff可能是原buff
         */
        createBuffInPlayer(playerId: string, configId: number, buffClass?: BuffClass<BuffS>, args?: any, spawnRule?: EBuffSpawnRule, slotIndex?: number, relativePos?: mw.Vector, relativeRot?: mw.Rotation, scale?: mw.Vector): BuffS;
        /**
         * 给某个物体对象上创建一个buff。如无指定绑定信息，则使用buff配置的绑定信息,注意如果物体对象在外部会有销毁行为，在销毁前需要调用onObjectPreDestroy清理自己身上的buff
         * @param objGuid   mw.GameObject.guid
         * @param configId  buff的静态配置id
         * @param buffClass 要生成的buff类
         * @param args 类额外  数组参数
         * @param spawnRule Buff生成规则
         * @param slotIndex  玩家对象上的的插槽
         * @param relativePos  相对位置
         * @param relativeRot  相对朝向
         * @param scale  缩放
         * @returns buff对象，需要追加和刷新时间buff可能是原buff
         */
        createBuffInGameObject(objGuid: string, configId: number, buffClass?: BuffClass<BuffS>, args?: any, spawnRule?: EBuffSpawnRule, relativePos?: mw.Vector, relativeRot?: mw.Rotation, scale?: mw.Vector): BuffS;
        /**
         * 在世界位置上创建一个buff
         * @param configId  buff的静态配置id
         * @param worldPos  相对位置
         * @param worldRot  相对朝向
         * @param scale  缩放
         * @param buffClass 要生成的buff类
         * @param args 类额外  数组参数
         * @param spawnRule Buff生成规则
         * @returns buff对象
         */
        createBuffInPlace(configId: number, worldPos: mw.Vector, worldRot: mw.Rotation, scale: mw.Vector, buffClass?: BuffClass<BuffS>, args?: any[], spawnRule?: EBuffSpawnRule): BuffS;
        /**
         * 设置技能角色类宿主在buff创建时的回调
         * @param playerId  SkillBaseActor.guid
         * @param callBack
         * @returns
         */
        setOnHostBuffCreateAction(playerId: string, callBack: BuffAction): void;
        /**
         * 设置技能角色类宿主在buff销毁前回调
         * @param playerId  SkillBaseActor.guid
         * @param callBack
         * @returns
         */
        setOnHostBuffPreDestroyAction(playerId: string, callBack: BuffAction): void;
        /**
         * 设置buff在调用技能时的回调
         * @param playerId  SkillBaseActor.guid
         * @param callBack
         * @returns
         */
        setOnHostBuffPlaySkillAction(playerId: string, callBack: BuffAction): void;
        /**
         *内部方法, 当玩家销毁了时，需要移除属于该玩家的buff
         * @param playerId SkillBaseActor.guid
         */
        onPlayerDestroy(playerId: string): void;
        /**
         * 外部方法，当某个物体销毁时，如果把buff挂在于物体上时，需要在该物体销毁前调用本方法，清除该物体身上的buff
         * @param objGuid buff宿主物体的guid
         */
        onObjectPreDestroy(objGuid: string): void;
        /**
         * 同时销毁多个buff
         * @param buffIds  buff的动态id列表
         */
        removeBuffsById(buffIds: number[]): void;
        /**
         * 通过buff的动态id销毁一个buff
         * @param buffId  buff动态id
         */
        removeBuffById(buffId: number): void;
        /**
         * 销毁一批buff
         * @param buffs BuffS[]
         */
        removeBuffs(buffs: BuffS[]): void;
        /**
         * 销毁一个buff
         * @param buff
         */
        removeBuff(buff: BuffS): void;
        /**
         * 当buff需要移除前，给技能角色对象一个可能的回调
         * @param buff
         */
        protected onBuffPreRemove(buff: BuffS): void;
        /**
         * 判断某个玩家是否处于晕眩状态
         * @param playerGuid SkillBaseActor.guid
         */
        isInStunStatus(playerGuid: string): boolean;
    }
}
