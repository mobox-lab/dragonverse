/**
 * Log4Ts.
 * pure TS 日志管理器.
 * @desc 提供统一的日志管理.
 * @desc 以及简单的过滤功能.
 * @nothrow
 * @desc ---
 * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
 * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
 * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
 * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
 * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
 * @author LviatYi
 * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
 * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
 * @version 1.4.0
 */
class Log4Ts {
    constructor() {
        //#region Config
        /**
         * 日志等级.
         */
        this.debugLevel = DebugLevels.Dev;
        this._config = new Log4TsConfig();
        this._cache_chunk = [];
        //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
        /**
         * debug log.
         * @param announcer announcer with name.
         *      when null or undefined, will print as second indent.
         * @param messages text.
         */
        this.log = (announcer, ...messages) => {
            if (this.debugLevel !== DebugLevels.Dev || !this._config.checkAnnouncer(announcer))
                return;
            const logFunc = this._config.logFunc;
            this.print(logFunc, announcer, ...messages);
        };
        /**
         * debug warn.
         * @param announcer announcer with name.
         *      when null or undefined, will print as second indent.
         * @param messages text.
         */
        this.warn = (announcer, ...messages) => {
            if (this.debugLevel === DebugLevels.Silent || !this._config.checkAnnouncer(announcer))
                return;
            const logFunc = this._config.logFunc;
            this.print(logFunc, announcer, ...messages);
        };
        /**
         * debug error.
         * @param announcer announcer with name.
         *      when null or undefined, will print as second indent.
         * @param messages text.
         */
        this.error = (announcer, ...messages) => {
            if (this.debugLevel === DebugLevels.Silent || !this._config.checkAnnouncer(announcer))
                return;
            const logFunc = this._config.errorFunc;
            this.print(logFunc, announcer, ...messages);
        };
    }
    /**
     * 设置配置.
     * @param config
     */
    setConfig(config = undefined) {
        this._config = config ?? new Log4TsConfig();
        return this;
    }
    print(logFunc, announcer, ...messages) {
        for (const msg of messages) {
            let msgStr;
            if (typeof msg === "string") {
                msgStr = msg;
            }
            else if (typeof msg === "function") {
                try {
                    msgStr = msg();
                }
                catch (e) {
                    msgStr = "error occurs in LogString.";
                }
            }
            else if (typeof msg === "object" && "name" in msg && "stack" in msg && "message" in msg) {
                msgStr = msg.stack.toString();
            }
            else {
                msgStr = msg?.toString() ?? "message obj cant be convert to string.";
            }
            try {
                const logStr = `${announcer && announcer.name ?
                    announcer.name + ":" :
                    `   `} ${msgStr}`;
                this._cache_chunk.push(logStr);
                logFunc(logStr);
            }
            catch (e) {
            }
            this.checkHandleChunk();
            announcer = null;
        }
    }
    checkHandleChunk() {
        if (this._cache_chunk.length >= this._config.chunkSize) {
            this.forceHandleChunk();
        }
    }
    /**
     * 立即使用 Handler 处理 chunk 池 并清空 chunk.
     */
    forceHandleChunk() {
        try {
            this._config.chunkHandler?.(this._cache_chunk);
            this._cache_chunk.length = 0;
        }
        catch (e) {
            mw.console.log(`Log4Ts Self: chunkHandler error. ${e}`);
            mw.console.log(e.stack);
        }
    }
}
/**
 * 日志等级.
 */
var DebugLevels;
(function (DebugLevels) {
    /**
     * 无日志.
     */
    DebugLevels[DebugLevels["Silent"] = 0] = "Silent";
    /**
     * 信息. 包含 warn error.
     */
    DebugLevels[DebugLevels["Info"] = 1] = "Info";
    /**
     * 开发. 包含 log warn error.
     */
    DebugLevels[DebugLevels["Dev"] = 2] = "Dev";
})(DebugLevels || (DebugLevels = {}));
//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
class Log4TsConfig {
    constructor() {
        //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
        //#region Member
        this._lastValidAnnouncer = null;
        this._logFunc = console.log;
        this._warnFunc = console.warn;
        this._errorFunc = console.error;
        this._cacheChunkHandler = null;
        this._chunkSize = Log4TsConfig.DEFAULT_CHUNK_SIZE;
        /**
         * 白名单.
         * @desc only announcers in _whiteList could be printed.
         */
        this._whiteList = new Set();
        /**
         * 黑名单.
         * @desc announcers in _blackList will never be printed.
         */
        this._blackList = new Set();
        this._filter = null;
        //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
    }
    //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
    get logFunc() {
        return this._logFunc;
    }
    get warnFunc() {
        return this._warnFunc;
    }
    get errorFunc() {
        return this._errorFunc;
    }
    /**
     * chunk 池大小.
     * @return {number}
     */
    get chunkSize() {
        return this._chunkSize;
    }
    /**
     * 设置 log 函数.
     * @param func
     */
    setLogFunc(func) {
        this._logFunc = func;
        return this;
    }
    /**
     * 设置 warn 函数.
     * @param func
     */
    setWarnFunc(func) {
        this._warnFunc = func;
        return this;
    }
    /**
     * 设置 error 函数.
     * @param func
     */
    setErrorFunc(func) {
        this._errorFunc = func;
        return this;
    }
    /**
     * 设置 chunk 池大小.
     * @param {number} size
     *  - default 1.
     *  - 未主动调用前 默认值为 {@link Log4TsConfig.DEFAULT_CHUNK_SIZE}.
     * @return {this}
     */
    setChunkSize(size = 1) {
        this._chunkSize = size;
        return this;
    }
    /**
     * 设置 **chunk 池** 处理器.
     * @desc 当 chunk 池满时自动触发，并清除 chunk 池.
     * @desc chunk 池为日志的缓存池，用于处理大量日志时的分块输出.
     * @desc 当 chunk 池中的日志数量达到 {@link chunkSize} 时，池满.
     * @param {ChunkHandler} handler
     * @return {this}
     */
    setChunkHandler(handler) {
        this._cacheChunkHandler = handler;
        return this;
    }
    /**
     * chunk 池处理器.
     * @friend {@link Log4Ts}
     */
    get chunkHandler() {
        return this._cacheChunkHandler;
    }
    /**
     * 添加 白名单.
     * @param names
     */
    addWhiteList(...names) {
        names.forEach(name => {
            if (Array.isArray(name)) {
                name.forEach(n => {
                    if (typeof n !== "string")
                        n = n.name;
                    this._whiteList.add(n);
                });
            }
            else {
                if (typeof name !== "string")
                    name = name.name;
                this._whiteList.add(name);
            }
        });
        return this;
    }
    /**
     * 添加 黑名单.
     * @param names
     */
    addBlackList(...names) {
        names.forEach(name => {
            if (Array.isArray(name)) {
                name.forEach(n => {
                    if (typeof n !== "string")
                        n = n.name;
                    this._blackList.add(n);
                });
            }
            else {
                if (typeof name !== "string")
                    name = name.name;
                this._blackList.add(name);
            }
        });
        return this;
    }
    /**
     * 设定过滤器.
     * @desc 当过滤器存在时 仅过滤器生效.
     * @desc 以支持更多的客制化过滤选项.
     * @param filter
     */
    setFilter(filter) {
        this._filter = filter;
        return this;
    }
    /**
     * 重置过滤器.
     * @desc 重置后将使用白名单与黑名单进行过滤.
     */
    resetFilter() {
        this._filter = null;
        return this;
    }
    inWhiteList(announcer) {
        return this._whiteList.size === 0 || (announcer.name ? this._whiteList.has(announcer.name) : false);
    }
    inBlackList(announcer) {
        return announcer.name ? this._blackList.has(announcer.name) : false;
    }
    /**
     * 检查 Announcer 是否可打印.
     * @param announcer
     */
    checkAnnouncer(announcer) {
        if (announcer == null) {
            if (this._lastValidAnnouncer == null)
                return false;
        }
        else
            this._lastValidAnnouncer = announcer;
        return this._filter ?
            this._filter(this._lastValidAnnouncer.name) :
            this.inWhiteList(this._lastValidAnnouncer) && !this.inBlackList(this._lastValidAnnouncer);
    }
    //#region Shorter Builder
    /**
     * short for {@link setFilter}.
     * @param filter
     */
    sF(filter) {
        return this.setFilter(filter);
    }
    /**
     * short for {@link resetFilter}.
     */
    rsF() {
        return this.resetFilter();
    }
    /**
     * short for {@link setLogFunc}.
     * @param func
     * @constructor
     */
    SLog(func) {
        this.setLogFunc(func);
    }
    /**
     * short for {@link setWarnFunc}.
     * @param func
     * @constructor
     */
    SWarn(func) {
        this.setWarnFunc(func);
    }
    /**
     * short for {@link setErrorFunc}.
     * @param func
     * @constructor
     */
    SError(func) {
        this.setErrorFunc(func);
    }
    /**
     * short for {@link addWhiteList}.
     * @param names
     */
    aW(...names) {
        return this.addWhiteList(...names);
    }
    /**
     * short for {@link addBlackList}.
     * @param names
     */
    aB(...names) {
        return this.addBlackList(...names);
    }
}
//#region Constant
Log4TsConfig.DEFAULT_CHUNK_SIZE = 50;
//#region Export
var Log4Ts$1 = new Log4Ts().setConfig();
//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄

export { DebugLevels, Log4TsConfig, Log4Ts$1 as default };
//# sourceMappingURL=Log4Ts.js.map
