import { Delegate } from 'gtoolkit';

class Component {
    constructor() {
        this.renderAnim = (dt) => {
            if (this._root && this._root.visible) {
                this.renderAnimHandler(dt);
            }
        };
        //#region Event
        this.onAttach = new Delegate.SimpleDelegate().setProtected();
        this.onDetach = new Delegate.SimpleDelegate().setProtected();
        //#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
    }
    static create() {
        throw new Error("not implemented.");
    }
    static defaultOption() {
        throw new Error("not implemented.");
    }
    initRoot(_root) {
        this._root = _root ?
            _root :
            mw.Canvas.newObject(undefined, "root");
        this._root.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        if (this._root.destroyObject === this._root.constructor.prototype.destroyObject) {
            this._root.destroyObject = () => {
                if (this.renderAnimHandler) {
                    mw.TimeUtil.onEnterFrame.remove(this.renderAnim);
                }
                this.destroy();
                this._root.destroyObject();
            };
        }
        if (this.renderAnimHandler) {
            mw.TimeUtil.onEnterFrame.add(this.renderAnim);
        }
    }
    get root() {
        if (!this._root)
            this.initRoot();
        return this._root;
    }
    destroy() {
    }
    ;
    attach(canvas) {
        if (canvas instanceof mw.Canvas) {
            canvas.addChild(this.root);
        }
        else {
            canvas.root.addChild(this.root);
        }
        this.onAttach.invoke();
        return this;
    }
    detach() {
        this.onDetach.invoke();
        this._root?.removeObject();
    }
}

export { Component };
//# sourceMappingURL=Component.js.map
