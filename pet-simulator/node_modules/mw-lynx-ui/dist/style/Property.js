import Gtk from 'gtoolkit';

var Property;
(function (Property) {
    (function (Corner) {
        Corner[Corner["None"] = 0] = "None";
        Corner[Corner["TopLeft"] = 1] = "TopLeft";
        Corner[Corner["TopRight"] = 2] = "TopRight";
        Corner[Corner["BottomLeft"] = 4] = "BottomLeft";
        Corner[Corner["BottomRight"] = 8] = "BottomRight";
        Corner[Corner["Top"] = 3] = "Top";
        Corner[Corner["Left"] = 5] = "Left";
        Corner[Corner["Right"] = 10] = "Right";
        Corner[Corner["Bottom"] = 12] = "Bottom";
        Corner[Corner["All"] = 15] = "All";
    })(Property.Corner || (Property.Corner = {}));
})(Property || (Property = {}));
var PropertyUtil;
(function (PropertyUtil) {
    function applyFontSize(fontSizeAble, fontSize) {
        if (typeof fontSize === "number") {
            fontSizeAble.fontSize = fontSize;
            fontSizeAble.autoAdjust = false;
        }
        else {
            fontSizeAble.autoAdjust = true;
        }
    }
    PropertyUtil.applyFontSize = applyFontSize;
    function applyTextAlign(textAlignAble, textAlign) {
        switch (textAlign) {
            case "left":
                textAlignAble.textAlign = mw.TextJustify.Left;
                break;
            case "center":
                textAlignAble.textAlign = mw.TextJustify.Center;
                break;
            case "right":
                textAlignAble.textAlign = mw.TextJustify.Right;
                break;
        }
    }
    PropertyUtil.applyTextAlign = applyTextAlign;
    function getMaskPrecisionByEffectLevel(effectLevel) {
        switch (effectLevel) {
            case "low":
                return 4;
            case "high":
                return 10;
            case "medium":
            default:
                return 6;
        }
    }
    PropertyUtil.getMaskPrecisionByEffectLevel = getMaskPrecisionByEffectLevel;
    function hasCorner(corner, target) {
        return (corner & target) === target;
    }
    PropertyUtil.hasCorner = hasCorner;
    function validate(validators, param) {
        if (Gtk.isNullOrEmpty(validators))
            return { result: true };
        for (let validator of validators) {
            if (typeof validator === "function") {
                if (!validator(param)) {
                    return {
                        result: false,
                    };
                }
            }
            else {
                if (!validator.validator(param)) {
                    return {
                        result: false,
                        reason: validator.reason,
                    };
                }
            }
        }
        return {
            result: true,
        };
    }
    PropertyUtil.validate = validate;
})(PropertyUtil || (PropertyUtil = {}));

export { Property, PropertyUtil };
//# sourceMappingURL=Property.js.map
