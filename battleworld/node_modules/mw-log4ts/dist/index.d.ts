declare module "mw-log4ts" {
    /**
     * Log4Ts.
     * pure TS 日志管理器.
     * @desc 提供统一的日志管理.
     * @desc 以及简单的过滤功能.
     * @nothrow
     * @desc ---
     * ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟
     * ⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄
     * ⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄
     * ⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄
     * ⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
     * @author LviatYi
     * @font JetBrainsMono Nerd Font Mono https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
     * @fallbackFont Sarasa Mono SC https://github.com/be5invis/Sarasa-Gothic/releases/download/v0.41.6/sarasa-gothic-ttf-0.41.6.7z
     * @version 1.4.0
     */
    class Log4Ts {
        /**
         * 日志等级.
         */
        debugLevel: DebugLevels;
        private _config;
        private _cache_chunk;
        /**
         * debug log.
         * @param announcer announcer with name.
         *      when null or undefined, will print as second indent.
         * @param messages text.
         */
        log: (announcer: Announcer, ...messages: LogString[]) => void;
        /**
         * debug warn.
         * @param announcer announcer with name.
         *      when null or undefined, will print as second indent.
         * @param messages text.
         */
        warn: (announcer: Announcer, ...messages: LogString[]) => void;
        /**
         * debug error.
         * @param announcer announcer with name.
         *      when null or undefined, will print as second indent.
         * @param messages text.
         */
        error: (announcer: Announcer, ...messages: LogString[]) => void;
        /**
         * 设置配置.
         * @param config
         */
        setConfig(config?: Log4TsConfig): this;
        private print;
        private checkHandleChunk;
        /**
         * 立即使用 Handler 处理 chunk 池 并清空 chunk.
         */
        forceHandleChunk(): void;
    }
    /**
     * 日志等级.
     */
    export enum DebugLevels {
        /**
         * 无日志.
         */
        Silent = 0,
        /**
         * 信息. 包含 warn error.
         */
        Info = 1,
        /**
         * 开发. 包含 log warn error.
         */
        Dev = 2
    }
    /**
     * 日志信息接收类型.
     */
    export type LogString = MessageGetter | Error | string | unknown;
    /**
     * 日志 lambda.
     */
    export type MessageGetter = (...params: unknown[]) => string;
    /**
     * 宣称者.
     */
    export type Announcer = {
        name: string;
    };
    /**
     * 宣称者或宣称者名.
     */
    export type NameOrAnnouncer = string | Announcer;
    /**
     * 日志打印函数.
     */
    export type LogFunc = (...data: unknown[]) => void;
    /**
     * 日志缓存分块处理器.
     */
    export type ChunkHandler = (chunk: string[]) => void;
    export class Log4TsConfig {
        private static readonly DEFAULT_CHUNK_SIZE;
        private _lastValidAnnouncer;
        private _logFunc;
        private _warnFunc;
        private _errorFunc;
        private _cacheChunkHandler;
        private _chunkSize;
        get logFunc(): LogFunc;
        get warnFunc(): LogFunc;
        get errorFunc(): LogFunc;
        /**
         * chunk 池大小.
         * @return {number}
         */
        get chunkSize(): number;
        /**
         * 白名单.
         * @desc only announcers in _whiteList could be printed.
         */
        private _whiteList;
        /**
         * 黑名单.
         * @desc announcers in _blackList will never be printed.
         */
        private _blackList;
        private _filter;
        /**
         * 设置 log 函数.
         * @param func
         */
        setLogFunc(func: LogFunc): this;
        /**
         * 设置 warn 函数.
         * @param func
         */
        setWarnFunc(func: LogFunc): this;
        /**
         * 设置 error 函数.
         * @param func
         */
        setErrorFunc(func: LogFunc): this;
        /**
         * 设置 chunk 池大小.
         * @param {number} size
         *  - default 1.
         *  - 未主动调用前 默认值为 {@link Log4TsConfig.DEFAULT_CHUNK_SIZE}.
         * @return {this}
         */
        setChunkSize(size?: number): this;
        /**
         * 设置 **chunk 池** 处理器.
         * @desc 当 chunk 池满时自动触发，并清除 chunk 池.
         * @desc chunk 池为日志的缓存池，用于处理大量日志时的分块输出.
         * @desc 当 chunk 池中的日志数量达到 {@link chunkSize} 时，池满.
         * @param {ChunkHandler} handler
         * @return {this}
         */
        setChunkHandler(handler: ChunkHandler): this;
        /**
         * chunk 池处理器.
         * @friend {@link Log4Ts}
         */
        get chunkHandler(): ChunkHandler | null;
        /**
         * 添加 白名单.
         * @param names
         */
        addWhiteList(...names: (NameOrAnnouncer | NameOrAnnouncer[])[]): this;
        /**
         * 添加 黑名单.
         * @param names
         */
        addBlackList(...names: (NameOrAnnouncer | NameOrAnnouncer[])[]): this;
        /**
         * 设定过滤器.
         * @desc 当过滤器存在时 仅过滤器生效.
         * @desc 以支持更多的客制化过滤选项.
         * @param filter
         */
        setFilter(filter: (name: string) => boolean): this;
        /**
         * 重置过滤器.
         * @desc 重置后将使用白名单与黑名单进行过滤.
         */
        resetFilter(): this;
        private inWhiteList;
        private inBlackList;
        /**
         * 检查 Announcer 是否可打印.
         * @param announcer
         */
        checkAnnouncer(announcer: Announcer): boolean;
        /**
         * short for {@link setFilter}.
         * @param filter
         */
        sF(filter: (name: string) => boolean): this;
        /**
         * short for {@link resetFilter}.
         */
        rsF(): this;
        /**
         * short for {@link setLogFunc}.
         * @param func
         * @constructor
         */
        SLog(func: LogFunc): void;
        /**
         * short for {@link setWarnFunc}.
         * @param func
         * @constructor
         */
        SWarn(func: LogFunc): void;
        /**
         * short for {@link setErrorFunc}.
         * @param func
         * @constructor
         */
        SError(func: LogFunc): void;
        /**
         * short for {@link addWhiteList}.
         * @param names
         */
        aW(...names: (NameOrAnnouncer | NameOrAnnouncer[])[]): this;
        /**
         * short for {@link addBlackList}.
         * @param names
         */
        aB(...names: (NameOrAnnouncer | NameOrAnnouncer[])[]): this;
    }
    const _default: Log4Ts;
    export default _default;
}
