{"version":3,"file":"GodModParam.js","sources":["../GodModParam.ts"],"sourcesContent":["import { ValueTypeInEnum } from \"gtoolkit\";\r\n\r\nexport interface IElementBase {\r\n    id: number;\r\n}\r\n\r\ndeclare class ConfigBase<T extends IElementBase> {\r\n    public getElement(id: number | string): T\r\n\r\n    public findElement(fieldName: string, fieldValue: any): T\r\n\r\n    public findElements(fieldName: string, fieldValue: any): Array<T>\r\n\r\n    public getAllElement(): Array<T>\r\n}\r\n\r\nexport type AcceptableParamType =\r\n    \"void\"\r\n    | \"string\"\r\n    | \"integer\"\r\n    | \"number\"\r\n    | \"vector\"\r\n    | ConfigBase<IElementBase>\r\n    | object\r\n\r\nexport type InferParamType<P> =\r\n    P extends \"void\" ? void :\r\n        P extends \"string\" ? string :\r\n            P extends \"integer\" ? number :\r\n                P extends \"number\" ? number :\r\n                    P extends \"vector\" ? mw.Vector :\r\n                        P extends ConfigBase<IElementBase> ? number :\r\n                            P extends object ? ValueTypeInEnum<P> :\r\n                                never;\r\n\r\nexport type GodModInferredParamType = InferParamType<AcceptableParamType>\r\n\r\n/**\r\n * 󰌆数据验证器.\r\n */\r\nexport type DataValidator<P> = (param: P) => boolean\r\n\r\n/**\r\n * 归因 󰌆数据验证器.\r\n */\r\nexport interface DataValidatorWithReason<P> {\r\n    /**\r\n     * 󰌆数据验证器.\r\n     */\r\n    validator: DataValidator<P>;\r\n\r\n    /**\r\n     * 原因.\r\n     */\r\n    reason: string;\r\n}\r\n\r\n/**\r\n * God Mod 命令参数选项.\r\n */\r\nexport interface GodCommandParamOption<P = string> {\r\n    /**\r\n     * 󰌆数据验证器组合.\r\n     */\r\n    validator: (DataValidator<P> | DataValidatorWithReason<P>)[];\r\n}\r\n\r\n//#region Validator Preset\r\nexport function RangeDataValidator(min: number, max: number): DataValidatorWithReason<number> {\r\n    return {\r\n        validator: (param: number) => param >= min && param <= max,\r\n        reason: `参数必须在 ${min} 和 ${max} 之间`,\r\n    };\r\n}\r\n\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄"],"names":[],"mappings":"AAmEA;AACgB,SAAA,kBAAkB,CAAC,GAAW,EAAE,GAAW,EAAA;IACvD,OAAO;AACH,QAAA,SAAS,EAAE,CAAC,KAAa,KAAK,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG;AAC1D,QAAA,MAAM,EAAE,CAAA,MAAA,EAAS,GAAG,CAAA,GAAA,EAAM,GAAG,CAAK,GAAA,CAAA;KACrC,CAAC;AACN,CAAC;AAED;;;;"}