{"version":3,"file":"GodModService.js","sources":["../GodModService.ts"],"sourcesContent":["export * from \"./GodModParam\";\r\nexport * from \"./GodCommandItem\";\r\nexport * from \"./ui/GodModPanel\";\r\nexport * from \"./ui/param-base/IGodModParamInput\";\r\nexport * from \"./ui/param-base/IGodModParamValidatorOption\";\r\nexport * from \"./ui/param-input/GodModIntegerParamInput\";\r\nexport * from \"./ui/param-input/GodModNumberParamInput\";\r\nexport * from \"./ui/param-input/GodModStringParamInput\";\r\nexport * from \"./ui/param-input/GodModVectorParamInput\";\r\n\r\nimport { AcceptableParamType, GodCommandParamOption, InferParamType } from \"./GodModParam\";\r\nimport { GodModPanel } from \"./ui/GodModPanel\";\r\nimport { GtkTypes, Regulator, Singleton } from \"gtoolkit\";\r\nimport Log4Ts from \"mw-log4ts\";\r\nimport { GodCommandItem } from \"./GodCommandItem\";\r\n\r\nexport default class GodModService extends Singleton<GodModService>() {\r\n//#region Constant\r\n    /**\r\n     * 管理员列表存储键.\r\n     * @type {string}\r\n     */\r\n    public static readonly GodModAdminListStorageKey = \"GOD_MOD_ADMIN_LIST__STORAGE_KEY\";\r\n\r\n    /**\r\n     * God Mod 请求事件名称前缀.\r\n     * @type {string}\r\n     */\r\n    public static readonly GodModRequestEventNamePrefix = \"__GOD_MOD_REQUEST_EVENT_NAME__\";\r\n//#endregion ⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠒⠒⠒⠒⠚⠛⣿⡟⠄⠄⢠⠄⠄⠄⡄⠄⠄⣠⡶⠶⣶⠶⠶⠂⣠⣶⣶⠂⠄⣸⡿⠄⠄⢀⣿⠇⠄⣰⡿⣠⡾⠋⠄⣼⡟⠄⣠⡾⠋⣾⠏⠄⢰⣿⠁⠄⠄⣾⡏⠄⠠⠿⠿⠋⠠⠶⠶⠿⠶⠾⠋⠄⠽⠟⠄⠄⠄⠃⠄⠄⣼⣿⣤⡤⠤⠤⠤⠤⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\r\n\r\n    private _queriedAdminList: boolean = false;\r\n\r\n    private _view: GodModPanel;\r\n\r\n    /**\r\n     * GodCommands 库.\r\n     * @type {Map<string, GodCommandItem<unknown>>}\r\n     * @private\r\n     */\r\n    private _commands: Map<string, GodCommandItem<any>> = new Map();\r\n\r\n    /**\r\n     * 管理员列表.\r\n     * @type {Set<string>}\r\n     * @private\r\n     */\r\n    private _adminList: Set<string> = undefined;\r\n\r\n    private _shutdown: boolean = false;\r\n\r\n    private _checkAuthorityRegulator: Regulator = new Regulator(GtkTypes.Interval.PerMin * 5);\r\n\r\n    public onConstruct() {\r\n        mw.TimeUtil.onEnterFrame.add(() => {\r\n            if (this._checkAuthorityRegulator.request()) {\r\n                this.queryAdminList();\r\n            }\r\n        });\r\n    }\r\n\r\n    public addCommand<P extends AcceptableParamType>(label: string,\r\n                                                     paramType: P = \"string\" as P,\r\n                                                     clientCmd: (params: InferParamType<P>) => void = undefined,\r\n                                                     serverCmd: (player: mw.Player, params: InferParamType<P>) => void = undefined,\r\n                                                     paramOption: GodCommandParamOption<InferParamType<P>> = undefined,\r\n                                                     group?: string) {\r\n        if (this._shutdown) return;\r\n\r\n        if (this._commands.get(label)) {\r\n            Log4Ts.error(GodModService,\r\n                `A command with the same label already exists.`,\r\n                label);\r\n        } else if (!clientCmd && !serverCmd) {\r\n            Log4Ts.error(\r\n                GodModService,\r\n                `at least one of the client command and server command must be provided.`);\r\n            return;\r\n        } else {\r\n            this._commands.set(label, new GodCommandItem(label,\r\n                paramType,\r\n                clientCmd,\r\n                serverCmd,\r\n                paramOption,\r\n                group));\r\n            if (mw.SystemUtil.isServer()) {\r\n                mw.Event.addClientListener(\r\n                    this.getEventName(label),\r\n                    (player: mw.Player, p: any) => {\r\n                        this.runCommandInServer(player, label, p);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    public removeCommand(label: string) {\r\n        this._commands.delete(label);\r\n    }\r\n\r\n    public getAllCommands(): Readonly<GodCommandItem<AcceptableParamType>[]> {\r\n        return [...this._commands.values()];\r\n    }\r\n\r\n    public runCommandInClient(label: string,\r\n                              p: any,\r\n                              autoDispatchToServer: boolean = true) {\r\n        if (this._shutdown || !mw.SystemUtil.isClient()) return;\r\n        const command = this._commands.get(label);\r\n        if (!command || !command.isParamValid(p)) return;\r\n\r\n        try {\r\n            command.clientCmd?.(p);\r\n        } catch (e) {\r\n            Log4Ts.error(GodModService,\r\n                `error occurs in client command.`,\r\n                e);\r\n        }\r\n\r\n        if (command.serverCmd && autoDispatchToServer) {\r\n            Event.dispatchToServer(this.getEventName(command.label), p);\r\n        }\r\n    }\r\n\r\n    public runCommandInServer(player: mw.Player,\r\n                              label: string,\r\n                              p: any) {\r\n        if (this._shutdown || !mw.SystemUtil.isServer()) return;\r\n        if (!this.verifyAuthority(player.userId)) return;\r\n        const command = this._commands.get(label);\r\n        if (!command || !command.isParamValid(p)) return;\r\n\r\n        try {\r\n            command.serverCmd?.(player, p);\r\n        } catch (e) {\r\n            Log4Ts.error(GodModService,\r\n                `error occurs in server command.`,\r\n                e);\r\n        }\r\n    }\r\n\r\n    public showGm() {\r\n        if (mw.SystemUtil.isClient()) {\r\n            if (!this._view) {\r\n                this._view = GodModPanel\r\n                    .create({\r\n                        items: Array.from(this._commands.values()),\r\n                        zOrder: 65000,\r\n                    })\r\n                    .attach(mw.UIService.canvas)\r\n                    .registerCommandHandler((label, p, autoDispatchToServer) => {\r\n                        this.runCommandInClient(label, p, autoDispatchToServer);\r\n                    });\r\n            } else {\r\n                this._view.attach(mw.UIService.canvas);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hideGm() {\r\n        if (mw.SystemUtil.isClient()) {\r\n            this._view?.detach();\r\n        }\r\n    }\r\n\r\n    public shutdown(): this {\r\n        this._shutdown = true;\r\n        this._commands.clear();\r\n        return this;\r\n    }\r\n\r\n    private verifyAuthority(userId: string): boolean {\r\n        return this._adminList === undefined || (this._adminList && this._adminList.has(userId));\r\n    }\r\n\r\n    /**\r\n     * 查询管理员列表.\r\n     */\r\n    private queryAdminList() {\r\n        mw.DataStorage\r\n            ?.asyncGetData(GodModService.GodModAdminListStorageKey)\r\n            ?.then(result => {\r\n                    if (this._queriedAdminList) return;\r\n\r\n                    switch (result.code) {\r\n                        case mw.DataStorageResultCode.Success:\r\n                            if (result.data === undefined) {\r\n                                mw.DataStorage.asyncSetData(GodModService.GodModAdminListStorageKey, []);\r\n                            } else {\r\n                                if ((result.data as [])?.length > 0 ?? false) {\r\n                                    this._adminList = new Set();\r\n                                    for (const d of result.data) {\r\n                                        this._adminList.add(d as string);\r\n                                    }\r\n                                } else {\r\n                                    this._adminList = undefined;\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n                    this._queriedAdminList = true;\r\n                },\r\n            );\r\n    };\r\n\r\n    /**\r\n     * 获取填充类型名.\r\n     * @param {string} label\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    private getEventName(label: string): string {\r\n        return GodModService.GodModRequestEventNamePrefix + label;\r\n    }\r\n}\r\n\r\nexport function addGMCommand<P extends AcceptableParamType>(\r\n    label: string,\r\n    paramType: P,\r\n    clientCmd: (params: InferParamType<P>) => void = undefined,\r\n    serverCmd: (player: mw.Player, params: InferParamType<P>) => void = undefined,\r\n    paramOption: GodCommandParamOption<InferParamType<P>> = undefined,\r\n    group?: string) {\r\n    GodModService.getInstance().addCommand(label,\r\n        paramType,\r\n        clientCmd,\r\n        serverCmd,\r\n        paramOption,\r\n        group);\r\n}"],"names":[],"mappings":"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"}